[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d Fashion Match"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w15-1/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* This is a desktop Fashion Match application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d Target Users"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* People who wants to have an easy solution for matching of everyday apparels."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* People who does not want to spend too much time thinking about whether his choice of outfit actually matches correctly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* People who want to know the alternative matching combination to his current choice of base apparel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d Why You Should Totally Use This"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* Lower the risk of being a **Unfashionable**."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Recommendation of matching apparels with just a few commands given."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Use the time spent for planning of matching apparels on something more productive."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* When you look good, you feel good."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* This project is modification of AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 14,
      "PhilipPhil": 1,
      "-": 25
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"githubId\": \"PhilipPhil\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"displayName\": \"GAR...LIP\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"authorNames\": [\"PhilipPhil\",\"Philip Garabandic\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"githubId\": \"rafflesandrison\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"displayName\": \"RAF...SON\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"authorNames\": [\"rafflesandrison\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"githubId\": \"stanleymok\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"displayName\": \"STA...UAN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"authorNames\": [\"stanleymok\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"githubId\": \"ReinSheer\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"displayName\": \"TAN...ENE\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "      \"authorNames\": [\"ReinSheer\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 25
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Fashion Match was developed by W15-1."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d Raffles Andrison"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "image::rafflesandrison.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "{empty}[http://github.com/rafflesandrison[github]]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Setting up of team environment"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Quality check on all pull request submitted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Fous on Storage Component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Working on **Data Organisation Methods** which makes the `list` feature"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "more robust by allowing it to process multiple options."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d\u003d Philip Garabandic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "image::philipphil.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "{empty}[https://github.com/PhilipPhil[github]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Focus on Logic Component"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Working on **Recommendation Algorithms Methods**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d\u003d Stanley Joseph Mok"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "image::stanleymok.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "{empty}[http://github.com/stanleymok[github]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Focus on UI Component"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Working on **Infrastructure Management Methods**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d\u003d Tan Yiren Eugene"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "image::reinsheer.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "{empty}[http://github.com/ReinSheer[github]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Focus on Model Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "* Working on **Profiling Statistical Methods**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 35,
      "PhilipPhil": 3,
      "-": 26
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Email us* : You can also reach us at e0368942@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "﻿\u003d Fashion Match - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w15-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "By: `Team W15-01`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "To verify that you have FM correctly setup:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "After forking the repo, links in the documentation will still refer to the `CS2103-AY1819S2-W15-1/main` repo."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S2-W15-1/main`), you should do the following:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Add Clothes feature"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Adds an item to the clothing database."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// tag::available[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d Make Available feature"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Set availability status to available."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// end::available[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// tag::unavailable[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d Make Unavailable feature"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Set availability status to unavailable."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// end::unavailable[]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d List Clothes feature"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Show a list of all the clothing."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Edit Clothes feature"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Edits an existing item in the database."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Find Clothes feature"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Find item whose name contain any of the given keywords."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Delete Clothes feature"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Deletes the specified item from the database."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Sort Clothes feature"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Sort the list of items."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::relation[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Establish Relation feature"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Establish a relation between two clothings."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::relation[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::match[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Match Clothes feature"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Locate other clothings that can match the given clothing."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::match[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// tag::save[]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Save Clothes feature"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Save the clothing combination and it will be identified by the NAME and tagged to it’s relevant OCCASION."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "// end::save[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// tag::save[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d Recommendation Clothes feature"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Recommend clothing item based on color matching as well as type of clothing."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "_{Recommendation}_"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// end::save[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// tag::save[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d Random Select feature"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Random TYPE, and Something Color method. They return random items of selected color and type."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "_{random TYPE, something COLOR}_"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// end::save[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// tag::save[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d UI Autocomplete feature"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Show matching commands and missing parameters."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "_{More to be added by 3 Apr}_"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// end::save[]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all apparels in the list."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its colorValue."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "** Use the .css attribute `-fx-background-colorValue` to add a colorValue."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s colorValue as well."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a colorValue. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the colorValue."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of apparels when the application just started."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of apparels whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of apparels status bar."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* wishes for a clothing and accessories matching app"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* wishes for an app to store their wardrobe and recommends clothes"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* match clothing and accessories instantly"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* ability to know which clothes/accessories are underutilised/overutilised"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* * *` |user |see all items in closet |see all the clothings that i have"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* * *` |user |add an item |add new item to closet"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* * *` |user |remove item |remove item from closet"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* * *` |user |get outfit recommendations |look good"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`*` |user |sort by how much they like an item |locate a clothing item easily"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "|`* * *` |user |add matching relation between clothings (including accessories) |define matching colorValue combinations that are outside of the default combinations"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* *` |user |see clothings being categorised in their respective category (e.g. shirt, pants, shoe, etc) |locate the clothing item easily"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* *` |power user |know the suitable clothing based on occasions |wear the right clothing based on occasions"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`*` |power user |know the colors that are not suitable for certain clothings |avoid wearing colors that don’t match"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`*` |forgetful user |add tags to each clothing |identify clothing by tags"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* * *` |user |edit item details |edit item details"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* * *` |user |exit the app |exit the app"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`* * *` |efiicient user |save favorite clothing combination |easily find my go-to attire"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`*` |user |Redo previous command |avoid the hassle of retyping commonly used command"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`*` |user |undo previous changes |undo recently committed mistake"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`*` |efficient user |search by keyword |easily locate clothing"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`*` |user |see all saved combinations |easy choice"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|`*` |user |top n most versatile clothing |"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "(For all use cases below, the *System* is the `Fashion Match Application` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Use case: Adding an entry"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "1.  User asks application to add a new entry"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "2.  Application creates a new entry, displays confirmation to user"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "3.  User enters additional information for new entry"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "4.  Application updates entry, displays infomation to user"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* 1a. Entry with same apparel name already exists in Application."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "** 1a1. Application informs user, requests for confirmation"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "** 1a2. User confirms request"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "+"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* 2a. The given information is invalid."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "** 2a1. Application shows an error message."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ".  Should be able to hold up to 1000 apparels without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ". Deleting a person while all apparels are listed"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ".. Prerequisites: List all apparels using the `list` command. Multiple apparels in the list."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 18,
      "rafflesandrison": 13,
      "PhilipPhil": 12,
      "ReinSheer": 110,
      "-": 850
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "﻿\u003d Fashion Match - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w15-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "By: `[W15-1]`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Fashion Match (FM) is for those who *prefer to use a desktop app for managing dresswear*. More importantly, FM is *optimized for those who prefer to work with a Command Line Interface* (CLI). If you can type fast, AB4 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ".  Download the latest `main.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for FM."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ".  Double-click the jar file to start FM. The GUI will appear shortly after."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* *`list`* : lists all apparels"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* **`add`**`n/Cool Tshirt c/Green t/Top` : adds an apparel named `Cool Tshirt` to Fashion Match."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* **`delete`**`3` : deletes the 3rd apparel shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* *`exit`* : exits Fashion Match"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Formal Shirt`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [c/COLOR]` can be used as `n/Formal Shirt c/White` or as `n/Formal Shirt`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME c/COLOR`, `c/COLOR n/NAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d\u003d Listing all apparels : `list`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Shows a list of all apparels in FM. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d Adding a piece of Apparel: `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Add a piece of apparel to wardrobe +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Format: `add n/NAME c/COLOUR t/CLOTHINGTYPE`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `add n/Zara Shirt c/Red t/Top"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `add n/Desigual Tailored Pants c/Grey t/Bottom"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d\u003d Sort all apparels : `sort [option]`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Sort all apparels in the FM based on the option supplied. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Format: `sort` +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "By default, calling `sort` without option will sort the apparels by name in ascending order. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Format: `sort options` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "List all valid sorting options."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Format: `sort [option]` +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Sort all apparels according to the option supplied."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Editing an apparel : `edit`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Edits an existing apparel in FM. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Format: `edit INDEX [n/NAME] [c/COLOUR] [t/CLOTHINGTYPE]`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Edits the apparel at the specified `INDEX`. The index refers to the index number shown in the displayed apparel list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `edit 1 n/TSHIRT c/ORANGE` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Edits the name and colour of the 1st apparel to be `TSHIRT` and `Orange` respectively."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `edit 2 n/Brown Belt t/Belt` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Edits the name of the 2nd apparel to be `Brown Belt` and changes type to `Belt`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// tag::available[]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d Making available/washing a piece of apparel : `available` or `wash`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Makes an existing apparel in FM available. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Format: `wash INDEX` or `available INDEX`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Makes available the apparel at the specified `INDEX`. The index refers to the index number shown in the displayed apparel list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* Apparel will be made available whether it was available or unavailable before the command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `wash 1` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Makes available the 1st apparel in the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `available 2` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Makes available the 2nd apparel in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// tag::unavailable[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\u003d\u003d\u003d Making unavailable/dirty a piece of apparel : `unavailable` or `dirty`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Makes an existing apparel in FM unavailable. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Format: `dirty INDEX` or `unavailable INDEX`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Makes unavailable the apparel at the specified `INDEX`. The index refers to the index number shown in the displayed apparel list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* Apparel will be made unavailable whether it was available or unavailable before the command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Increases the \u0027Times worn\u0027 counter by 1."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "****"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `dirty 1` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Makes available the 1st apparel in the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `unavailable 2` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Makes available the 2nd apparel in the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "\u003d\u003d\u003d Locating apparels by name: `find`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "Finds apparels whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* The search is case insensitive. e.g `Zara` will match `zara`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* The order of the keywords does not matter. e.g. `Nice Shirt` will match `Shirt Nice`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* Only full words will be matched e.g. `Nice` will not match `Nices`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Apparels matching at least one keyword will be returned (i.e. `OR` search). e.g. `Zara Uniqlo` will return `Zara Belt`, `Uniqlo shoes`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "* `find Zara` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "Returns `zara` and `Zara`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* `find Zara Uniqlo Shirt` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Returns any apparel having names `Zara`, `Uniqlo` or `Shirt`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Deleting an apparel : `delete`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Deletes the specified apparel from FM. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Deletes the apparel at the specified `INDEX`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* The index refers to the index number shown in the displayed apparel list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Deletes the 2nd apparel in FM."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* `find Uniqlo` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Deletes the 1st apparel in the results of the `find` command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "\u003d\u003d\u003d Selecting a apparel : `select`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Selects the apparel identified by the index number used in the displayed apparel list. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Selects the apparel and loads a picture of the apparel at the specified `INDEX`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* The index refers to the index number shown in the displayed apparel list."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Selects the 2nd apparel in FM."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* `find Uniqlo` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Selects the 1st apparel in the results of the `find` command."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Restores FM to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Undoable commands: those commands that modify the FM\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "// tag::clear[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Clears all entries from FM. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d Recommend Outfit"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Lists a recommended outfit based on what matches in your closet. The outfit must have a `TOP`, `BOTTOM`, `SHOES`. If a matching belt exists, an outfit may be recommended with a BELT. +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Format: `recommendation`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d Something Color Select"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Returns random apparel of specified COLOR FM. +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Format: `something COLOR`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "****"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Returns random apparel from specified `COLOR`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* The color refers to the color of apparel."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* The color *must be a one of* RED, BLUE, GREEN, WHITE, BLACK, ..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "****"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* `something RED` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Returns a RED apparel from FM."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* `something BLACK` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Returns a BLACK apparel from FM."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d Random Item Type Select"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Returns random specified TYPE of apparel from FM. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Format: `random TYPE`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* Returns random apparel from specified `TYPE`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* The type refers to the type of apparel."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* The type *must be a one of* `TOP`, `BOTTOM`, `BELT`, `SHOES`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "****"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* `random TOP` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Returns a random TOP in FM."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* `random BOTTOM` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Returns a random BOTTOM in FM."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d\u003d Calculating use Statistics `[coming in v4.0]`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "Calculates the rate of wear of each apparel."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "FM data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous FM folder."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* *Add* `add n/NAME c/COLOR t/CLOTHINGTYPE` +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "e.g. `add n/Bright Tshirt c/Yellow t/Top`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [c/COLOR] [t/CLOTHINGTYPE]` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "e.g. `edit 2 n/Formal Belt c/Brown`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "e.g. `find Formal`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Random* : `random TYPE` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "e.g. `random TOP`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Recommendation* : `recommendation`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Something* : `something COLOR` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "e.g. `something RED`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 53,
      "rafflesandrison": 14,
      "PhilipPhil": 40,
      "ReinSheer": 61,
      "-": 185
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "*** Updated the GUI colorValue scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "include::../DeveloperGuide.adoc"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "stanleymok": 2,
      "-": 65
    }
  },
  {
    "path": "docs/team/philipgarabandic.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d Philip Garabandic - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "We build a desktop application that is a clothing closet manager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Major enhancement*: added *RecommendationCommand Algorthym, RandomCommand, and SomethingColorCommand*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "** What it does: RecommendationCommand is an algorythm that find a matching outfit for the user. RandomCommand find a radnom item of chosen type. SomethingColorCommand, finds a random outfit of chosen color."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "** Justification: This feature improves the product significantly because a user can get a outfit with matching colors without thinking. The user can also have the machine pick a item of his favorite color or a type for him so he doesn\u0027t have to think."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. I had to write parsers for each command and a CommandRecommendation. Because the methods function on random numbers I had to add more tests methods also."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Minor enhancement*: I had also added other immpimentations here and there but I didn\u0027t know this was due tonight so it\u0027s too last minute for me to cite all of them. I also updated the user guide and so on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Methods:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/main/java/seedu/address/logic/CommandRecommendation.java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/main/java/seedu/address/logic/parser/RandomItemParser.java"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/main/java/seedu/address/logic/parser/SomethingColorParser.java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/main/java/seedu/address/logic/commands/RandomItemCommand.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/main/java/seedu/address/logic/commands/RecommendationCommand.java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/main/java/seedu/address/logic/commands/SomethingColorCommand.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Tests:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/test/java/seedu/address/logic/commands/RandomItemCommandTest.java"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/test/java/seedu/address/logic/commands/RecommendationCommandTest.java"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/test/java/seedu/address/logic/commands/SomethingColorCommandTest.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/test/java/seedu/address/logic/CommandRecommendationTest.java"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/test/java/seedu/address/logic/parser/RandomItemParserTest.java"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "https://github.com/PhilipPhil/main/blob/master/src/test/java/seedu/address/logic/parser/SomethingColorParserTest.java"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "Methods here and there @@Author will be seen"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "|_Section 3.18,3.19,3.2 and Section 5_"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "include::../UserGuide.adoc"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "|_Added writting in_"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "include::../DeveloperGuide.adoc"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 2,
      "PhilipPhil": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 1,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX \u003d \"The apparel index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_APPARELS_LISTED_OVERVIEW \u003d \"%1$d apparels listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Capitalise the first letter of the given string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static String capitaliseFirstLetter(String s) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 8,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ApparelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class ApparelManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public ApparelManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public ObservableList\u003cApparel\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return model.getFilteredApparelList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public ReadOnlyProperty\u003cApparel\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void setSelectedPerson(Apparel apparel) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.setSelectedPerson(apparel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "stanleymok": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandRecommendation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.BLACK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.BLUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.BROWN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.CREAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.GREEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.GREY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.KHAKI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.NAVY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.ORANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.PINK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.PURPLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.RED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.WHITE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.model.apparel.ColorValue.YELLOW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " * Creates a recommendation outfit of CommandRecommendation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class CommandRecommendation {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private ArrayList\u003cApparel\u003e tops \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private ArrayList\u003cApparel\u003e belts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private ArrayList\u003cApparel\u003e shoes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private ArrayList\u003cApparel\u003e bottoms \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Apparel recommendedTop \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Apparel recommendedBelt \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Apparel recommendedShoe \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Apparel recommendedBottom \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Constructs for CommandRecommendation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public CommandRecommendation(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        setClothingInSections(model.getFilteredApparelList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Collections.shuffle(bottoms);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (bottoms.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        for (int i \u003d 0; i \u003c bottoms.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel currBottom \u003d bottoms.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel currTop \u003d recommendTop(currBottom.getColor());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel currShoe \u003d recommendShoe(currBottom.getColor());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel currBelt \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (currShoe !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                currBelt \u003d recommendBelt(currShoe.getColor());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (currTop !\u003d null \u0026\u0026 currShoe !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                recommendedBottom \u003d currBottom;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                recommendedTop \u003d currTop;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                recommendedShoe \u003d currShoe;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                recommendedBelt \u003d currBelt;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                if (recommendedBelt !\u003d null || belts.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Returns string of recommended outfit."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public String returnRecommendationString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (recommendedBottom \u003d\u003d null || recommendedTop \u003d\u003d null || recommendedShoe \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (recommendedBelt \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return recommendedTop.toString() + \"\\n\" + recommendedBottom.toString()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                    + \"\\n\" + recommendedShoe.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return recommendedTop.toString() + \"\\n\" + recommendedBottom.toString()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"\\n\" + recommendedBelt.toString() + \"\\n\" + recommendedShoe.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Find Shoe that matches the outfit"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Apparel recommendShoe(Color pantColor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (shoes.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Collections.shuffle(shoes);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        for (int i \u003d 0; i \u003c shoes.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel top \u003d shoes.get(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (ColorRules.isValidShoeColor(pantColor, top.getColor())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return shoes.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Find Belt that matches the outfit"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Apparel recommendBelt(Color shoeColor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (belts.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Collections.shuffle(belts);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        for (int i \u003d 0; i \u003c belts.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel top \u003d belts.get(i);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (ColorRules.isValidBeltColor(shoeColor, top.getColor())) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return belts.get(i);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Find Top that matches the outfit"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Apparel recommendTop(Color bottomColor) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (tops.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Collections.shuffle(tops);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        for (int i \u003d 0; i \u003c tops.size(); i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel top \u003d tops.get(i);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (ColorRules.isValidTop(bottomColor, top.getColor())) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return tops.get(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * initiate all the clothing type lists"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private void setClothingInSections(ObservableList\u003cApparel\u003e filteredApparelList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredApparelList.size(); i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel apparel \u003d filteredApparelList.get(i);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            ClothingType type \u003d apparel.getClothingType();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            switch (type.getClothingTypeValue()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case TOP:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                tops.add(apparel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case BELT:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                belts.add(apparel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case SHOES:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                shoes.add(apparel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case BOTTOM:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                bottoms.add(apparel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * class responsible only for color relationships"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    // @@author PhilipPhil"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private static class ColorRules {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] whiteBottomsToShoe \u003d {WHITE, BROWN, PURPLE, NAVY, BLUE, GREEN, RED, GREY};"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] greyBottomsToShoe \u003d {WHITE, GREY, BROWN, PURPLE, NAVY, BLUE, GREEN, RED, BLACK};"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] blackBottomsToShoe \u003d {PURPLE, NAVY, BLUE, GREEN, RED, BLACK};"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] creamBottomsToShoe \u003d {WHITE, GREY, BROWN, PURPLE, NAVY, BLUE, GREEN, RED};"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] brownBottomsToShoe \u003d {WHITE, BROWN, NAVY, BLUE, GREEN};"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] blueBottomsToShoe \u003d {WHITE, GREY, BROWN, PURPLE, NAVY, BLUE, GREEN, RED, BLACK};"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] navyBottomsToShoe \u003d {WHITE, GREY, BROWN, PURPLE, NAVY, BLUE, GREEN, RED, BLACK};"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] greenBottomsToShoe \u003d {WHITE, GREY, BROWN, PURPLE, NAVY, BLUE, GREEN, RED, BLACK};"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] redBottomsToShoe \u003d {WHITE, GREY, BROWN, PURPLE, NAVY, BLUE, GREEN, RED, BLACK};"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] whiteBottomsToShirt \u003d {NAVY, RED, GREEN, BLACK, WHITE, PURPLE, PINK, GREY};"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] greyBottomsToShirt \u003d {WHITE, BLUE, BROWN, RED};"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] blackBottomsToShirt \u003d {NAVY, RED, GREEN, ORANGE, WHITE, PURPLE, YELLOW, PINK, GREY};"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] creamBottomsToShirt \u003d {NAVY, RED, PINK, GREEN, BLACK};"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] brownBottomsToShirt \u003d {WHITE};"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] greenBottomsToShirt \u003d {WHITE};"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] redBottomsToShirt \u003d {WHITE};"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] blueBottomsToShirt \u003d {WHITE, YELLOW, PINK, GREEN, PURPLE, BLUE, BROWN, RED, CREAM,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                                                          KHAKI, GREY, BLACK, ORANGE};"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] navyBottomsToShirt \u003d {WHITE, YELLOW, PINK, GREEN, PURPLE, BLUE, BROWN, RED, CREAM,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                                                          KHAKI, GREY, BLACK, ORANGE};"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         * returns true if belt and shoes match"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        static boolean isValidBeltColor(Color shoe, Color belt) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (shoe.getPrimary().equals(BLACK) \u0026\u0026 belt.getPrimary().equals(BLACK)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (shoe.getPrimary().equals(BROWN) \u0026\u0026 belt.getPrimary().equals(BROWN)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (shoe.getPrimary().equals(WHITE)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         * returns true if shoes and pants match"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        static boolean isValidShoeColor(Color bottom, Color shoe) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            switch (bottom.getPrimary()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case WHITE:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(whiteBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case GREY:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(greyBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case BLACK:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(blackBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case CREAM:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(creamBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case BROWN:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(brownBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case BLUE:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(blueBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case NAVY:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(navyBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case GREEN:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(greenBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case RED:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return isColorBottomsToShoe(redBottomsToShoe, shoe);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         *  Return true if shoe color matches bottom color"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static boolean isColorBottomsToShoe(ColorValue[] colorBottomsToShoe, Color shoe) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            for (int i \u003d 0; i \u003c colorBottomsToShoe.length; i++) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                if (shoe.getPrimary().equals(colorBottomsToShoe[i])) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         * Returns true if top color matches bottoms color"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        static boolean isValidTop(Color bottom, Color top) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            ColorValue[] colorSet \u003d findColors(bottom);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            for (int i \u003d 0; i \u003c colorSet.length; i++) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                if (top.getPrimary().equals(colorSet[i])) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         * Return the set of matching colors corresponding to color of bottom"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "         */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        private static ColorValue[] findColors(Color bottom) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            switch (bottom.getPrimary()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case WHITE:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return whiteBottomsToShirt;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case GREY:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return greyBottomsToShirt;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case BLACK:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return blackBottomsToShirt;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case CREAM:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return creamBottomsToShirt;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case BROWN:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return brownBottomsToShirt;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case BLUE:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return blueBottomsToShirt;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case NAVY:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return navyBottomsToShirt;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            case GREEN:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return greenBottomsToShirt;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                return redBottomsToShirt;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 306
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    ObservableList\u003cApparel\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Selected apparel in the filtered apparel list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * null if no apparel is selected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedPersonProperty()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    ReadOnlyProperty\u003cApparel\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Sets the selected apparel in the filtered apparel list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPerson(Apparel)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    void setSelectedPerson(Apparel apparel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "ReinSheer": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean addressBookModified;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getAddressBook().addListener(observable -\u003e addressBookModified \u003d true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookModified \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (addressBookModified) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ObservableList\u003cApparel\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return model.getFilteredApparelList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ReadOnlyProperty\u003cApparel\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedPersonProperty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void setSelectedPerson(Apparel apparel) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        model.setSelectedPerson(apparel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 102,
      "ReinSheer": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLOTHING_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Adds a apparel to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a apparel to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + PREFIX_COLOR + \"COLOR \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + PREFIX_CLOTHING_TYPE + \"TYPE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + PREFIX_NAME + \"blurr berry blex \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + PREFIX_COLOR + \"NAVY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + PREFIX_CLOTHING_TYPE + \"TOP\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New apparel added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPAREL \u003d \"This apparel already exists in the address book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final Apparel toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Apparel}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public AddCommand(Apparel apparel) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireNonNull(apparel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        toAdd \u003d apparel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (model.hasApparel(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.addApparel(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 10,
      "-": 43,
      "ReinSheer": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AvailableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPARELS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * Edits the details of an existing apparel in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class AvailableCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"available\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String ALTERNATE_COMMAND_WORD \u003d \"wash\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the availability of the apparel identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            + \"by the index number used in the displayed apparel list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 or \" + ALTERNATE_COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String MESSAGE_EDIT_APPAREL_SUCCESS \u003d \"Apparel made available: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Apparel index must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPAREL \u003d \"This apparel already exists in the address book.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final AvailablePersonDescriptor availablePersonDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * @param index of the apparel in the filtered apparel list to edit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * @param availablePersonDescriptor details to edit the apparel with"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailableCommand(Index index, AvailablePersonDescriptor availablePersonDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireNonNull(availablePersonDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.availablePersonDescriptor \u003d new AvailablePersonDescriptor(availablePersonDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        List\u003cApparel\u003e lastShownList \u003d model.getFilteredApparelList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d createEditedPerson(apparelToEdit, availablePersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (!apparelToEdit.isSameApparel(editedApparel) \u0026\u0026 model.hasApparel(editedApparel)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Creates and returns a {@code Apparel} with the details of {@code apparelToEdit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * edited with {@code availablePersonDescriptor}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private static Apparel createEditedPerson(Apparel apparelToEdit, AvailablePersonDescriptor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            availablePersonDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assert apparelToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Name updatedName \u003d availablePersonDescriptor.getName().orElse(apparelToEdit.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Color updatedColor \u003d availablePersonDescriptor.getColor().orElse(apparelToEdit.getColor());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        ClothingType updatedClothingType \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                availablePersonDescriptor.getClothingType().orElse(apparelToEdit.getClothingType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new Apparel(updatedName, updatedColor, updatedClothingType, true, apparelToEdit.getUsageCount());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (!(other instanceof AvailableCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand e \u003d (AvailableCommand) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                \u0026\u0026 availablePersonDescriptor.equals(e.availablePersonDescriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Stores the details to edit the apparel with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * corresponding field value of the apparel."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static class AvailablePersonDescriptor {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private Color color;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private ClothingType clothingType;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public AvailablePersonDescriptor() {}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public AvailablePersonDescriptor(AvailablePersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setColor(toCopy.color);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setClothingType(toCopy.clothingType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setColor(Color color) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.color \u003d color;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cColor\u003e getColor() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.ofNullable(color);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setClothingType(ClothingType clothingType) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.clothingType \u003d clothingType;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cClothingType\u003e getClothingType() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.ofNullable(clothingType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            if (!(other instanceof AvailablePersonDescriptor)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            AvailablePersonDescriptor e \u003d (AvailablePersonDescriptor) other;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    \u0026\u0026 getColor().equals(e.getColor())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    \u0026\u0026 getClothingType().equals(e.getClothingType())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 208
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Deletes a apparel identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            + \": Deletes the apparel identified by the index number used in the displayed apparel list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Apparel: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        List\u003cApparel\u003e lastShownList \u003d model.getFilteredApparelList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparelToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.deleteApparel(apparelToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, apparelToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 3,
      "-": 46,
      "ReinSheer": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLOTHING_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPARELS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Edits the details of an existing apparel in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the apparel identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            + \"by the index number used in the displayed apparel list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            + \"To edit availability use dirty/unavailable and wash/available commands. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + \"[\" + PREFIX_COLOR + \"COLOR] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + \"[\" + PREFIX_CLOTHING_TYPE + \"TYPE] \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + PREFIX_COLOR + \"RED \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + PREFIX_CLOTHING_TYPE + \"BOTTOM\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_EDIT_APPAREL_SUCCESS \u003d \"Edited Apparel: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPAREL \u003d \"This apparel already exists in the address book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @param index of the apparel in the filtered apparel list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @param editPersonDescriptor details to edit the apparel with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        List\u003cApparel\u003e lastShownList \u003d model.getFilteredApparelList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparelToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel editedApparel \u003d createEditedPerson(apparelToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!apparelToEdit.isSameApparel(editedApparel) \u0026\u0026 model.hasApparel(editedApparel)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        model.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Creates and returns a {@code Apparel} with the details of {@code apparelToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static Apparel createEditedPerson(Apparel apparelToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assert apparelToEdit !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(apparelToEdit.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Color updatedColor \u003d editPersonDescriptor.getColor().orElse(apparelToEdit.getColor());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ClothingType updatedClothingType \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                editPersonDescriptor.getClothingType().orElse(apparelToEdit.getClothingType());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return new Apparel(updatedName, updatedColor, updatedClothingType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Stores the details to edit the apparel with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * corresponding field value of the apparel."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        private Color color;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        private ClothingType clothingType;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            setColor(toCopy.color);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            setClothingType(toCopy.clothingType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, color, clothingType, address, tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        public void setColor(Color color) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            this.color \u003d color;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        public Optional\u003cColor\u003e getColor() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            return Optional.ofNullable(color);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        public void setClothingType(ClothingType clothingType) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            this.clothingType \u003d clothingType;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        public Optional\u003cClothingType\u003e getClothingType() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            return Optional.ofNullable(clothingType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                    \u0026\u0026 getColor().equals(e.getColor())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                    \u0026\u0026 getClothingType().equals(e.getClothingType())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 13,
      "stanleymok": 1,
      "-": 170,
      "ReinSheer": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.updateFilteredApparelList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                String.format(Messages.MESSAGE_APPARELS_LISTED_OVERVIEW, model.getFilteredApparelList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 40,
      "ReinSheer": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPARELS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all apparels\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RandomItemCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " * Returns random item of selected type from address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class RandomItemCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"random\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Returns a random apparel item.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            + \"Parameters: TYPE\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"TOP\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"BOTTOM\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"BELT\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"SHOES\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String MESSAGE_RANDOM_NOT_FOUND \u003d \"could not find a random apparel item\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String MESSAGE_MESSAGE_SUCCESS \u003d \"random apparel found\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private final ClothingTypeValue targetType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public RandomItemCommand(ClothingTypeValue targetType) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        this.targetType \u003d targetType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ArrayList\u003cApparel\u003e randomApperals \u003d shuffleApperals(model.getFilteredApparelList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (randomApperals.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new CommandResult(MESSAGE_RANDOM_NOT_FOUND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return new CommandResult(MESSAGE_MESSAGE_SUCCESS + \"\\n\" + randomApperals.get(0).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Returns a list of Apparel that is in random order and only contains targetType."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private ArrayList\u003cApparel\u003e shuffleApperals(ObservableList\u003cApparel\u003e filteredApparelList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ArrayList\u003cApparel\u003e randomApparels \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredApparelList.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel currApparel \u003d filteredApparelList.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (currApparel.getClothingType().getClothingTypeValue().equals(targetType)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                randomApparels.add(currApparel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Collections.shuffle(randomApparels);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return randomApparels;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                || (obj instanceof RandomItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                \u0026\u0026 targetType.equals(((RandomItemCommand) obj).targetType));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecommendationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.CommandRecommendation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " * Return a recommended outfit to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class RecommendationCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recommendation\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String MESSAGE_MESSAGE_SUCCESS \u003d \"the outfit is: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String MESSAGE_NO_RECOMMENDATION \u003d \"could not find a recommendation\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        CommandRecommendation rec \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String outfit \u003d rec.returnRecommendationString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (outfit.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new CommandResult(MESSAGE_NO_RECOMMENDATION);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new CommandResult(MESSAGE_MESSAGE_SUCCESS + \"\\n\" + outfit);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "PhilipPhil": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPARELS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Selects a apparel identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            + \": Selects the apparel identified by the index number used in the displayed apparel list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Apparel: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        List\u003cApparel\u003e filteredApparelList \u003d model.getFilteredApparelList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredApparelList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        model.setSelectedPerson(filteredApparelList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 47,
      "ReinSheer": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SomethingColorCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " * Returns some item of selected color from address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class SomethingColorCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"something\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Randomly returns one item of selected color\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            + \"Parameters: COLOR\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"RED\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + \"BLACK\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String MESSAGE_MESSAGE_SUCCESS \u003d \"Item of chosen color found\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static final String MESSAGE_RANDOM_NOT_FOUND \u003d \"Item of chosen color not found\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private final ColorValue targetColor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public SomethingColorCommand(ColorValue targetColor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        this.targetColor \u003d targetColor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ArrayList\u003cApparel\u003e randomApparels \u003d shuffleApperals(model.getFilteredApparelList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (randomApparels.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new CommandResult(MESSAGE_RANDOM_NOT_FOUND);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return new CommandResult(MESSAGE_MESSAGE_SUCCESS + \"\\n\" + randomApparels.get(0).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Returns a list of Apparel that is in random order and only contains targetColor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private ArrayList\u003cApparel\u003e shuffleApperals(ObservableList\u003cApparel\u003e filteredApparelList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ArrayList\u003cApparel\u003e colorApperals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredApparelList.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            Apparel currApparel \u003d filteredApparelList.get(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (currApparel.getColor().getPrimary().equals(targetColor)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                colorApperals.add(currApparel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Collections.shuffle(colorApperals);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return colorApperals;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return obj \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                || (obj instanceof SomethingColorCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                \u0026\u0026 targetColor.equals(((SomethingColorCommand) obj).targetColor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.options.SortOption;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " * Edits the details of an existing apparel in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String COMMAND_LIST_OPTIONS \u003d \"options\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort the apparels based on the given option.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + \"Example: sort name\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + \"Outcome: apparel list sorted in ascending order of the name.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_SORT_APPAREL_SUCCESS \u003d \"Apparels sorted\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_INVALID_OPTION \u003d \"Invalid option: Type `sort see options` \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            + \"to see valid options.\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private final SortOption sortOption;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * @param sortOption the sorting option"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public SortCommand(SortOption sortOption) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        requireNonNull(sortOption);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        this.sortOption \u003d sortOption;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        List\u003cApparel\u003e lastShownList \u003d model.getFilteredApparelList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        List\u003cApparel\u003e lastShownListUntouch \u003d new ArrayList\u003c\u003e(lastShownList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        List\u003cApparel\u003e modifiableList \u003d new ArrayList\u003cApparel\u003e(lastShownList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(MESSAGE_SORT_APPAREL_SUCCESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        sb.append(\" by \" + sortOption.toString().toLowerCase() + \".\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (COMMAND_LIST_OPTIONS.equalsIgnoreCase(sortOption.toString())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            return new CommandResult(SortOption.allOptions());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        } else if (SortOption.NAME.equals(sortOption)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            modifiableList.sort((Apparel x, Apparel y) -\u003e x.getName().compareTo(y.getName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        } else if (SortOption.COLOR.equals(sortOption)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            modifiableList.sort((Apparel x, Apparel y) -\u003e x.getColor().compareTo(y.getColor()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        } else if (SortOption.TYPE.equals(sortOption)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            modifiableList.sort((Apparel x, Apparel y) -\u003e x.getClothingType().toString()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                    .compareTo(y.getClothingType().toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel apparelToDelete: lastShownListUntouch) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            model.deleteApparel(apparelToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel apparelToAdd: modifiableList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            model.addApparel(apparelToAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return new CommandResult(String.format(sb.toString()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!(other instanceof SortCommand)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SortCommand e \u003d (SortCommand) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return sortOption.equals(e.sortOption);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnavailableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPARELS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * Edits the details of an existing apparel in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class UnavailableCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unavailable\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String ALTERNATE_COMMAND_WORD \u003d \"dirty\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the availability of the apparel identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            + \"by the index number used in the displayed apparel list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 or \" + ALTERNATE_COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String MESSAGE_EDIT_APPAREL_SUCCESS \u003d \"Apparel made unavailable: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Apparel index must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPAREL \u003d \"This apparel already exists in the address book.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final UnavailablePersonDescriptor unavailablePersonDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * @param index of the apparel in the filtered apparel list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * @param editPersonDescriptor details to edit the apparel with"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailableCommand(Index index, UnavailablePersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.unavailablePersonDescriptor \u003d new UnavailablePersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        List\u003cApparel\u003e lastShownList \u003d model.getFilteredApparelList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d createEditedPerson(apparelToEdit, unavailablePersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (!apparelToEdit.isSameApparel(editedApparel) \u0026\u0026 model.hasApparel(editedApparel)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Creates and returns a {@code Apparel} with the details of {@code apparelToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private static Apparel createEditedPerson(Apparel apparelToEdit, UnavailablePersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assert apparelToEdit !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(apparelToEdit.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Color updatedColor \u003d editPersonDescriptor.getColor().orElse(apparelToEdit.getColor());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        ClothingType updatedClothingType \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                editPersonDescriptor.getClothingType().orElse(apparelToEdit.getClothingType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        int updatedUsageDescriptor \u003d apparelToEdit.getUsageCount() + 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new Apparel(updatedName, updatedColor,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                            updatedClothingType, false, updatedUsageDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (!(other instanceof UnavailableCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand e \u003d (UnavailableCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                \u0026\u0026 unavailablePersonDescriptor.equals(e.unavailablePersonDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Stores the details to edit the apparel with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * corresponding field value of the apparel."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static class UnavailablePersonDescriptor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private Color color;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private ClothingType clothingType;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public UnavailablePersonDescriptor() {}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public UnavailablePersonDescriptor(UnavailablePersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setColor(toCopy.color);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setClothingType(toCopy.clothingType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, color, clothingType, address, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setColor(Color color) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.color \u003d color;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cColor\u003e getColor() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.ofNullable(color);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setClothingType(ClothingType clothingType) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.clothingType \u003d clothingType;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cClothingType\u003e getClothingType() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.ofNullable(clothingType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            if (!(other instanceof UnavailablePersonDescriptor)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            UnavailablePersonDescriptor e \u003d (UnavailablePersonDescriptor) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    \u0026\u0026 getColor().equals(e.getColor())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    \u0026\u0026 getClothingType().equals(e.getClothingType())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 216
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPARELS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/options/SortOption.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "package seedu.address.logic.options;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " * Represents the options available for Sort command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "public enum SortOption {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    // WARNING: OPTIONS must be the first."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    OPTIONS,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    NAME,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    COLOR,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Return true if option supplied is valid, false otherwise."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static boolean isValid(String optionString) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (SortOption so : SortOption.values()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            String validOption \u003d so.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            if (validOption.equalsIgnoreCase(optionString.trim())) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Create a SortOption."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static SortOption create(String optionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!isValid(optionString)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid option.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return SortOption.valueOf(optionString.toUpperCase());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Return all the available sorting options in String format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static String allOptions() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SortOption[] sortOptions \u003d SortOption.values();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        sb.append(\"All the valid sorting options:\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (int i \u003d 1; i \u003c sortOptions.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            sb.append(sortOptions[i].toString().toLowerCase() + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLOTHING_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COLOR,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                        PREFIX_CLOTHING_TYPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COLOR, PREFIX_CLOTHING_TYPE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Color color \u003d ParserUtil.parseColor(argMultimap.getValue(PREFIX_COLOR).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ClothingType clothingType \u003d ParserUtil.parseClothingType(argMultimap.getValue(PREFIX_CLOTHING_TYPE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return new AddCommand(apparel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 41,
      "ReinSheer": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.AvailableCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.commands.RandomItemCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.commands.RecommendationCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.commands.SomethingColorCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.UnavailableCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        case UnavailableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return new UnavailableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        case UnavailableCommand.ALTERNATE_COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return new UnavailableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        case AvailableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return new AvailableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        case AvailableCommand.ALTERNATE_COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return new AvailableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        case RecommendationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new RecommendationCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        case RandomItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new RandomItemParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        case SomethingColorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new SomethingColorParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 14,
      "rafflesandrison": 4,
      "PhilipPhil": 12,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AvailableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLOTHING_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.AvailableCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class AvailableCommandParser implements Parser\u003cAvailableCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COLOR,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                        PREFIX_CLOTHING_TYPE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AvailableCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand.AvailablePersonDescriptor availablePersonDescriptor \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                new AvailableCommand.AvailablePersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            availablePersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLOR).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            availablePersonDescriptor.setColor(ParserUtil.parseColor(argMultimap.getValue(PREFIX_COLOR).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLOTHING_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            availablePersonDescriptor.setClothingType("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    ParserUtil.parseClothingType(argMultimap.getValue(PREFIX_CLOTHING_TYPE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /*if (!availablePersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new ParseException(UnavailableCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new AvailableCommand(index, availablePersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Prefix PREFIX_COLOR \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Prefix PREFIX_CLOTHING_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLOTHING_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COLOR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                        PREFIX_CLOTHING_TYPE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLOR).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            editPersonDescriptor.setColor(ParserUtil.parseColor(argMultimap.getValue(PREFIX_COLOR).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLOTHING_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            editPersonDescriptor.setClothingType("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                    ParserUtil.parseClothingType(argMultimap.getValue(PREFIX_CLOTHING_TYPE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 69,
      "ReinSheer": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "ReinSheer": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.options.SortOption;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Parse {@code optionString} into an enum type and return it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * @throws ParseException if the specified optionString is invalid (not listed as valid options)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static SortOption parseSortValue(String optionString) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String optionSupplied \u003d optionString.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!SortOption.isValid(optionSupplied)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            throw new ParseException(\"Invalid option given\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return SortOption.create(optionSupplied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Parses a {@code String color} into a {@code Color}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @throws ParseException if the given {@code color} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    // @@author PhilipPhil"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static Color parseColor(String color) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        requireNonNull(color);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String trimmedColor \u003d color.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (!ColorValue.isValidColor(trimmedColor)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            throw new ParseException(Color.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return new Color(trimmedColor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Parses a {@code String clothingType} into an {@code ClothingType}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * @throws ParseException if the given {@code clothingType} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    // @@author PhilipPhil"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static ClothingType parseClothingType(String clothingType) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        requireNonNull(clothingType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String trimmedType \u003d clothingType.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (!ClothingTypeValue.isValidClothingType(trimmedType)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            throw new ParseException(ClothingType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return new ClothingType(trimmedType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 14,
      "PhilipPhil": 60,
      "-": 52,
      "ReinSheer": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RandomItemParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.commands.RandomItemCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " * Parses input arguments and creates a new RandomItemCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class RandomItemParser implements Parser\u003cRandomItemCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RandomItemCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * and returns an RandomItemCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public RandomItemCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            ClothingTypeValue clothingTypeValue \u003d ParserUtil.parseClothingType(userInput).getClothingTypeValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new RandomItemCommand(clothingTypeValue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RandomItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SomethingColorParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.commands.SomethingColorCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " * Parses input arguments and creates a new SomethingColorCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class SomethingColorParser implements Parser\u003cSomethingColorCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SomethingColorCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * and returns an SomethingColorCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public SomethingColorCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            ColorValue colorValue \u003d ParserUtil.parseColor(userInput).getPrimary();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            return new SomethingColorCommand(colorValue);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SomethingColorCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.options.SortOption;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            SortOption sortOption \u003d ParserUtil.parseSortValue(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            return new SortCommand(sortOption);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnavailableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLOTHING_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.UnavailableCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.UnavailableCommand.UnavailablePersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class UnavailableCommandParser implements Parser\u003cUnavailableCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COLOR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                        PREFIX_CLOTHING_TYPE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    UnavailableCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor editPersonDescriptor \u003d new UnavailablePersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLOR).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            editPersonDescriptor.setColor(ParserUtil.parseColor(argMultimap.getValue(PREFIX_COLOR).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLOTHING_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            editPersonDescriptor.setClothingType("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                    ParserUtil.parseClothingType(argMultimap.getValue(PREFIX_CLOTHING_TYPE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        /*if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new ParseException(UnavailableCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new UnavailableCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.UniqueApparelList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Duplicates are not allowed (by .isSameApparel comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final UniqueApparelList apparels;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        apparels \u003d new UniqueApparelList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Replaces the contents of the apparel list with {@code apparels}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * {@code apparels} must not contain duplicate apparels."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void setApparels(List\u003cApparel\u003e apparels) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.apparels.setApparels(apparels);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        setApparels(newData.getApparelList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    //// apparel-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns true if a apparel with the same identity as {@code apparel} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public boolean hasApparel(Apparel apparel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireNonNull(apparel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return apparels.contains(apparel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Adds a apparel to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * The apparel must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void addApparel(Apparel p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        apparels.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Replaces the given apparel {@code target} in the list with {@code editedApparel}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * The apparel identity of {@code editedApparel} must not be"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * the same as another existing apparel in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void setApparel(Apparel target, Apparel editedApparel) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireNonNull(editedApparel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        apparels.setApparel(target, editedApparel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void removeApparel(Apparel key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        apparels.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return apparels.asUnmodifiableObservableList().size() + \" apparels\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ObservableList\u003cApparel\u003e getApparelList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return apparels.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 apparels.equals(((AddressBook) other).apparels));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return apparels.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 113,
      "ReinSheer": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    Predicate\u003cApparel\u003e PREDICATE_SHOW_ALL_APPARELS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns true if a apparel with the same identity as {@code apparel} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    boolean hasApparel(Apparel apparel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Deletes the given apparel."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * The apparel must exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    void deleteApparel(Apparel target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Adds the given apparel."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * {@code apparel} must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    void addApparel(Apparel apparel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Replaces the given apparel {@code target} with {@code editedApparel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * The apparel identity of {@code editedApparel} must not"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * be the same as another existing apparel in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    void setPerson(Apparel target, Apparel editedApparel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /** Returns an unmodifiable view of the filtered apparel list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    ObservableList\u003cApparel\u003e getFilteredApparelList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Updates the filter of the filtered apparel list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    void updateFilteredApparelList(Predicate\u003cApparel\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Selected apparel in the filtered apparel list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * null if no apparel is selected."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    ReadOnlyProperty\u003cApparel\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns the selected apparel in the filtered apparel list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * null if no apparel is selected."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    Apparel getSelectedApparel();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Sets the selected apparel in the filtered apparel list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    void setSelectedPerson(Apparel apparel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 7,
      "-": 105,
      "ReinSheer": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.exceptions.ApparelNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final FilteredList\u003cApparel\u003e filteredApparels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final SimpleObjectProperty\u003cApparel\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        filteredApparels \u003d new FilteredList\u003c\u003e(versionedAddressBook.getApparelList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        filteredApparels.addListener(this::ensureSelectedPersonIsValid);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public boolean hasApparel(Apparel apparel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireNonNull(apparel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return versionedAddressBook.hasApparel(apparel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void deleteApparel(Apparel target) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        versionedAddressBook.removeApparel(target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void addApparel(Apparel apparel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        versionedAddressBook.addApparel(apparel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void setPerson(Apparel target, Apparel editedApparel) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireAllNonNull(target, editedApparel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        versionedAddressBook.setApparel(target, editedApparel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Apparel List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Apparel} backed by the internal list of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public ObservableList\u003cApparel\u003e getFilteredApparelList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return filteredApparels;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void updateFilteredApparelList(Predicate\u003cApparel\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        filteredApparels.setPredicate(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected apparel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ReadOnlyProperty\u003cApparel\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public Apparel getSelectedApparel() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedPerson.getValue();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void setSelectedPerson(Apparel apparel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (apparel !\u003d null \u0026\u0026 !filteredApparels.contains(apparel)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new ApparelNotFoundException();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        selectedPerson.setValue(apparel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Ensures {@code selectedPerson} is a valid apparel in {@code filteredApparels}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private void ensureSelectedPersonIsValid(ListChangeListener.Change\u003c? extends Apparel\u003e change) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedPerson.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                // null is always a valid selected apparel, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPerson.getValue());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonReplaced) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                // Update selectedPerson to its new value."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPerson.getValue());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPerson.getValue().isSameApparel(removedPerson));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                // Select the apparel that came before it in the list,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                // or clear the selection if there is no such apparel."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedPerson.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 filteredApparels.equals(other.filteredApparels)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Debugging tool to determine and output the property that is different."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void validateEquality(ModelManager other) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!versionedAddressBook.equals(other.versionedAddressBook)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            System.out.println(\"versionedAddressBook is different\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!userPrefs.equals(other.userPrefs)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            System.out.println(\"userPrefs is different\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!filteredApparels.equals(other.filteredApparels)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            System.out.println(\"filteredApparels is different\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        if (!Objects.equals(selectedPerson.get(), other.selectedPerson.get())) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            System.out.println(\"selectedPerson is different\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return \"ModelManager{\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + \"versionedAddressBook\u003d\" + versionedAddressBook"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + \", userPrefs\u003d\" + userPrefs"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + \", filteredApparels\u003d\" + filteredApparels"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + \", selectedPerson\u003d\" + selectedPerson"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 37,
      "-": 198,
      "ReinSheer": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    ObservableList\u003cApparel\u003e getApparelList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "ReinSheer": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Represents a Apparel\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReinSheer": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/Apparel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Represents a Apparel in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class Apparel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private Color color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private ClothingType clothingType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    // Status fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private boolean available;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private int usageCount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public Apparel() {};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public Apparel(Name name, Color color, ClothingType clothingType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireAllNonNull(name, color, clothingType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.clothingType \u003d clothingType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.available \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.usageCount \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public Apparel(Name name, Color color, ClothingType clothingType, boolean available) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireAllNonNull(name, color, clothingType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.clothingType \u003d clothingType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.available \u003d available;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.usageCount \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public Apparel(Name name, Color color, ClothingType clothingType, boolean available, int usageCount) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        requireAllNonNull(name, color, clothingType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.clothingType \u003d clothingType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.available \u003d available;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.usageCount \u003d usageCount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public Color getColor() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return color;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ClothingType getClothingType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return clothingType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public String getAvailabilityStatus() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        if (isAvailable()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return \"Available\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            return \"Unavailable\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public boolean isAvailable() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return available;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public int getUsageCount() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return usageCount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void use() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        usageCount++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void dirty() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        available \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void wash() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        available \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns true if both apparels of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * This defines a weaker notion of equality between two apparels."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public boolean isSameApparel(Apparel otherApparel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (otherApparel \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return otherApparel !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 otherApparel.getName().equals(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 (otherApparel.getColor().equals(getColor())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                \u0026\u0026 otherApparel.getClothingType().equals(getClothingType()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns true if both apparels have the same identity and data fields."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (!(other instanceof Apparel)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel otherApparel \u003d (Apparel) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return otherApparel.getName().equals(getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 otherApparel.getColor().equals(getColor())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 otherApparel.getClothingType().equals(getClothingType());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return Objects.hash(name, color, clothingType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .append(\" Color: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .append(getColor())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .append(\" ClothingType: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .append(getClothingType())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .append(\" Available: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .append(isAvailable())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .append(\" Usage-count: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .append(getUsageCount());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 7,
      "stanleymok": 25,
      "ReinSheer": 58,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/ClothingType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Represents am Apparel\u0027s ClothingType in the apparel bank."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "public class ClothingType implements Comparable\u003cClothingType\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            \"Types that are accepted are TOP, BOTTOM, BELT, SHOES.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private ClothingTypeValue primary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public ClothingType() {};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Constructs a {@code ClothingType}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @param primary A valid primary type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ClothingType(ClothingTypeValue primary) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireNonNull(primary);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        checkArgument(ClothingTypeValue.isValidClothingType(primary), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.primary \u003d primary;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Constructs a {@code Type}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @param primary A valid primary type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ClothingType(String primary) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireNonNull(primary);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        checkArgument(ClothingTypeValue.isValidClothingType(primary), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.primary \u003d ClothingTypeValue.valueOf(primary.toUpperCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public ClothingTypeValue getClothingTypeValue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return this.primary;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                || (other instanceof ClothingType // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 primary \u003d\u003d (((ClothingType) other).primary)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return Objects.hash(primary);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public int compareTo(ClothingType other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return this.primary.compareTo(other.primary);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return primary.name();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 17,
      "PhilipPhil": 4,
      "ReinSheer": 22,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/ClothingTypeValue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Represents the primary type of an apparel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public enum ClothingTypeValue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    TOP,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    BOTTOM,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    BELT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    SHOES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Return true if a given string is a valid type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static boolean isValidClothingType(String other) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ClothingTypeValue[] types \u003d ClothingTypeValue.values();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        for (ClothingTypeValue t : types) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            if (t.toString().equalsIgnoreCase(other)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Return true if a given string is a valid type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static boolean isValidClothingType(ClothingTypeValue other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ClothingTypeValue[] types \u003d ClothingTypeValue.values();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        for (ClothingTypeValue t : types) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            if (other \u003d\u003d t) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "ReinSheer": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/Color.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Represents an Apparel\u0027s color in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "public class Color implements Comparable\u003cColor\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            \"Colors should only be those that are listed in the list of accepted colors.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                    + \"Type `colors` to see all the accepted colors.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private ColorValue primary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public Color() { }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Constructs a {@code Color}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @param primary A valid primary color."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public Color(ColorValue primary) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireNonNull(primary);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        checkArgument(ColorValue.isValidColor(primary), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.primary \u003d primary;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Constructs a {@code Color}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @param primary A valid primary color."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public Color(String primary) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireNonNull(primary);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        checkArgument(ColorValue.isValidColor(primary), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.primary \u003d ColorValue.valueOf(primary.toUpperCase());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public ColorValue getPrimary() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        return primary;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                || (other instanceof Color // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 primary \u003d\u003d (((Color) other).primary)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return Objects.hash(primary);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public int compareTo(Color other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return this.primary.name().compareTo(other.primary.name());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return primary.name();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 15,
      "PhilipPhil": 5,
      "ReinSheer": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/ColorValue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Represents the value of the color of apparel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Accepted color that already has matching relation established."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * For new color to be added, make sure the new color has a matching relation to any other"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * pre-defined colors."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public enum ColorValue {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    RED,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    ORANGE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    YELLOW,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    GREEN,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    BLUE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    PURPLE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    BROWN,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    NAVY,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    PINK,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    BLACK,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    WHITE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    GREY,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    KHAKI,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    CREAM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Return true if a given string is a valid color."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static boolean isValidColor(String other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ColorValue[] colors \u003d ColorValue.values();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        for (ColorValue c : colors) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            if (c.toString().equalsIgnoreCase(other)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Return true if a given color value is a valid color."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static boolean isValidColor(ColorValue other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ColorValue[] colors \u003d ColorValue.values();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        for (ColorValue c : colors) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            if (other \u003d\u003d c) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "PhilipPhil": 3,
      "ReinSheer": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " * Represents a Apparel\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public int compareTo(Name o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return this.fullName.toLowerCase().compareTo(o.fullName.toLowerCase());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 7,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Tests that a {@code Apparel}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cApparel\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public boolean test(Apparel apparel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(apparel.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReinSheer": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/UniqueApparelList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.exceptions.ApparelNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.exceptions.DuplicateApparelException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * A list of apparels that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * An apparel is considered unique by comparing using {@code Apparel#isSameApparel(Apparel)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * As such, adding and updating of apparels uses Apparel#isSameApparel(Apparel) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * so as to ensure that the apparel being added or updated is unique in terms of identity in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * the UniqueApparelList. However, the removal of a apparel uses Apparel#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * as to ensure that the apparel with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * @see Apparel#isSameApparel(Apparel)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class UniqueApparelList implements Iterable\u003cApparel\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final ObservableList\u003cApparel\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final ObservableList\u003cApparel\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns true if the list contains an equivalent apparel as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public boolean contains(Apparel toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameApparel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Adds a apparel to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * The apparel must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void add(Apparel toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new DuplicateApparelException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Replaces the apparel {@code target} in the list with {@code editedApparel}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * The apparel identity of {@code editedApparel} must not be the same as another existing apparel in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void setApparel(Apparel target, Apparel editedApparel) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireAllNonNull(target, editedApparel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new ApparelNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (!target.isSameApparel(editedApparel) \u0026\u0026 contains(editedApparel)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new DuplicateApparelException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        internalList.set(index, editedApparel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Removes the equivalent apparel from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * The apparel must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void remove(Apparel toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new ApparelNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void setApparels(UniqueApparelList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Replaces the contents of this list with {@code apparels}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * {@code apparels} must not contain duplicate apparels."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void setApparels(List\u003cApparel\u003e apparels) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        requireAllNonNull(apparels);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (!apparelsAreUnique(apparels)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new DuplicateApparelException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        internalList.setAll(apparels);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ObservableList\u003cApparel\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public Iterator\u003cApparel\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                || (other instanceof UniqueApparelList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueApparelList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns true if {@code apparels} contains only unique apparels."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private boolean apparelsAreUnique(List\u003cApparel\u003e apparels) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        for (int i \u003d 0; i \u003c apparels.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            for (int j \u003d i + 1; j \u003c apparels.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                if (apparels.get(i).isSameApparel(apparels.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReinSheer": 53,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/exceptions/ApparelNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Signals that the operation is unable to find the specified apparel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class ApparelNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ReinSheer": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/apparel/exceptions/DuplicateApparelException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Signals that the operation will result in duplicate Apparels (Apparels are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class DuplicateApparelException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public DuplicateApparelException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReinSheer": 5,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static Apparel[] getSamplePersons() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return new Apparel[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            new Apparel(new Name(\"Formal Shirt\"), new Color(\"White\"), new ClothingType(\"Top\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            new Apparel(new Name(\"Formal Pants\"), new Color(\"Black\"), new ClothingType(\"Bottom\")),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            new Apparel(new Name(\"Formal Belt\"), new Color(\"Black\"), new ClothingType(\"Belt\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            new Apparel(new Name(\"Formal Shoes\"), new Color(\"Black\"), new ClothingType(\"Shoes\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            new Apparel(new Name(\"Uniqlo Tshirt\"), new Color(\"Yellow\"), new ClothingType(\"Top\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            new Apparel(new Name(\"Adidas Tshirt\"), new Color(\"Brown\"), new ClothingType(\"Top\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        for (Apparel sampleApparel : getSamplePersons()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            sampleAb.addApparel(sampleApparel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ReinSheer": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedApparel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Jackson-friendly version of {@link Apparel}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "class JsonAdaptedApparel {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Apparel\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final Color color;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final ClothingType clothingType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final boolean status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private final int usageCount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Constructs a {@code JsonAdaptedApparel} with the given apparel details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public JsonAdaptedApparel(@JsonProperty(\"name\") String name, @JsonProperty(\"color\") Color color,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                              @JsonProperty(\"clothingType\") ClothingType clothingType,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                              @JsonProperty(\"status\") boolean status,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                              @JsonProperty(\"usageCount\") int usageCount) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.clothingType \u003d clothingType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.usageCount \u003d usageCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Converts a given {@code Apparel} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public JsonAdaptedApparel(Apparel source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        color \u003d source.getColor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        clothingType \u003d source.getClothingType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        status \u003d source.isAvailable();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        usageCount \u003d source.getUsageCount();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Converts this Jackson-friendly adapted apparel object into the model\u0027s {@code Apparel} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted apparel."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public Apparel toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        final List\u003cTag\u003e apparelTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            apparelTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (color \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Color.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (!ColorValue.isValidColor(color.toString())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new IllegalValueException(Color.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        final Color modelColor \u003d new Color(color.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (clothingType \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                    ClothingType.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (!ClothingTypeValue.isValidClothingType(clothingType.toString())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new IllegalValueException(ClothingType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        final ClothingType modelClothingType \u003d new ClothingType(clothingType.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        final boolean modelStatus \u003d status;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        final int modelUsageCount \u003d usageCount;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(apparelTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new Apparel(modelName, modelColor, modelClothingType, modelStatus, modelUsageCount);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 13,
      "rafflesandrison": 3,
      "-": 46,
      "ReinSheer": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "@JsonRootName(value \u003d \"apparels\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_APPAREL \u003d \"Apparels list contains duplicate apparel(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private final List\u003cJsonAdaptedApparel\u003e apparels \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given apparels."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"apparels\") List\u003cJsonAdaptedApparel\u003e apparels) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        this.apparels.addAll(apparels);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        apparels.addAll(source.getApparelList().stream().map(JsonAdaptedApparel::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (JsonAdaptedApparel jsonAdaptedApparel : apparels) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            Apparel apparel \u003d jsonAdaptedApparel.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            if (addressBook.hasApparel(apparel)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            addressBook.addApparel(apparel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 9,
      "-": 47,
      "ReinSheer": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cApparel\u003e selectedPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // Load apparel page when selected apparel changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            loadPersonPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private void loadPersonPage(Apparel apparel) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + apparel.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "ReinSheer": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * An UI component that displays information of a {@code Apparel}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public final Apparel apparel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private Label color;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private Label clothingType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private Label usageCount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private Label status; //availability"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public PersonCard(Apparel apparel, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.apparel \u003d apparel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        name.setText(apparel.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        color.setText(StringUtil.capitaliseFirstLetter(apparel.getColor().toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        clothingType.setText(StringUtil.capitaliseFirstLetter(apparel.getClothingType().toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        status.setText(apparel.getAvailabilityStatus());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        usageCount.setText(\"Times worn: \" + Integer.toString(apparel.getUsageCount()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                \u0026\u0026 apparel.equals(card.apparel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "stanleymok": 10,
      "-": 56,
      "ReinSheer": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private ListView\u003cApparel\u003e personListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public PersonListPanel(ObservableList\u003cApparel\u003e apparelList, ObservableValue\u003cApparel\u003e selectedPerson,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                           Consumer\u003cApparel\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        personListView.setItems(apparelList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            logger.fine(\"Selection in apparel list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            logger.fine(\"Selected apparel changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected apparel,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Apparel} using a {@code PersonCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cApparel\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        protected void updateItem(Apparel apparel, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            super.updateItem(apparel, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            if (empty || apparel \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                setGraphic(new PersonCard(apparel, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "ReinSheer": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "         title\u003d\"Fashion Match\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ReinSheer": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\"  GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "      \u003cLabel fx:id\u003d\"color\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$color\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "      \u003cLabel fx:id\u003d\"clothingType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$clothingType\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "\t  \u003cLabel fx:id\u003d\"usageCount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$usageCount\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 4,
      "-": 33
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  \"apparels\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\": \"Valid Pants\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\": \"Blue\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\": \"Bottom\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\": \"Apparel With Invalid Color Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\": \"948asdf2424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\": \"Bottom\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "ReinSheer": 7
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  \"apparels\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\": \"Apparel with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\": \"Blue\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\": \"Bottom\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "ReinSheer": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  \"apparels\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\": \"Uniqlo shorts\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\": \"Black\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\": \"Bottom\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\": \"Uniqlo shorts\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\": \"Black\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\": \"Bottom\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "ReinSheer": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  \"apparels\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\": \"Really Cool Pants\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\": \"Red\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\": \"invalidBottom\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "ReinSheer": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Apparel values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  \"apparels\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"A Formal Shirt\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"White\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Top\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"C Informal Shirt\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"Navy\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Top\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"B Formal Pants\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"Brown\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Bottom\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"D Formal Belt\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"Black\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Belt\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"E Casual Belt\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"White\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Belt\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"F Cool Belt\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"Navy\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Belt\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"G Formal Shoes\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"Brown\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Shoes\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"H Casual Shoes\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"Green\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Shoes\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"name\" : \"I Sneakers\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"color\" : \"Grey\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    \"clothingType\" : \"Shoes\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "ReinSheer": 37
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * Provides a handle to a apparel card in the apparel list panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    //private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    //private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    //private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    //private final Label addressLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    //private final Label phoneLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    //private final Label emailLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /*public String getAddress() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /*public String getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /*public String getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns true if this handle contains {@code apparel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public boolean equals(Apparel apparel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return getName().equals(apparel.getName().fullName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //     \u0026\u0026 getPhone().equals(apparel.getColor())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //     \u0026\u0026 getEmail().equals(apparel.getClothingType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 18,
      "-": 59,
      "ReinSheer": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cApparel\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private Optional\u003cApparel\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cApparel\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        List\u003cApparel\u003e selectedApparelList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (selectedApparelList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new AssertionError(\"Apparel list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedApparelList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        List\u003cApparel\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Navigates the listview to display {@code apparel}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void navigateToCard(Apparel apparel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        if (!getRootNode().getItems().contains(apparel)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            throw new IllegalArgumentException(\"Apparel does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            getRootNode().scrollTo(apparel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns the apparel card handle of a apparel associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private Apparel getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        List\u003cApparel\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        List\u003cApparel\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "ReinSheer": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredApparelList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandRecommendationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class CommandRecommendationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void returnZeroItemsCase() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(), \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void returnThreeItemsCase() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Blue Jeans\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLUE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Shoes\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                \"Red Shirt Color: RED ClothingType: TOP Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Blue Jeans Color: BLUE ClothingType: BOTTOM Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Black Shoes Color: BLACK ClothingType: SHOES Available: true Usage-count: 0\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void returnFourItemsCase() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Blue Jeans\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLUE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Belt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Shoes\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                \"Red Shirt Color: RED ClothingType: TOP Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Blue Jeans Color: BLUE ClothingType: BOTTOM Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Black Belt Color: BLACK ClothingType: BELT Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Black Shoes Color: BLACK ClothingType: SHOES Available: true Usage-count: 0\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void withNoShoesCase() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"White Shirt\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Red Jeans\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"White Belt\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(), \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void withNoPantsCase() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"White Shirt\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"White Shoes\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Brown Belt\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BROWN);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(), \"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void withNoShirtCase() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Pants\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Brown Belt\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BROWN);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Brown Shoes\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BROWN);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(), \"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void withBrownBeltCase() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"White Shirt\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Red Pants\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Brown Belt\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BROWN);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Brown Shoes\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BROWN);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                \"White Shirt Color: WHITE ClothingType: TOP Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Red Pants Color: RED ClothingType: BOTTOM Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Brown Belt Color: BROWN ClothingType: BELT Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Brown Shoes Color: BROWN ClothingType: SHOES Available: true Usage-count: 0\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void withOrangeBeltCase() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"White Shirt\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Red Pants\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Orange Belt\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.ORANGE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"White Shoes\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                \"White Shirt Color: WHITE ClothingType: TOP Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Red Pants Color: RED ClothingType: BOTTOM Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Orange Belt Color: ORANGE ClothingType: BELT Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"White Shoes Color: WHITE ClothingType: SHOES Available: true Usage-count: 0\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void withNoMatchingBeltCase() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"White Shirt\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Red Pants\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Orange Belt\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.ORANGE);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Grey Shoes\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.GREY);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                \"White Shirt Color: WHITE ClothingType: TOP Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Red Pants Color: RED ClothingType: BOTTOM Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                        + \"Grey Shoes Color: GREY ClothingType: SHOES Available: true Usage-count: 0\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void noMatchesCase() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Grey Shirt\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.GREY);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Red Pants\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Orange Belt\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.ORANGE);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Grey Shoes\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.GREY);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        final CommandRecommendation commandRecommendation \u003d new CommandRecommendation(model);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertEquals(commandRecommendation.returnRecommendationString(), \"\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 320
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_GREEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_NAME_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.ARMANY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + INPUT_NAME_A + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel expectedApparel \u003d new ApparelBuilder(ARMANY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.addApparel(expectedApparel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 7,
      "stanleymok": 2,
      "-": 176,
      "ReinSheer": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel validApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.addApparel(validApparel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(new AddCommand(validApparel), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validApparel), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparelInList \u003d model.getAddressBook().getApparelList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(new AddCommand(apparelInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 3,
      "-": 39,
      "ReinSheer": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel validApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validApparel).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validApparel), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(Arrays.asList(validApparel), modelStub.personsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel validApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validApparel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validApparel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel alice \u003d new ApparelBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel bob \u003d new ApparelBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different apparel -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public void addApparel(Apparel apparel) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public boolean hasApparel(Apparel apparel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public void deleteApparel(Apparel target) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        public void setPerson(Apparel target, Apparel editedApparel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public ObservableList\u003cApparel\u003e getFilteredApparelList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public void updateFilteredApparelList(Predicate\u003cApparel\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        public ReadOnlyProperty\u003cApparel\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public Apparel getSelectedApparel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        public void setSelectedPerson(Apparel apparel) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * A Model stub that contains a single apparel."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        private final Apparel apparel;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ModelStubWithPerson(Apparel apparel) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            requireNonNull(apparel);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            this.apparel \u003d apparel;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public boolean hasApparel(Apparel apparel) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            requireNonNull(apparel);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            return this.apparel.isSameApparel(apparel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * A Model stub that always accept the apparel being added."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        final ArrayList\u003cApparel\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public boolean hasApparel(Apparel apparel) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            requireNonNull(apparel);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            return personsAdded.stream().anyMatch(apparel::isSameApparel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        public void addApparel(Apparel apparel) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            requireNonNull(apparel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            personsAdded.add(apparel);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 10,
      "-": 215,
      "ReinSheer": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AvailableCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showApparelAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtilExtra.DESC_ANDY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtilExtra.DESC_BOBBY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.AvailableCommand.AvailablePersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.testutil.AvailableApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class AvailableCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_wash_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().buildAvailable();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailablePersonDescriptor descriptor \u003d new AvailableApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        String expectedMessage \u003d String.format(AvailableCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(model.getFilteredApparelList().get(0), editedApparel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(availableCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredApparelList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel lastApparel \u003d model.getFilteredApparelList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        ApparelBuilder personInList \u003d new ApparelBuilder(lastApparel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d personInList.withName(VALID_NAME_B).withColor(VALID_COLOR_BLUE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailablePersonDescriptor descriptor \u003d new AvailableApparelDescriptorBuilder().withName(VALID_NAME_B)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .withColor(VALID_COLOR_BLUE).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        String expectedMessage \u003d String.format(AvailableCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(lastApparel, editedApparel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(availableCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(INDEX_FIRST_APPAREL, new AvailablePersonDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        String expectedMessage \u003d String.format(AvailableCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(availableCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelInFilteredList \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder(apparelInFilteredList).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(INDEX_FIRST_APPAREL,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                new AvailableApparelDescriptorBuilder().withName(VALID_NAME_B).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        String expectedMessage \u003d String.format(AvailableCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(model.getFilteredApparelList().get(0), editedApparel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(availableCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel firstApparel \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailablePersonDescriptor descriptor \u003d new AvailableApparelDescriptorBuilder(firstApparel).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(INDEX_SECOND_APPAREL, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(availableCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // edit apparel in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelInList \u003d model.getAddressBook().getApparelList().get(INDEX_SECOND_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(INDEX_FIRST_APPAREL,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                new AvailableApparelDescriptorBuilder(apparelInList).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(availableCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailablePersonDescriptor descriptor \u003d new AvailableApparelDescriptorBuilder().withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(availableCommand, model, commandHistory, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getApparelList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                new AvailableApparelDescriptorBuilder().withName(VALID_NAME_B).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            availableCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            Assert.fail(\"CommandException should be thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelToEdit \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailablePersonDescriptor descriptor \u003d new AvailableApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // edit -\u003e first apparel edited"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        availableCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered apparel list to show all persons"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // redo -\u003e same first apparel edited again"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailablePersonDescriptor descriptor \u003d new AvailableApparelDescriptorBuilder().withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(availableCommand, model, commandHistory, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * 1. Edits a {@code Apparel} from a filtered list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited apparel in the"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the apparel object regardless of indexing."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailablePersonDescriptor descriptor \u003d new AvailableApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand availableCommand \u003d new AvailableCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        showApparelAtIndex(model, INDEX_SECOND_APPAREL);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelToEdit \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // edit -\u003e edits second apparel in unfiltered apparel list / first apparel in filtered apparel list"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        availableCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered apparel list to show all persons"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertNotEquals(model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased()), apparelToEdit);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // redo -\u003e edits same second apparel in unfiltered apparel list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        final AvailableCommand standardCommand \u003d new AvailableCommand(INDEX_FIRST_APPAREL, DESC_ANDY);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailablePersonDescriptor copyDescriptor \u003d new AvailablePersonDescriptor(DESC_ANDY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AvailableCommand commandWithSameValues \u003d new AvailableCommand(INDEX_FIRST_APPAREL, copyDescriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertFalse(standardCommand.equals(new AvailableCommand(INDEX_SECOND_APPAREL, DESC_ANDY)));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertFalse(standardCommand.equals(new AvailableCommand(INDEX_FIRST_APPAREL, DESC_BOBBY)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 245,
      "rafflesandrison": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLOTHING_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.EditApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String VALID_NAME_A \u003d \"Armani\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String VALID_NAME_B \u003d \"Bobohoo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String VALID_COLOR_GREEN \u003d \"Green\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String VALID_COLOR_BLUE \u003d \"Blue\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String VALID_TYPE_TOP \u003d \"Top\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String VALID_TYPE_BOTTOM \u003d \"Bottom\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String VALID_TYPE_BELT \u003d \"BELT\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String VALID_TYPE_SHOES \u003d \"SHOES\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INPUT_COLOR_BLUE \u003d \" \" + PREFIX_COLOR + VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String INPUT_COLOR_GREEN \u003d \" \" + PREFIX_COLOR + VALID_COLOR_GREEN;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INPUT_NAME_A \u003d \" \" + PREFIX_NAME + VALID_NAME_A;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INPUT_NAME_B \u003d \" \" + PREFIX_NAME + VALID_NAME_B;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INPUT_TYPE_TOP \u003d \" \" + PREFIX_CLOTHING_TYPE + VALID_TYPE_TOP;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INPUT_TYPE_BOTTOM \u003d \" \" + PREFIX_CLOTHING_TYPE + VALID_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INPUT_TYPE_BELT \u003d \" \" + PREFIX_CLOTHING_TYPE + VALID_TYPE_BELT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INPUT_TYPE_SHOES \u003d \" \" + PREFIX_CLOTHING_TYPE + VALID_TYPE_SHOES;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INVALID_INPUT_NAME \u003d \" \" + PREFIX_NAME + \"Amames\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INVALID_INPUT_COLOR \u003d \" \" + PREFIX_COLOR + \"Blue1\"; // \u00271\u0027, digits not allowed in colors"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String INVALID_INPUT_TYPE \u003d \" \" + PREFIX_CLOTHING_TYPE + \"Necklace\"; // not supported yet"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_ARMANI;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOBOHOO;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        DESC_ARMANI \u003d new EditApparelDescriptorBuilder().withName(VALID_NAME_A)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .withColor(VALID_COLOR_GREEN).withClothingType(VALID_TYPE_TOP).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        DESC_BOBOHOO \u003d new EditApparelDescriptorBuilder().withName(VALID_NAME_B)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .withColor(VALID_COLOR_BLUE).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * - the address book, filtered apparel list and selected apparel in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        List\u003cApparel\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredApparelList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel expectedSelectedApparel \u003d actualModel.getSelectedApparel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredApparelList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            assertEquals(expectedSelectedApparel, actualModel.getSelectedApparel());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the apparel at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static void showApparelAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredApparelList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparel \u003d model.getFilteredApparelList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        System.out.println(\"apparel \u003d \" + apparel.toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        final String[] splitName \u003d apparel.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (String s : splitName) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            System.out.println(\"s \u003d \" + s);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.updateFilteredApparelList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel a : model.getFilteredApparelList()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            System.out.println(a.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(1, model.getFilteredApparelList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Deletes the first apparel in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel firstApparel \u003d model.getFilteredApparelList().get(0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.deleteApparel(firstApparel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * that takes two strings that are {@code expectedMessage}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     * if one is true assert true otherwise false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public static void assertCommandSuccessTwoSoln(Command command, Model actualModel,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            CommandHistory actualCommandHistory, String expectedMessage1,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            String expectedMessage2, Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        CommandResult expectedCommandResult1 \u003d new CommandResult(expectedMessage1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        CommandResult expectedCommandResult2 \u003d new CommandResult(expectedMessage2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            if (expectedCommandResult1.equals(result) || expectedCommandResult2.equals(result)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                assert true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 41,
      "stanleymok": 1,
      "PhilipPhil": 26,
      "-": 98,
      "ReinSheer": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtilExtra.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.testutil.AvailableApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.testutil.UnavailableApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class CommandTestUtilExtra {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String VALID_NAME_A \u003d \"Armani\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String VALID_NAME_B \u003d \"Bobohoo\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String VALID_COLOR_GREEN \u003d \"Green\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String VALID_COLOR_BLUE \u003d \"Blue\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String VALID_COLOR_RED \u003d \"Red\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String VALID_COLOR_BLACK \u003d \"Black\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String VALID_TYPE_TOP \u003d \"Top\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final String VALID_TYPE_BOTTOM \u003d \"Bottom\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final AvailableCommand.AvailablePersonDescriptor DESC_ANDY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final AvailableCommand.AvailablePersonDescriptor DESC_BOBBY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final UnavailableCommand.UnavailablePersonDescriptor DESC_CONNY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static final UnavailableCommand.UnavailablePersonDescriptor DESC_DENDI;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        DESC_ANDY \u003d new AvailableApparelDescriptorBuilder().withName(VALID_NAME_A)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .withColor(VALID_COLOR_GREEN).withClothingType(VALID_TYPE_TOP).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        DESC_BOBBY \u003d new AvailableApparelDescriptorBuilder().withName(VALID_NAME_B)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .withColor(VALID_COLOR_BLUE).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        DESC_CONNY \u003d new UnavailableApparelDescriptorBuilder().withName(VALID_NAME_A)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .withColor(VALID_COLOR_RED).withClothingType(VALID_TYPE_TOP).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        DESC_DENDI \u003d new UnavailableApparelDescriptorBuilder().withName(VALID_NAME_B)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .withColor(VALID_COLOR_BLACK).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * - the address book, filtered apparel list and selected apparel in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        List\u003cApparel\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredApparelList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel expectedSelectedApparel \u003d actualModel.getSelectedApparel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredApparelList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            assertEquals(expectedSelectedApparel, actualModel.getSelectedApparel());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showApparelAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparelToDelete \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, apparelToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.deleteApparel(apparelToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparelToDelete \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, apparelToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.deleteApparel(apparelToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getApparelList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        System.out.println(\"Execute invalid test function\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel a : model.getFilteredApparelList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            System.out.println(a.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparelToDelete \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.deleteApparel(apparelToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // delete -\u003e first apparel deleted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered apparel list to show all persons"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // redo -\u003e same first apparel deleted again"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * 1. Deletes a {@code Apparel} from a filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted apparel in the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the apparel object regardless of indexing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_SECOND_APPAREL);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparelToDelete \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.deleteApparel(apparelToDelete);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // delete -\u003e deletes second apparel in unfiltered apparel list / first apparel in filtered apparel list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered apparel list to show all persons"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        System.out.println(\"apparelToDelete \u003d \" + apparelToDelete.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        System.out.println(\"filteredItem \u003d \" + model.getFilteredApparelList()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .get(INDEX_FIRST_APPAREL.getZeroBased()).toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertNotEquals(apparelToDelete, model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // redo -\u003e deletes same second apparel in unfiltered apparel list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_APPAREL);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different apparel -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.updateFilteredApparelList(p -\u003e false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(model.getFilteredApparelList().isEmpty());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 40,
      "-": 132,
      "ReinSheer": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditApparelDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ARMANI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOBOHOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.EditApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class EditApparelDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_ARMANI);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(DESC_ARMANI.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(DESC_ARMANI.equals(DESC_ARMANI));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(DESC_ARMANI.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(DESC_ARMANI.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(DESC_ARMANI.equals(DESC_BOBOHOO));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditApparelDescriptorBuilder(DESC_ARMANI).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(DESC_ARMANI.equals(editedAmy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different color -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        editedAmy \u003d new EditApparelDescriptorBuilder(DESC_ARMANI).withColor(VALID_COLOR_BLUE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(DESC_ARMANI.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different clothingType -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        editedAmy \u003d new EditApparelDescriptorBuilder(DESC_ARMANI).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(DESC_ARMANI.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* not dealing with address and tags anymore"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        editedAmy \u003d new EditApparelDescriptorBuilder(DESC_ARMANI).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(DESC_ARMANI.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        editedAmy \u003d new EditApparelDescriptorBuilder(DESC_ARMANI).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(DESC_ARMANI.equals(editedAmy));*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "stanleymok": 2,
      "-": 31,
      "ReinSheer": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ARMANI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOBOHOO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showApparelAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.EditApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.setPerson(model.getFilteredApparelList().get(0), editedApparel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredApparelList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel lastApparel \u003d model.getFilteredApparelList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ApparelBuilder personInList \u003d new ApparelBuilder(lastApparel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel editedApparel \u003d personInList.withName(VALID_NAME_B).withColor(VALID_COLOR_BLUE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().withName(VALID_NAME_B)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .withColor(VALID_COLOR_BLUE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        expectedModel.setPerson(lastApparel, editedApparel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_APPAREL, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel editedApparel \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparelInFilteredList \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder(apparelInFilteredList).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_APPAREL,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                new EditApparelDescriptorBuilder().withName(VALID_NAME_B).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.setPerson(model.getFilteredApparelList().get(0), editedApparel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel firstApparel \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder(firstApparel).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_APPAREL, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // edit apparel in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparelInList \u003d model.getAddressBook().getApparelList().get(INDEX_SECOND_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_APPAREL,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                new EditApparelDescriptorBuilder(apparelInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getApparelList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                new EditApparelDescriptorBuilder().withName(VALID_NAME_B).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparelToEdit \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        expectedModel.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // edit -\u003e first apparel edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered apparel list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // redo -\u003e same first apparel edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * 1. Edits a {@code Apparel} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited apparel in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the apparel object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_SECOND_APPAREL);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel apparelToEdit \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        expectedModel.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // edit -\u003e edits second apparel in unfiltered apparel list / first apparel in filtered apparel list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered apparel list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertNotEquals(model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased()), apparelToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // redo -\u003e edits same second apparel in unfiltered apparel list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_APPAREL, DESC_ARMANI);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_ARMANI);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_APPAREL, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_APPAREL, DESC_ARMANI)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_APPAREL, DESC_BOBOHOO)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 46,
      "stanleymok": 4,
      "-": 165,
      "ReinSheer": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_APPARELS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BELT1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BELT2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BELT3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different apparel -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_APPARELS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.updateFilteredApparelList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredApparelList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_APPARELS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Cool Belt Bro\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.updateFilteredApparelList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(Arrays.asList(BELT1, BELT2, BELT3), model.getFilteredApparelList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 9,
      "-": 71,
      "ReinSheer": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showApparelAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 5,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RandomItemCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessTwoSoln;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class RandomItemCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeEmpty() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RandomItemCommand(ClothingTypeValue.TOP), model, history,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RandomItemCommand.MESSAGE_RANDOM_NOT_FOUND, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeWithOneItem() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage \u003d RandomItemCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Red Shirt Color: RED ClothingType: TOP Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RandomItemCommand(ClothingTypeValue.TOP), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                history, successMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeWithTwoItem() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Red Belt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage \u003d RandomItemCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Red Shirt Color: RED ClothingType: TOP Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RandomItemCommand(ClothingTypeValue.TOP), model,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                history, successMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeNotFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Red Belt\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RandomItemCommand(ClothingTypeValue.BOTTOM), model, history,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RandomItemCommand.MESSAGE_RANDOM_NOT_FOUND, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeTwoSameType() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"White Shirt\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage1 \u003d RandomItemCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Red Shirt Color: RED ClothingType: TOP Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage2 \u003d RandomItemCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"White Shirt Color: WHITE ClothingType: TOP Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccessTwoSoln(new RandomItemCommand(ClothingTypeValue.TOP), model,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                history, successMessage1, successMessage2, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RecommendationCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class RecommendationCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeEmpty() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeNotEmptyNoBelt() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Blue Jeans\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLUE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Shoes\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage \u003d RecommendationCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                                + \"Red Shirt Color: RED ClothingType: TOP Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                                + \"Blue Jeans Color: BLUE ClothingType: BOTTOM Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                                + \"Black Shoes Color: BLACK ClothingType: SHOES Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history, successMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeNotEmptyWithBelt() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Blue Jeans\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLUE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Belt\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Shoes\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage \u003d RecommendationCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Red Shirt Color: RED ClothingType: TOP Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Blue Jeans Color: BLUE ClothingType: BOTTOM Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Black Belt Color: BLACK ClothingType: BELT Available: true Usage-count: 0\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Black Shoes Color: BLACK ClothingType: SHOES Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history, successMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeNoShoes() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Blue Jeans\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLUE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Belt\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeNoShirt() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Blue Jeans\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.BLUE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Belt\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Shoes\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeNoPants() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Belt\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Black Shoes\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.BLACK);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.SHOES);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new RecommendationCommand(), model, history,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                RecommendationCommand.MESSAGE_NO_RECOMMENDATION, expectedModel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showApparelAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPAREL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_APPAREL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(expectedModel, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        showApparelAtIndex(expectedModel, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getApparelList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_APPAREL);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different apparel -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * and checks that the model\u0027s selected apparel is set to the apparel at {@code index} in the filtered apparel list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.setSelectedPerson(model.getFilteredApparelList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 22,
      "stanleymok": 1,
      "-": 85,
      "ReinSheer": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SomethingColorCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccessTwoSoln;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class SomethingColorCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeEmpty() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new SomethingColorCommand(ColorValue.RED), model, history,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                SomethingColorCommand.MESSAGE_RANDOM_NOT_FOUND, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeWithOneItem() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage \u003d SomethingColorCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"Red Shirt Color: RED ClothingType: TOP Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new SomethingColorCommand(ColorValue.RED), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                history, successMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeNotFound() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"Red Shirt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"Red Belt\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.RED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BELT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccess(new SomethingColorCommand(ColorValue.BROWN), model, history,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                SomethingColorCommand.MESSAGE_RANDOM_NOT_FOUND, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void executeTwoSameType() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Name name \u003d new Name(\"White Shirt\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Color color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        ClothingType clothingType \u003d new ClothingType(ClothingTypeValue.TOP);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        name \u003d new Name(\"White Pants\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        color \u003d new Color(ColorValue.WHITE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        clothingType \u003d new ClothingType(ClothingTypeValue.BOTTOM);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        model.addApparel(apparel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        expectedModel.addApparel(apparel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage1 \u003d SomethingColorCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"White Shirt Color: WHITE ClothingType: TOP Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        String successMessage2 \u003d SomethingColorCommand.MESSAGE_MESSAGE_SUCCESS + \"\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                + \"White Pants Color: WHITE ClothingType: BOTTOM Available: true Usage-count: 0\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertCommandSuccessTwoSoln(new SomethingColorCommand(ColorValue.WHITE), model,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                history, successMessage1, successMessage2, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBookSortedByColor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBookSortedByName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBookSortedByNameCaseInsensitive;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBookSortedByType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBookWithLowerCaseName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.logic.options.SortOption;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    // Setup"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void execute_seeSortOptions_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Model expectedModelSortedByType \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SortCommand sc \u003d new SortCommand(SortOption.OPTIONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d SortOption.allOptions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandSuccess(sc, model, commandHistory, expectedMessage, expectedModelSortedByType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void execute_sortedName_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Model expectedModelSortedByName \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModelSortedByName.setAddressBook(getTypicalAddressBookSortedByName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModelSortedByName.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SortCommand sc \u003d new SortCommand(SortOption.NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SORT_APPAREL_SUCCESS + \" by name.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandSuccess(sc, model, commandHistory, expectedMessage, expectedModelSortedByName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void execute_sortedNameCaseInsensitive_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Model modelLowerCase \u003d new ModelManager(getTypicalAddressBookWithLowerCaseName(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Model expectedModel \u003d new ModelManager(modelLowerCase.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.setAddressBook(getTypicalAddressBookSortedByNameCaseInsensitive());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SortCommand sc \u003d new SortCommand(SortOption.NAME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SORT_APPAREL_SUCCESS + \" by name.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandSuccess(sc, modelLowerCase, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void execute_sortedColor_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Model expectedModelSortedByColor \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModelSortedByColor.setAddressBook(getTypicalAddressBookSortedByColor());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModelSortedByColor.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SortCommand sc \u003d new SortCommand(SortOption.COLOR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SORT_APPAREL_SUCCESS + \" by color.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandSuccess(sc, model, commandHistory, expectedMessage, expectedModelSortedByColor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public void execute_sortedType_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Model expectedModelSortedByType \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModelSortedByType.setAddressBook(getTypicalAddressBookSortedByType());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModelSortedByType.commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        SortCommand sc \u003d new SortCommand(SortOption.TYPE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String expectedMessage \u003d SortCommand.MESSAGE_SORT_APPAREL_SUCCESS + \" by type.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandSuccess(sc, model, commandHistory, expectedMessage, expectedModelSortedByType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnavailableCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showApparelAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtilExtra.DESC_CONNY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtilExtra.DESC_DENDI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.UnavailableCommand.UnavailablePersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.testutil.UnavailableApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class UnavailableCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_dirty_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().buildUnavailable();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        editedApparel.use();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor descriptor \u003d new UnavailableApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        String expectedMessage \u003d String.format(UnavailableCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(model.getFilteredApparelList().get(0), editedApparel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(unavailableCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredApparelList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel lastApparel \u003d model.getFilteredApparelList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        ApparelBuilder personInList \u003d new ApparelBuilder(lastApparel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d personInList.withName(VALID_NAME_B).withColor(VALID_COLOR_BLUE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        editedApparel.use();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        editedApparel.dirty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor descriptor \u003d new UnavailableApparelDescriptorBuilder().withName(VALID_NAME_B)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .withColor(VALID_COLOR_BLUE).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        String expectedMessage \u003d String.format(UnavailableCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(lastApparel, editedApparel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(unavailableCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelInFilteredList \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder(apparelInFilteredList).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        editedApparel.use();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        editedApparel.dirty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(INDEX_FIRST_APPAREL,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                new UnavailableApparelDescriptorBuilder().withName(VALID_NAME_B).build());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        String expectedMessage \u003d String.format(UnavailableCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(model.getFilteredApparelList().get(0), editedApparel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(unavailableCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel firstApparel \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor descriptor \u003d new UnavailableApparelDescriptorBuilder(firstApparel).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(INDEX_SECOND_APPAREL, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(unavailableCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // edit apparel in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelInList \u003d model.getAddressBook().getApparelList().get(INDEX_SECOND_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(INDEX_FIRST_APPAREL,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                new UnavailableApparelDescriptorBuilder(apparelInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(unavailableCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor descriptor \u003d new"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                UnavailableApparelDescriptorBuilder().withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(unavailableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        showApparelAtIndex(model, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getApparelList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                                new UnavailableApparelDescriptorBuilder().withName(VALID_NAME_B).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(unavailableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                                Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelToEdit \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor descriptor \u003d new UnavailableApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // edit -\u003e first apparel edited"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        unavailableCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered apparel list to show all persons"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // redo -\u003e same first apparel edited again"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredApparelList().size() + 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor descriptor \u003d new UnavailableApparelDescriptorBuilder()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                .withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(unavailableCommand, model, commandHistory,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * 1. Edits a {@code Apparel} from a filtered list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited apparel in the"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the apparel object regardless of indexing."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor descriptor \u003d new UnavailableApparelDescriptorBuilder(editedApparel).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand unavailableCommand \u003d new UnavailableCommand(INDEX_FIRST_APPAREL, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        showApparelAtIndex(model, INDEX_SECOND_APPAREL);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        Apparel apparelToEdit \u003d model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.setPerson(apparelToEdit, editedApparel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // edit -\u003e edits second apparel in unfiltered apparel list / first apparel in filtered apparel list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        unavailableCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered apparel list to show all persons"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertNotEquals(model.getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased()), apparelToEdit);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // redo -\u003e edits same second apparel in unfiltered apparel list"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        final UnavailableCommand standardCommand \u003d new UnavailableCommand(INDEX_FIRST_APPAREL, DESC_CONNY);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailablePersonDescriptor copyDescriptor \u003d new UnavailablePersonDescriptor(DESC_CONNY);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        UnavailableCommand commandWithSameValues \u003d new UnavailableCommand(INDEX_FIRST_APPAREL, copyDescriptor);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertFalse(standardCommand.equals(new UnavailableCommand(INDEX_SECOND_APPAREL, DESC_CONNY)));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertFalse(standardCommand.equals(new UnavailableCommand(INDEX_FIRST_APPAREL, DESC_DENDI)));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 244
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_BLUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_GREEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_NAME_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_NAME_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_COLOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.ARMANY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BOBYIN;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel expectedApparel \u003d new ApparelBuilder(BOBYIN).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INPUT_NAME_B + INPUT_COLOR_BLUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_TYPE_BOTTOM, new AddCommand(expectedApparel));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseSuccess(parser, INPUT_NAME_A + INPUT_NAME_B + INPUT_COLOR_BLUE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_TYPE_BOTTOM, new AddCommand(expectedApparel));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseSuccess(parser, INPUT_NAME_B + INPUT_COLOR_GREEN + INPUT_COLOR_BLUE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_TYPE_BOTTOM, new AddCommand(expectedApparel));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseSuccess(parser, INPUT_NAME_B + INPUT_COLOR_BLUE + INPUT_TYPE_TOP"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_TYPE_BOTTOM, new AddCommand(expectedApparel));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel expectedApparel \u003d new ApparelBuilder(ARMANY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseSuccess(parser, INPUT_NAME_A + INPUT_COLOR_GREEN + INPUT_TYPE_TOP,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                new AddCommand(expectedApparel));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_B + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, INPUT_NAME_B + VALID_COLOR_BLUE + INPUT_TYPE_BOTTOM,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, INPUT_NAME_B + INPUT_COLOR_BLUE + VALID_TYPE_BOTTOM,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_B + VALID_COLOR_BLUE + VALID_TYPE_BOTTOM,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_NAME + INPUT_COLOR_BLUE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_TYPE_BOTTOM, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, INPUT_NAME_B + INVALID_INPUT_COLOR"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_TYPE_BOTTOM, Color.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, INPUT_NAME_B + INPUT_COLOR_BLUE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INVALID_INPUT_TYPE, ClothingType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_NAME + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + INPUT_NAME_B + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 9,
      "rafflesandrison": 28,
      "-": 65,
      "ReinSheer": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.EditApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ApparelUtil.getAddCommand(apparel));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(new AddCommand(apparel), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_APPAREL), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder(apparel).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INDEX_FIRST_APPAREL.getOneBased() + \" \" + ApparelUtil.getEditApparelDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_APPAREL, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_APPAREL), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 7,
      "-": 126,
      "ReinSheer": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_APPAREL));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_BLUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_GREEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_NAME_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_COLOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_GREEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_A;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_TOP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPAREL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.EditApparelDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, \"-5\" + INPUT_NAME_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, \"0\" + INPUT_NAME_A, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INPUT_NAME, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INPUT_COLOR, Color.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INPUT_TYPE, ClothingType.MESSAGE_CONSTRAINTS); //invalid email"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INPUT_COLOR + INPUT_TYPE_TOP, Color.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, \"1\" + INPUT_COLOR_BLUE + INVALID_INPUT_COLOR, Color.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INPUT_NAME + INVALID_INPUT_TYPE + VALID_COLOR_GREEN,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INPUT_COLOR_BLUE + INPUT_TYPE_TOP + INPUT_NAME_A;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().withName(VALID_NAME_A)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .withColor(VALID_COLOR_BLUE).withClothingType(VALID_TYPE_TOP).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INPUT_COLOR_BLUE + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().withColor(VALID_COLOR_BLUE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .withClothingType(VALID_TYPE_TOP).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_APPAREL;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INPUT_NAME_A;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().withName(VALID_NAME_A).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INPUT_COLOR_GREEN;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        descriptor \u003d new EditApparelDescriptorBuilder().withColor(VALID_COLOR_GREEN).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        descriptor \u003d new EditApparelDescriptorBuilder().withClothingType(VALID_TYPE_TOP).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INPUT_COLOR_GREEN + INPUT_TYPE_TOP"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_COLOR_GREEN + INPUT_TYPE_TOP + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().withColor(VALID_COLOR_BLUE)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_INPUT_COLOR + INPUT_COLOR_BLUE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().withColor(VALID_COLOR_BLUE).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INPUT_TYPE_BOTTOM + INVALID_INPUT_COLOR + INPUT_COLOR_BLUE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        descriptor \u003d new EditApparelDescriptorBuilder().withColor(VALID_COLOR_BLUE).withClothingType(VALID_TYPE_BOTTOM)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /*@Test not dealing with tags anymore."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_APPAREL;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditApparelDescriptorBuilder().build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 9,
      "rafflesandrison": 42,
      "-": 114,
      "ReinSheer": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ReinSheer": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Stripey Shirt!!!!!!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String INVALID_COLOR \u003d \"Blackkkkk\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String INVALID_CLOTHING_TYPE \u003d \"Bottoms but not really bottoms\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    //private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String VALID_NAME \u003d \"Stripey Shirt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String VALID_COLOR \u003d \"Black\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String VALID_CLOTHING_TYPE \u003d \"Bottom\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    //private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    //private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(INDEX_FIRST_APPAREL, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(INDEX_FIRST_APPAREL, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void parseColor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseColor((String) null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void parseColor_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseColor(INVALID_COLOR));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void parseColor_validValueWithoutWhitespace_returnsColor() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Color expectedColor \u003d new Color(VALID_COLOR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedColor, ParserUtil.parseColor(VALID_COLOR));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void parseColor_validValueWithWhitespace_returnsTrimmedColor() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_COLOR + WHITESPACE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Color expectedColor \u003d new Color(VALID_COLOR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedColor, ParserUtil.parseColor(phoneWithWhitespace));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void parseClothingType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseClothingType((String) null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void parseClothingType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseClothingType(INVALID_CLOTHING_TYPE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void parseClothingType_validValueWithoutWhitespace_returnsClothingType() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ClothingType expectedClothingType \u003d new ClothingType(VALID_CLOTHING_TYPE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedClothingType, ParserUtil.parseClothingType(VALID_CLOTHING_TYPE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void parseClothingType_validValueWithWhitespace_returnsTrimmedClothingType() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_CLOTHING_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ClothingType expectedClothingType \u003d new ClothingType(VALID_CLOTHING_TYPE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedClothingType, ParserUtil.parseClothingType(emailWithWhitespace));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /*@Test not dealing with tags anymore"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 3,
      "-": 136,
      "ReinSheer": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RandomItemParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.commands.RandomItemCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ClothingTypeValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class RandomItemParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private RandomItemParser parser \u003d new RandomItemParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void parse_validArgs_returnsRandomItemeCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertParseSuccess(parser, \"TOP\", new RandomItemCommand(ClothingTypeValue.TOP));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RandomItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_APPAREL));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SomethingColorParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.logic.commands.SomethingColorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "import seedu.address.model.apparel.ColorValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "// @@author PhilipPhil"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "public class SomethingColorParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    private SomethingColorParser parser \u003d new SomethingColorParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void parse_validArgs_returnsRandomItemeCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertParseSuccess(parser, \"RED\", new SomethingColorCommand(ColorValue.RED));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SomethingColorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PhilipPhil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "PhilipPhil": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.exceptions.DuplicateApparelException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getApparelList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // Two apparels with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel editedAlice \u003d new ApparelBuilder(SHIRT1).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        List\u003cApparel\u003e newApparels \u003d Arrays.asList(SHIRT1, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newApparels);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        thrown.expect(DuplicateApparelException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        addressBook.hasApparel(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(addressBook.hasApparel(SHIRT1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        addressBook.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(addressBook.hasApparel(SHIRT1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        addressBook.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel editedAlice \u003d new ApparelBuilder(SHIRT1).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(addressBook.hasApparel(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        addressBook.getApparelList().remove(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        addressBook.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        addressBook.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * A stub ReadOnlyAddressBook whose apparels list can violate interface constraints."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        private final ObservableList\u003cApparel\u003e apparels \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        AddressBookStub(Collection\u003cApparel\u003e apparels) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            this.apparels.setAll(apparels);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        public ObservableList\u003cApparel\u003e getApparelList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            return apparels;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 110,
      "ReinSheer": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPARELS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BOBYIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.PANTS1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.exceptions.ApparelNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(null, modelManager.getSelectedApparel());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.hasApparel(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertFalse(modelManager.hasApparel(SHIRT1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(modelManager.hasApparel(SHIRT1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        modelManager.setSelectedPerson(SHIRT1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.deleteApparel(SHIRT1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(null, modelManager.getSelectedApparel());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.addApparel(BOBYIN);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(Arrays.asList(SHIRT1, BOBYIN), modelManager.getFilteredApparelList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.setSelectedPerson(BOBYIN);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.deleteApparel(BOBYIN);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(SHIRT1, modelManager.getSelectedApparel());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        modelManager.setSelectedPerson(SHIRT1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel updatedAlice \u003d new ApparelBuilder(SHIRT1).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        modelManager.setPerson(SHIRT1, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedApparel());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.getFilteredApparelList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        thrown.expect(ApparelNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        modelManager.setSelectedPerson(SHIRT1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.addApparel(SHIRT1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(Collections.singletonList(SHIRT1), modelManager.getFilteredApparelList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        modelManager.setSelectedPerson(SHIRT1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(SHIRT1, modelManager.getSelectedApparel());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(SHIRT1).withPerson(PANTS1).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String[] keywords \u003d BOBYIN.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.updateFilteredApparelList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        modelManager.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 28,
      "-": 148,
      "ReinSheer": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.ARMANY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BOBYIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(ARMANY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOBYIN).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(SHIRT2).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 5,
      "-": 292,
      "ReinSheer": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/apparel/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReinSheer": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/apparel/ApparelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BOBYIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.NAME_INFORMAL_SHIRT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class ApparelTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // TODO: modify the apparel content to trigger the exception here"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        System.out.println(SHIRT1.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(SHIRT1.isSameApparel(SHIRT1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // different shirt -\u003e return false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertFalse(SHIRT1.isSameApparel(SHIRT2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(SHIRT1.isSameApparel(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // different color and clothing type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel editedAlice \u003d new ApparelBuilder(SHIRT1).withColor(VALID_COLOR_BLUE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(SHIRT1.isSameApparel(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        editedAlice \u003d new ApparelBuilder(SHIRT1).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(SHIRT1.isSameApparel(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // same name, same color, different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        editedAlice \u003d new ApparelBuilder(SHIRT1).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertFalse(SHIRT1.isSameApparel(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // same name, different color, same type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        editedAlice \u003d new ApparelBuilder(SHIRT1).withColor(VALID_COLOR_BLUE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertFalse(SHIRT1.isSameApparel(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // different name, same color, same type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        editedAlice \u003d new ApparelBuilder(SHIRT1).withName(NAME_INFORMAL_SHIRT).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertFalse(SHIRT1.isSameApparel(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel aliceCopy \u003d new ApparelBuilder(SHIRT1).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(SHIRT1.equals(aliceCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(SHIRT1.equals(SHIRT1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(SHIRT1.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(SHIRT1.equals(5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different apparel -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertFalse(SHIRT1.equals(BOBYIN));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel editedAlice \u003d new ApparelBuilder(SHIRT1).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(SHIRT1.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // different color -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        editedAlice \u003d new ApparelBuilder(SHIRT1).withColor(VALID_COLOR_BLUE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(SHIRT1.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        editedAlice \u003d new ApparelBuilder(SHIRT1).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(SHIRT1.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // same apparel -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        editedAlice \u003d new ApparelBuilder(SHIRT1).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(SHIRT1.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 33,
      "ReinSheer": 24,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/apparel/ClothingTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class ClothingTypeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ClothingType(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void isValidClothingType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // empty clothingType"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(ClothingTypeValue.isValidClothingType(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // invalid clothingType"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertFalse(ClothingTypeValue.isValidClothingType(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(ClothingTypeValue.isValidClothingType(\"19838\")); // numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(ClothingTypeValue.isValidClothingType(\"189a81\")); // alphabets within digits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertFalse(ClothingTypeValue.isValidClothingType(\"TOP \")); // additional space not accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // valid clothingType"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        // case insensitive"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(ClothingTypeValue.isValidClothingType(\"TOP\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(ClothingTypeValue.isValidClothingType(\"tOP\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(ClothingTypeValue.isValidClothingType(\"BOTTOM\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(ClothingTypeValue.isValidClothingType(\"bOttoM\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(ClothingTypeValue.isValidClothingType(\"BELT\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(ClothingTypeValue.isValidClothingType(\"beLt\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(ClothingTypeValue.isValidClothingType(\"SHOES\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(ClothingTypeValue.isValidClothingType(\"shOEs\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 19,
      "ReinSheer": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/apparel/ColorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class ColorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void constructor_invalidColor_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Color(invalidPhone));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void isValidColor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // invalid color"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(ColorValue.isValidColor(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(ColorValue.isValidColor(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(ColorValue.isValidColor(\"911234\")); // numbers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(ColorValue.isValidColor(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(ColorValue.isValidColor(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // valid color"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(ColorValue.isValidColor(\"White\")); // normal text"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReinSheer": 14,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/apparel/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different apparel -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(predicate.test(new ApparelBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(predicate.test(new ApparelBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(predicate.test(new ApparelBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(predicate.test(new ApparelBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(predicate.test(new ApparelBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(predicate.test(new ApparelBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        predicate.test(new ApparelBuilder().withName(\"Alice\").withColor(\"12345\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .withClothingType(\"alice@email.com\").build());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 9,
      "ReinSheer": 9,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/apparel/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReinSheer": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/apparel/UniqueApparelListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.model.apparel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BOBYIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.exceptions.ApparelNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.exceptions.DuplicateApparelException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class UniqueApparelListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final UniqueApparelList uniqueApparelList \u003d new UniqueApparelList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.contains(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(uniqueApparelList.contains(SHIRT1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(uniqueApparelList.contains(SHIRT1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel editedAlice \u003d new ApparelBuilder(SHIRT1).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(uniqueApparelList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        thrown.expect(DuplicateApparelException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparel(null, SHIRT1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparel(SHIRT1, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        thrown.expect(ApparelNotFoundException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparel(SHIRT1, SHIRT1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparel(SHIRT1, SHIRT1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        UniqueApparelList expectedUniqueApparelList \u003d new UniqueApparelList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        expectedUniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedUniqueApparelList, uniqueApparelList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel editedAlice \u003d new ApparelBuilder(SHIRT1).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparel(SHIRT1, editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        UniqueApparelList expectedUniqueApparelList \u003d new UniqueApparelList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        expectedUniqueApparelList.add(editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedUniqueApparelList, uniqueApparelList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        uniqueApparelList.setApparel(SHIRT1, BOBYIN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        UniqueApparelList expectedUniqueApparelList \u003d new UniqueApparelList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedUniqueApparelList.add(BOBYIN);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedUniqueApparelList, uniqueApparelList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        uniqueApparelList.add(BOBYIN);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        thrown.expect(DuplicateApparelException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        uniqueApparelList.setApparel(SHIRT1, BOBYIN);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.remove(null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        thrown.expect(ApparelNotFoundException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.remove(SHIRT1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.remove(SHIRT1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        UniqueApparelList expectedUniqueApparelList \u003d new UniqueApparelList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedUniqueApparelList, uniqueApparelList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparels((UniqueApparelList) null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        UniqueApparelList expectedUniqueApparelList \u003d new UniqueApparelList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedUniqueApparelList.add(BOBYIN);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparels(expectedUniqueApparelList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedUniqueApparelList, uniqueApparelList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparels((List\u003cApparel\u003e) null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.add(SHIRT1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        List\u003cApparel\u003e apparelList \u003d Collections.singletonList(BOBYIN);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparels(apparelList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        UniqueApparelList expectedUniqueApparelList \u003d new UniqueApparelList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedUniqueApparelList.add(BOBYIN);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedUniqueApparelList, uniqueApparelList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        List\u003cApparel\u003e listWithDuplicateApparels \u003d Arrays.asList(SHIRT1, SHIRT1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        thrown.expect(DuplicateApparelException.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.setApparels(listWithDuplicateApparels);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        uniqueApparelList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 9,
      "ReinSheer": 58,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedApparelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.storage.JsonAdaptedApparel.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.PANTS1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class JsonAdaptedApparelTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Formal Belt!!!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final String VALID_NAME \u003d PANTS1.getName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final Color VALID_COLOR \u003d PANTS1.getColor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final ClothingType VALID_CLOTHING_TYPE \u003d PANTS1.getClothingType();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void toModelType_validApparelDetails_returnsApparel() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        JsonAdaptedApparel apparel \u003d new JsonAdaptedApparel(PANTS1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        assertEquals(PANTS1, apparel.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        JsonAdaptedApparel person \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                new JsonAdaptedApparel(INVALID_NAME, VALID_COLOR, VALID_CLOTHING_TYPE, true, 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        JsonAdaptedApparel person \u003d new JsonAdaptedApparel(null, VALID_COLOR, VALID_CLOTHING_TYPE, true, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void toModelType_nullColor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        JsonAdaptedApparel person \u003d new JsonAdaptedApparel(VALID_NAME, null, VALID_CLOTHING_TYPE, true, 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Color.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public void toModelType_nullClothingType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        JsonAdaptedApparel person \u003d new JsonAdaptedApparel(VALID_NAME, VALID_COLOR, null, true, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ClothingType.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "stanleymok": 6,
      "-": 38,
      "ReinSheer": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.ARMANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BOBYIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"notJsonFormatAddressBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        original.addApparel(ARMANY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        original.removeApparel(SHIRT1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        original.addApparel(BOBYIN);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 117,
      "ReinSheer": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "/*import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.TypicalApparels;*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /* To fix:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalApparels.getTypicalAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        thrown.expectMessage(JsonSerializableAddressBook.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 2,
      "-": 46,
      "ReinSheer": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Adds a new {@code Apparel} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public AddressBookBuilder withPerson(Apparel apparel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        addressBook.addApparel(apparel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ReinSheer": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ApparelBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * A utility class to help with building Apparel objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class ApparelBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Sleek Shirt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String DEFAULT_COLOR \u003d \"White\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String DEFAULT_CLOTHING_TYPE \u003d \"Top\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private Color color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private ClothingType clothingType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ApparelBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        color \u003d new Color(DEFAULT_COLOR);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        clothingType \u003d new ClothingType(DEFAULT_CLOTHING_TYPE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Initializes the ApparelBuilder with the data of {@code apparelToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ApparelBuilder(Apparel apparelToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        name \u003d apparelToCopy.getName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        color \u003d apparelToCopy.getColor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        clothingType \u003d apparelToCopy.getClothingType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Sets the {@code Name} of the {@code Apparel} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ApparelBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Sets the {@code Color} of the {@code Apparel} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ApparelBuilder withColor(String color) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.color \u003d new Color(color);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Sets the {@code ClothingType} of the {@code Apparel} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public ApparelBuilder withClothingType(String clothingType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        this.clothingType \u003d new ClothingType(clothingType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public Apparel build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public Apparel buildAvailable() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new Apparel(name, color, clothingType, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public Apparel buildUnavailable() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return new Apparel(name, color, clothingType, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 8,
      "ReinSheer": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ApparelUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLOTHING_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " * A utility class for Apparel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class ApparelUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns an add command string for adding the {@code apparel}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static String getAddCommand(Apparel apparel) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getApparelDetails(apparel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns the part of command string for the given {@code apparel}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static String getApparelDetails(Apparel apparel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        sb.append(PREFIX_NAME + apparel.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        sb.append(PREFIX_COLOR + apparel.getColor().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        sb.append(PREFIX_CLOTHING_TYPE + apparel.getClothingType().toString() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Returns the part of command string for the given {@code AvailablePersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static String getEditApparelDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        descriptor.getColor().ifPresent(color -\u003e sb.append(PREFIX_COLOR).append(color.toString()).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        descriptor.getClothingType().ifPresent(clothingType -\u003e sb.append(PREFIX_CLOTHING_TYPE).append("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                clothingType.toString()).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 1,
      "ReinSheer": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AvailableApparelDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.AvailableCommand.AvailablePersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * A utility class to help with building AvailablePersonDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class AvailableApparelDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private AvailablePersonDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailableApparelDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor \u003d new AvailablePersonDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailableApparelDescriptorBuilder(AvailablePersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.descriptor \u003d new AvailablePersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Returns an {@code AvailablePersonDescriptor} with fields containing {@code apparel}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailableApparelDescriptorBuilder(Apparel apparel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor \u003d new AvailablePersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setName(apparel.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setColor(apparel.getColor());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setClothingType(apparel.getClothingType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code Name} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailableApparelDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code Color} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailableApparelDescriptorBuilder withColor(String color) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setColor(new Color(color));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code ClothingType} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailableApparelDescriptorBuilder withClothingType(String clothingType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setClothingType(new ClothingType(clothingType));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public AvailablePersonDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditApparelDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * A utility class to help with building AvailablePersonDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class EditApparelDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public EditApparelDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public EditApparelDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Returns an {@code AvailablePersonDescriptor} with fields containing {@code apparel}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public EditApparelDescriptorBuilder(Apparel apparel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        descriptor.setName(apparel.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        descriptor.setColor(apparel.getColor());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        descriptor.setClothingType(apparel.getClothingType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code Name} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public EditApparelDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code Color} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public EditApparelDescriptorBuilder withColor(String color) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        descriptor.setColor(new Color(color));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code ClothingType} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public EditApparelDescriptorBuilder withClothingType(String clothingType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        descriptor.setClothingType(new ClothingType(clothingType));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 5,
      "-": 40,
      "ReinSheer": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns the middle index of the apparel in the {@code model}\u0027s apparel list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return Index.fromOneBased(model.getFilteredApparelList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns the last index of the apparel in the {@code model}\u0027s apparel list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return Index.fromOneBased(model.getFilteredApparelList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns the apparel in the {@code model}\u0027s apparel list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static Apparel getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return model.getFilteredApparelList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 3,
      "-": 47,
      "ReinSheer": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalApparels.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_GREEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_TOP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " * A utility class containing a list of {@code Apparel} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "public class TypicalApparels {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_FORMAL_SHIRT \u003d \"A Formal Shirt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_FORMAL_PANTS \u003d \"B Formal Pants\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_INFORMAL_SHIRT \u003d \"C Informal Shirt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_FORMAL_BELT \u003d \"D Formal Belt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_CASUAL_BELT \u003d \"E Casual Belt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_COOL_BELT \u003d \"F Cool Belt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_FORMAL_SHOES \u003d \"G Formal Shoes\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_CASUAL_SHOES \u003d \"H Casual Shoes\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_SNEAKERS \u003d \"I Sneakers\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String NAME_FORMAL_SHIRT_LOWER \u003d \"aa formal shirt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String TYPE_TOP \u003d \"Top\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String TYPE_BOTTOM \u003d \"Bottom\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String TYPE_BELT \u003d \"Belt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String TYPE_SHOES \u003d \"Shoes\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String COLOR_WHITE \u003d \"White\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String COLOR_BLACK \u003d \"Black\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String COLOR_NAVY \u003d \"Navy\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String COLOR_BROWN \u003d \"Brown\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String COLOR_GREEN \u003d \"Green\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final String COLOR_GREY \u003d \"Grey\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel SHIRT1 \u003d new ApparelBuilder().withName(NAME_FORMAL_SHIRT)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_WHITE).withClothingType(TYPE_TOP).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel SHIRT2 \u003d new ApparelBuilder().withName(NAME_INFORMAL_SHIRT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_NAVY).withClothingType(TYPE_TOP).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel PANTS1 \u003d new ApparelBuilder().withName(NAME_FORMAL_PANTS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_BROWN).withClothingType(TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel BELT1 \u003d new ApparelBuilder().withName(NAME_FORMAL_BELT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_BLACK).withClothingType(TYPE_BELT).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel BELT2 \u003d new ApparelBuilder().withName(NAME_CASUAL_BELT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_WHITE).withClothingType(TYPE_BELT).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final Apparel BELT3 \u003d new ApparelBuilder().withName(NAME_COOL_BELT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_NAVY).withClothingType(TYPE_BELT).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel SHOES1 \u003d new ApparelBuilder().withName(NAME_FORMAL_SHOES)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_BROWN).withClothingType(TYPE_SHOES).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel SHOES2 \u003d new ApparelBuilder().withName(NAME_CASUAL_SHOES)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_GREEN).withClothingType(TYPE_SHOES).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel SHOES3 \u003d new ApparelBuilder().withName(NAME_SNEAKERS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_GREY).withClothingType(TYPE_SHOES).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel SHIRT1_LOWER \u003d new ApparelBuilder().withName(NAME_FORMAL_SHIRT_LOWER)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(COLOR_WHITE).withClothingType(TYPE_TOP).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    // Manually added - Apparel\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel ARMANY \u003d new ApparelBuilder().withName(VALID_NAME_A)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(VALID_COLOR_GREEN).withClothingType(VALID_TYPE_TOP).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Apparel BOBYIN \u003d new ApparelBuilder().withName(VALID_NAME_B)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            .withColor(VALID_COLOR_BLUE).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static final String KEYWORD_MATCHING_BELT \u003d \"Belt\"; // A keyword that matches Belt"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    private TypicalApparels() {} // prevents instantiation"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel apparel : getTypicalApparels()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            ab.addApparel(apparel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static AddressBook getTypicalAddressBookWithLowerCaseName() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel apparel : getTypicalApparelsWithLowerCaseName()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            ab.addApparel(apparel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons sorted by name."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static AddressBook getTypicalAddressBookSortedByName() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel apparel : getTypicalApparelsSortedByName()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            ab.addApparel(apparel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons sorted by name."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static AddressBook getTypicalAddressBookSortedByNameCaseInsensitive() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel apparel : getTypicalApparelsSortedByNameCaseInsensitive()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            ab.addApparel(apparel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons sorted by color."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static AddressBook getTypicalAddressBookSortedByColor() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel apparel : getTypicalApparelsSortedByColor()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            ab.addApparel(apparel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons sorted by color."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static AddressBook getTypicalAddressBookSortedByType() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        for (Apparel apparel : getTypicalApparelsSortedByType()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            ab.addApparel(apparel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static List\u003cApparel\u003e getTypicalApparels() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHIRT1, SHIRT2, PANTS1, BELT1, BELT2, BELT3, SHOES1, SHOES2, SHOES3));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static List\u003cApparel\u003e getTypicalApparelsWithLowerCaseName() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHIRT1_LOWER, SHIRT1, SHIRT2, PANTS1,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                BELT1, BELT2, BELT3, SHOES1, SHOES2, SHOES3));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static List\u003cApparel\u003e getTypicalApparelsSortedByName() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHIRT1, PANTS1, SHIRT2, BELT1, BELT2, BELT3, SHOES1, SHOES2, SHOES3));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static List\u003cApparel\u003e getTypicalApparelsSortedByNameCaseInsensitive() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SHIRT1, SHIRT1_LOWER, PANTS1, SHIRT2,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                BELT1, BELT2, BELT3, SHOES1, SHOES2, SHOES3));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static List\u003cApparel\u003e getTypicalApparelsSortedByColor() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BELT1, PANTS1, SHOES1, SHOES2, SHOES3, SHIRT2, BELT3, SHIRT1, BELT2));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static List\u003cApparel\u003e getTypicalApparelsSortedByType() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BELT1, BELT2, BELT3, PANTS1, SHOES1, SHOES2, SHOES3, SHIRT1, SHIRT2));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 171,
      "ReinSheer": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Index INDEX_FIRST_APPAREL \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Index INDEX_SECOND_APPAREL \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "    public static final Index INDEX_THIRD_APPAREL \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UnavailableApparelDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.logic.commands.UnavailableCommand.UnavailablePersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " * A utility class to help with building AvailablePersonDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "public class UnavailableApparelDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    private UnavailablePersonDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailableApparelDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor \u003d new UnavailablePersonDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailableApparelDescriptorBuilder(UnavailablePersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        this.descriptor \u003d new UnavailablePersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Returns an {@code AvailablePersonDescriptor} with fields containing {@code apparel}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailableApparelDescriptorBuilder(Apparel apparel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor \u003d new UnavailablePersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setName(apparel.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setColor(apparel.getColor());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setClothingType(apparel.getClothingType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code Name} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailableApparelDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code Color} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailableApparelDescriptorBuilder withColor(String color) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setColor(new Color(color));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     * Sets the {@code ClothingType} of the {@code AvailablePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailableApparelDescriptorBuilder withClothingType(String clothingType) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        descriptor.setClothingType(new ClothingType(clothingType));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stanleymok"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    public UnavailablePersonDescriptor build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ApparelCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class ApparelCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparelWithNoTags \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(apparelWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCardDisplay(personCard, apparelWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparelWithTags \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        personCard \u003d new PersonCard(apparelWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCardDisplay(personCard, apparelWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparel \u003d new ApparelBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(apparel, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // same apparel, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        PersonCard copy \u003d new PersonCard(apparel, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // different apparel, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel differentApparel \u003d new ApparelBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentApparel, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // same apparel, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(apparel, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedApparel} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Apparel expectedApparel, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // verify apparel details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCardDisplaysPerson(expectedApparel, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "ReinSheer": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ApparelListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.getTypicalApparels;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "public class ApparelListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final ObservableList\u003cApparel\u003e TYPICAL_APPARELS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "            FXCollections.observableList(getTypicalApparels());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private final SimpleObjectProperty\u003cApparel\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        initUi(TYPICAL_APPARELS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_APPARELS.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_APPARELS.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            Apparel expectedApparel \u003d TYPICAL_APPARELS.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            assertCardDisplaysPerson(expectedApparel, actualCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            String x \u003d actualCard.getId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        initUi(TYPICAL_APPARELS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel secondApparel \u003d TYPICAL_APPARELS.get(INDEX_SECOND_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondApparel));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                .getPersonCardHandle(INDEX_SECOND_APPAREL.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ObservableList\u003cApparel\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        }, \"Creation and deletion of apparel cards exceeded time limit\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private ObservableList\u003cApparel\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ObservableList\u003cApparel\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            Color color \u003d new Color(\"BLUE\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "            ClothingType clothingType \u003d new ClothingType(\"TOP\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d new Address(\"a\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            Apparel apparel \u003d new Apparel(name, color, clothingType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            backingList.add(apparel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private void initUi(ObservableList\u003cApparel\u003e backingList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 8,
      "stanleymok": 2,
      "-": 73,
      "ReinSheer": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private SimpleObjectProperty\u003cApparel\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPerson));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // associated web page of a apparel"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(SHIRT1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                + SHIRT1.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 35,
      "ReinSheer": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addApparel(SHIRT1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 73,
      "ReinSheer": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedApparel}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static void assertCardDisplaysPerson(Apparel expectedApparel, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(expectedApparel.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //assertEquals(expectedApparel.getColor(), actualCard.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        //assertEquals(expectedApparel.getClothingType(), actualCard.getEmail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code apparels} correctly and"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Apparel... apparels) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        for (int i \u003d 0; i \u003c apparels.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "            assertCardDisplaysPerson(apparels[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code apparels} correctly and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cApparel\u003e apparels) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertListMatching(personListPanelHandle, apparels.toArray(new Apparel[0]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 5,
      "-": 54,
      "ReinSheer": 11
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_BLUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_GREEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_NAME_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_NAME_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_COLOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_BLUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.ARMANY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BOBYIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHIRT2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHOES2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.SHOES3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: add a apparel without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel toAdd \u003d ARMANY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + INPUT_NAME_A + \"  \" + INPUT_COLOR_GREEN + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_TYPE_TOP + \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.addApparel(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: add a apparel with all fields same as another apparel in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        toAdd \u003d new ApparelBuilder(ARMANY).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_NAME_B + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: add a apparel with all fields same as another apparel in the address book except phone and email"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        toAdd \u003d new ApparelBuilder(ARMANY).withColor(VALID_COLOR_BLUE).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d ApparelUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(SHIRT1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: add a apparel with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        toAdd \u003d BOBYIN;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_COLOR_BLUE + INPUT_NAME_B + INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: add a apparel, missing tags -\u003e added */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(SHOES2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: filters the apparel list before adding -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_BELT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(SHOES3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* ------------------------ Perform add operation while a apparel card is selected -------------------------- */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: selects first card in the apparel list, add a apparel -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(SHIRT2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: add a duplicate apparel -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d ApparelUtil.getAddCommand(SHOES2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /**//* Case: add a duplicate apparel except with different color -\u003e rejected *//* this is invalid now"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        toAdd \u003d new ApparelBuilder(SHOES2).withColor(VALID_COLOR_BLUE).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d ApparelUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        *//* Case: add a duplicate apparel except with different clothingType -\u003e rejected *//* also invalid"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        toAdd \u003d new ApparelBuilder(SHOES2).withClothingType(VALID_TYPE_BOTTOM).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d ApparelUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        *//* Case: add a duplicate apparel except with different address -\u003e rejected *//* address not valid anymore"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        toAdd \u003d new ApparelBuilder(SHOES2).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d ApparelUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        *//* Case: add a duplicate apparel except with different tags -\u003e rejected *//* no more tags"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d ApparelUtil.getAddCommand(SHOES2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_APPAREL);*/"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: missing color -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_NAME_A + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: missing clothingType -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_NAME_A + INPUT_COLOR_GREEN;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /**//* Case: missing address -\u003e rejected *//* no more address"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_NAME_A + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));*/"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d \"adds \" + ApparelUtil.getApparelDetails(toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_INPUT_NAME + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: invalid color -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_NAME_A + INVALID_INPUT_COLOR + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, Color.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: invalid clothingType -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_NAME_A + INPUT_COLOR_GREEN + INVALID_INPUT_TYPE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, ClothingType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /**//* Case: invalid address -\u003e rejected *//*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_NAME_A + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        *//* Case: invalid tag -\u003e rejected *//*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INPUT_NAME_A + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);*/"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private void assertCommandSuccess(Apparel toAdd) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(ApparelUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Apparel)}. Executes {@code command}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Apparel)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private void assertCommandSuccess(String command, Apparel toAdd) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.addApparel(toAdd);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Apparel)} except asserts that"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Apparel)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 9,
      "rafflesandrison": 26,
      "-": 140,
      "ReinSheer": 60
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import seedu.address.testutil.TypicalApparels;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        return TypicalApparels.getTypicalAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertEquals(getModel().getAddressBook().getApparelList().size(), getModel().getFilteredApparelList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(getModel().getFilteredApparelList().size() \u003c getModel().getAddressBook().getApparelList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Selects the apparel at {@code index} of the displayed list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getApparelList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same apparel objects as {@code expectedModel}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * and the apparel list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredApparelList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the apparel in the apparel list panel at"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the apparel list panel remain unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredApparelList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 6,
      "-": 275,
      "ReinSheer": 6
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: selects first card in apparel list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: filters the apparel list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_BELT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 97,
      "ReinSheer": 4
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: delete the first apparel in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INDEX_FIRST_APPAREL.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel deletedApparel \u003d removePerson(expectedModel, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedApparel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: delete the last apparel in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: undo deleting the last apparel in the list -\u003e last apparel restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: redo deleting the last apparel in the list -\u003e last apparel deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: delete the middle apparel in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: filtered apparel list, delete index within bounds of address book and apparel list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_BELT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index index \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredApparelList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: filtered apparel list, delete index within bounds of address book but out of bounds of apparel list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_BELT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getApparelList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* --------------------- Performing delete operation while a apparel card is selected ----------------------- */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: delete the selected apparel -\u003e apparel list panel selects the apparel before the deleted apparel */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        deletedApparel \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedApparel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                getModel().getAddressBook().getApparelList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Removes the {@code Apparel} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @return the removed apparel"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private Apparel removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel targetApparel \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.deleteApparel(targetApparel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        return targetApparel;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Deletes the apparel at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel deletedApparel \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedApparel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 11,
      "-": 158,
      "ReinSheer": 26
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_BLUE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_COLOR_GREEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_NAME_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_NAME_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_COLOR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INPUT_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOR_GREEN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_B;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_TOP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPARELS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.ARMANY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BOBYIN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.ClothingType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Color;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.testutil.ApparelBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "//import seedu.address.testutil.ApparelUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Index index \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + INPUT_NAME_B + \"  \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_COLOR_BLUE + \" \" + INPUT_TYPE_BOTTOM + \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        Apparel editedApparel \u003d new ApparelBuilder(BOBYIN).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(command, index, editedApparel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: undo editing the last apparel in the list -\u003e last apparel restored */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: redo editing the last apparel in the list -\u003e last apparel edited again */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.setPerson(getModel().getFilteredApparelList().get(INDEX_FIRST_APPAREL.getZeroBased()), editedApparel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: edit a apparel with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_B"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandSuccess(command, index, BOBYIN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: edit a apparel with new values same as another apparel\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(getModel().getAddressBook().getApparelList().contains(BOBYIN));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        index \u003d INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertNotEquals(getModel().getFilteredApparelList().get(index.getZeroBased()), BOBYIN);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_A"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        editedApparel \u003d new ApparelBuilder(BOBYIN).withName(VALID_NAME_A).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(command, index, editedApparel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: edit a apparel with new values same as another apparel\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        index \u003d INDEX_SECOND_APPAREL;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_B"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "        editedApparel \u003d new ApparelBuilder(BOBYIN).withColor(VALID_COLOR_GREEN)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stanleymok"
        },
        "content": "                            .withClothingType(VALID_TYPE_TOP).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(command, index, editedApparel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /**//* Case: clear tags -\u003e cleared *//* commented out as we dont need tags anymore"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        index \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparelToEdit \u003d getModel().getFilteredApparelList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        editedApparel \u003d new ApparelBuilder(apparelToEdit).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(command, index, editedApparel);*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: filtered apparel list, edit index within bounds of address book and apparel list -\u003e edited */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_BELT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        index \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredApparelList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + INPUT_NAME_B;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel apparelToEdit \u003d getModel().getFilteredApparelList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        editedApparel \u003d new ApparelBuilder(apparelToEdit).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(command, index, editedApparel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: filtered apparel list, edit index within bounds of address book but out of bounds of apparel list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_BELT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getApparelList().size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + INPUT_NAME_B,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* --------------------- Performing edit operation while a apparel card is selected ------------------------- */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: selects first card in the apparel list, edit a apparel -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        index \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_A"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                + INPUT_COLOR_GREEN + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        // browser\u0027s url is updated to reflect the new apparel\u0027s name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandSuccess(command, index, ARMANY, index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + INPUT_NAME_B,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + INPUT_NAME_B,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredApparelList().size() + 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + INPUT_NAME_B,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + INPUT_NAME_B,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                        + INVALID_INPUT_NAME,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: invalid color -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                        + INVALID_INPUT_COLOR,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                Color.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: invalid clothingType -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                        + INVALID_INPUT_TYPE,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                ClothingType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /**//* Case: invalid address -\u003e rejected *//* commented as not dealing with address and tag"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        *//* Case: invalid tag -\u003e rejected *//*"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);*/"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /**//* Case: edit a apparel with new values same as another apparel\u0027s values -\u003e rejected *//*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        executeCommand(ApparelUtil.getAddCommand(BOBYIN));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertTrue(getModel().getAddressBook().getApparelList().contains(BOBYIN));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        index \u003d INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(getModel().getFilteredApparelList().get(index.getZeroBased()).equals(BOBYIN));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_B"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_APPAREL);*/"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: edit a apparel with new values same as another"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "         apparel\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /*command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_B"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        *//* Case: edit a apparel with new values same as another apparel\u0027s values but with different address -\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        rejected *//*"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_B"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                + INPUT_COLOR_BLUE + INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_APPAREL);*/"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /**//* Case: edit a apparel with new values same as another apparel\u0027s"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        values but with different color -\u003e rejected *//*"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_B"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                + INPUT_COLOR_GREEN + INPUT_TYPE_BOTTOM;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_APPAREL);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        *//* Case: edit a apparel with new values same as another apparel\u0027s"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "         values but with different clothingType -\u003e rejected *//*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + INPUT_NAME_B"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "                + INPUT_COLOR_BLUE + INPUT_TYPE_TOP;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_APPAREL);*/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Apparel, Index)} except that"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Apparel, Index)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Apparel editedApparel) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedApparel, null);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the apparel at index {@code toEdit} being"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * updated to values specified {@code editedApparel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Apparel editedApparel,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.setPerson(expectedModel.getFilteredApparelList().get(toEdit.getZeroBased()), editedApparel);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_APPAREL_SUCCESS, editedApparel), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        expectedModel.updateFilteredApparelList(PREDICATE_SHOW_ALL_APPARELS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stanleymok": 11,
      "rafflesandrison": 54,
      "-": 152,
      "ReinSheer": 82
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_APPARELS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BELT1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BELT2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.BELT3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.PANTS1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find multiple apparels in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "         * -\u003e 3 apparels found"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_BELT + \"   \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BELT1, BELT2, BELT3); //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: repeat previous find command where apparel list is displaying the apparels we are finding"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "         * -\u003e 3 apparels found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find apparel where apparel list is not displaying the apparel we are finding -\u003e 0 apparel found */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Necklace\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find multiple apparels in address book, 2 keywords -\u003e 4 apparels found */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Pants Belt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, PANTS1, BELT1, BELT2, BELT3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 4 apparels found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Belt Pants\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 4 apparels found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Pants Belt Pants\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "         * -\u003e 4 apparels found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Pants Belt NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find same apparels in address book after deleting 1 of them -\u003e 3 apparel found */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(getModel().getAddressBook().getApparelList().contains(PANTS1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BELT1, BELT2, BELT3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find apparel in address book, keyword is same as name but of different case -\u003e 3 apparel found */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" BeLt\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find apparel in address book, keyword is substring of name -\u003e 0 apparels found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Bel\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find apparel in address book, name is substring of keyword -\u003e 0 apparels found */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Belts\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find apparel not in address book -\u003e 0 apparels found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Necklace\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find color number of apparel in address book -\u003e 0 apparels found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + BELT1.getColor();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /**//* Case: find clothingType of apparel in address book -\u003e 0 apparels found *//*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Belt\u0027s clothingType is \u0027Belt\u0027, so not valid here"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + SHIRT2.getClothingType();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertSelectedCardUnchanged();*/"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find while a apparel is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(BELT1.getName().fullName));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Belt\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BELT1, BELT2, BELT3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: find apparel in empty address book -\u003e 0 apparels found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BELT1, BELT2, BELT3);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        command \u003d \"FiNd Belt\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "     * box displays {@code Messages#MESSAGE_APPARELS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                MESSAGE_APPARELS_LISTED_OVERVIEW, expectedModel.getFilteredApparelList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 5,
      "-": 129,
      "ReinSheer": 48
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredApparelList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 4,
      "-": 103
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static final Predicate\u003cApparel\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cApparel\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Optional\u003cPredicate\u003cApparel\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        model.updateFilteredApparelList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    public static void setFilteredList(Model model, Apparel... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Apparel} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "    private static Predicate\u003cApparel\u003e getPredicateMatching(Apparel other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 1,
      "-": 31,
      "ReinSheer": 7
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import seedu.address.model.apparel.Apparel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        Apparel[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "ReinSheer": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "import static seedu.address.testutil.TypicalApparels.KEYWORD_MATCHING_BELT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPAREL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: select the first card in the apparel list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_APPAREL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: select the last card in the apparel list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: select the middle card in the apparel list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: filtered apparel list, select index within bounds of address book but out of bounds of apparel list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_BELT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getApparelList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "        /* Case: filtered apparel list, select index within bounds of address book and apparel list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredApparelList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredApparelList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPAREL.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rafflesandrison"
        },
        "content": "                MESSAGE_INVALID_APPAREL_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ReinSheer"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected apparel.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rafflesandrison": 10,
      "-": 135,
      "ReinSheer": 9
    }
  }
]
