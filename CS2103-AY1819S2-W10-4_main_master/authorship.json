[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d Know-It-All"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "https://travis-ci.com/cs2103-ay1819s2-w10-4/main[image:https://travis-ci.com/cs2103-ay1819s2-w10-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "https://ci.appveyor.com/project/dlqs/main-q3u06[image:https://ci.appveyor.com/api/projects/status/t9v6c7uxe5ci5n3g/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w10-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w10-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": ":imagesdir: https://raw.githubusercontent.com/dlqs/main/refactorMisc/docs/images"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Having a hard time memorizing _two hundred pages_ worth of lecture notes?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Can\u0027t recall the difference between the \"ATP\" and \"ADP\"? Or remember the name of the \"leg bone\"?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "The fact is, _memory work is hard_. *And we understand.*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Introducing... *_Know-It-All_*!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*_Know-It-All_* is targeted at medical students (in fact, any students) as their studies requires a considerable amount of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "memory work, and deals with content that is suitable for bite-sized flashcard format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*_Know-It-All_* lets you:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * manage your flash cards, test yourself, and even share flashcards with others"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * view your cards through the GUI (Graphical User Interface)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * have maximum control through the CLI (Command Line Interface)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*_Know-It-All_* uses _innovative_ teaching methods to ensure our users love the learning process, combined with scientifically proven techniques such as _spaced-repetition_ to drive their performance ahead of the curve."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Compiled by a fleet of genuises, *_Know-It-All_* has been used by literally over a dozen students who have seen improvements in their results. Here are some raving reviews:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlqs"
        },
        "content": "[quote, anonymous medical student]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Saved my life. Now I know the difference between the leg bone and the thigh bone!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlqs"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": "[quote, The Singapore Flashcard Journal]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Anki should be shaking in their boots right now. ⭐⭐⭐⭐⭐"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": "[quote, Singapore Business Satisfaction Review]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlqs"
        },
        "content": "At last, a new high in BS - has been achieved."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": "What are you waiting for? Download *_Know-It-All_* today!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlqs"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*_Know-It-All_* is proud to present the following _awards_:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlqs"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlqs"
        },
        "content": "image:award1.png[width\u003d\"200\"] {nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}{nbsp}image:award2.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlqs"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* This application is a fork of the https://github.com/se-edu/addressbook-level4[AddressBook-Level4 project] created by the https://github.com/se-edu/[SE-EDU initiative]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "dlqs": 52,
      "-": 24
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"authors\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"githubId\": \"afterdusk\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"displayName\": \"AU ...JUN\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"authorNames\": [\"Liang Jun Au\", \"Liang Jun\", \"afterdusk\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"githubId\": \"dlqs\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"displayName\": \"DON...ANG\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"authorNames\": [\"Donald\", \"dlqs\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"githubId\": \"KerrynEer\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"displayName\": \"KER...EER\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"authorNames\": [\"KerrynEer\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"githubId\": \"mmdlow\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"displayName\": \"MAT... DE\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"authorNames\": [\"Matthew Low\", \"mmdlow\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"githubId\": \"yichong96\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"displayName\": \"ONG...ONG\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \"authorNames\": [\"Yi Chong Ong\", \"yichong96\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 29
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "mainClassName \u003d \u0027seedu.knowitall.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    archiveName \u003d \u0027knowitall.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            test.include \u0027seedu/knowitall/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            test.include \u0027seedu/knowitall/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            test.exclude \u0027seedu/knowitall/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        \u0027site-name\u0027: \u0027Know-It-All\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w10-4/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 6,
      "-": 230
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Know-It-All was developed by the AY2018/19 Semester 2 CS2103T W10-4 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d Au Liang Jun"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::afterdusk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "{empty}[https://github.com/afterdusk[github]] [\u003c\u003cauliangjun#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Responsibilities: Folder features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d Donald Lee Qian Siang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::dlqs.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "{empty}[https://github.com/dlqs[github]] [\u003c\u003cdonaldlee#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Responsibilities: Report and Scoring features"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d Kerryn Eer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::kerryneer.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "{empty}[https://github.com/KerrynEer[github]] [\u003c\u003ckerryneer#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Responsibilities: Test session features"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d Matthew Low Min De"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::mmdlow.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "{empty}[https://github.com/mmdlow[github]] [\u003c\u003cmatthewlow#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Responsibilities: Card features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d Ong Yi Chong"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::yichong96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": "{empty}[https://github.com/yichong96[github]] [\u003c\u003congyichong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Responsibilities: Advanced features"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "yichong96": 2,
      "dlqs": 2,
      "-": 33,
      "KerrynEer": 17,
      "mmdlow": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w10-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* *Email us* : You can also reach us at `au.liangjun [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Know-It-All - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w10-4/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "By: `CS2103-AY2018/19s2-W10-4 Team`      Since: `Mar 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/knowitall/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ". Repeat this for the test \u003c\u003cfolder, folder\u003e\u003e as well (e.g. check link:{repoURL}/src/test/java/seedu/knowitall/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": ". Run the `seedu.knowitall.MainApp` and try a few commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`cs2103-ay1819s2-w10-4/main` repo."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `cs2103-ay1819s2-w10-4/main`)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ", you should do the following:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "When you are ready to start coding, get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlqs"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/knowitall/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::SDforDeleteCard.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/knowitall/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CardListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlqs"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/knowitall/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlqs"
        },
        "content": "link:{repoURL}/src/main/java/seedu/knowitall/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".  `Logic` uses the `CardFolderParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a card)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::DeleteCardSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/knowitall/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* stores a list of `VersionedCardFolders` representing the folders that the user has."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* exposes unmodifiable instances of `FilteredList\u003cCard\u003e` and `FilteredList\u003cVersionedCardFolder\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "As a more OOP model, we can change the `Card` implementation to be that of a parent class, from which 2 subclasses, `SingleAnswerCard` and `McqCard` can inherit from. This would eliminate the need for the `Card` class to maintain a Set of MCQ `Options` even if it is a Single-answer card. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/knowitall/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* can save `CardFolder` data in json format and read it back."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Classes used by multiple components are in the `seedu.knowitall.commons` package."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "// tag::cards[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d Cards"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "The `Card` is one of the core aspects of the application. Cards are the result of morphing the `Person` class from the original AddressBook model. This implementation incorporates the `Model` and `Logic` components."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "To allow users to manage Cards, the following methods are available via the `Model` component:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `ModelManager#addCard(Card card)` - Adds a new card to the currently active `VersionedCardFolder` folder"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `ModelManager#setCard(Card target, Card editedCard)` - Edits the information of a target card in the currently active folder"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `ModelManager#deleteCard(Card target)` - Deletes the target card from the currently active folder"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `ModelManager#hasCard(Card card)` - Checks if a card is already present in the currently active folder"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "As with all other commands, the `LogicManager#execute(String commandText)` method of the `Logic` component parses the user\u0027s input, say a command to add a new card, and executes the corresponding `Command`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d\u003d Example Usage"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "The following steps detail the underlying logic executed when a user does a card-related operation, say an add card operation."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "1. User is in the `Organs` folder and wants to add a new card, with question \u0027What is the largest organ?\u0027 and answer \u0027Skin\u0027. This is done by typing `add q/What is the largest organ? a/Skin`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "+"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "image:CardImplementationAddExample.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "2. The command parser reads the string input (as entered by the user) and returns the corresponding `Command`, an `AddCommand` object in this instance."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "3. Upon execution, the `AddCommand` checks if the card to be added is already present in the current folder. If so, an exception is thrown."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "2. The `AddCommand` then calls the `ModelManager#addCard(Card card)` method."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "3. The new card will then be added to the active `VersionedCardFolder`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "4. If the user is not inside a folder, or if the card to add already exists inside the current folder, the `addCommand` will throw a `CommandException`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "The following sequence diagram demonstrates how `AddCommand` works."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "image:AddCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to represent options for MCQ cards"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* **Alternative 1 (current choice):** Maintain a set of `Option` objects to represent incorrect options, separate from the `Answer` field of each `Card`."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Pros: Simple to implement, easy to convert the card type between MCQ and Single-answer, requires the least amount of implementation changes to `Card`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Cons: Single-answer cards still have to maintain an empty `Option` set."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* **Alternative 2:** Maintain 2 separate subclasses of `Card`, one for Single-answer and another for MCQ."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Pros: More object-oriented implementation."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "// end::cards[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dlqs"
        },
        "content": "// tag::score[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d Score feature"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dlqs"
        },
        "content": "To implement tracking of the number of correct and incorrect attempts, a new attribute `Score` was added to `Card`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Score keeps track of both numbers."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dlqs"
        },
        "content": "This attribute is encapsulated in the `Score` class."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to represent score"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 1 (current choice):** Track total number of correct attempts and total number of attempts"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: Simple to implement. Most semantically correct."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Score will be rolling average. If the question is answered wrongly even once, the score can never be 100%."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 2:** Track only last X attempts."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: An improvement in performance will be more obvious."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Uses more memory. Have to delete the X+1th score every time a new score is added."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to read/write score from file"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 1 (current choice):** Read/write as `String`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: `String`s are easier to read/write to file."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: There must be strict checks when instantiating score from strings as they are prone to many kinds of formatting errors."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 2:** Read/write as a double."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: A `double` can represent both numbers with just one, which then can be converted to `String`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: When instantiating score from double, it might be simplified."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dlqs"
        },
        "content": "For example, 2 correct attempts and 4 total attempts becomes 0.5. When instantiating from double, it is interpreted as 1 correct attempt and 2 total attempts."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 3:** Read and write both numbers as integers."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: Most correct implementation."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Reading/writing to file now needs to take into account this fact. The `toString()` method cannot be used to write to file."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dlqs"
        },
        "content": "// end::score[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dlqs"
        },
        "content": "// tag::report[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d Report feature"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dlqs"
        },
        "content": "The report feature is meant to provide the user with the ability to look back and compare their folder score from"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dlqs"
        },
        "content": "previous test sessions."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to display folder scores"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 1 (current choice):** Display previous folder scores in a graph and lowest scoring cards"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: Has benefits of seeing the graph as well as knowing which cards the user needs help in."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: More performance and memory intensive. Screen may get messy if there are too many items."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 2:** Display previous folder scores in a graph"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: More visual, easier to see change in folder score."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: More performance and memory intensive as a graph needs to be rendered. Remedy: Display only last ten."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 3:** List the previous folder scores"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: User can see more accurate numbers. They can also see the individual card scores, so that"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dlqs"
        },
        "content": "they can tell where they need help."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Hard to see change from test session to test session."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Where to display folder scores"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 1 (current choice):** Display in full screen, entered from card folder"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: Works because the folder scores are scored by card folders."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Need to implement a new state for commands, because it should not be possible to do some e.g. add card while"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dlqs"
        },
        "content": "in fullscreen report."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 2:** Display in right panel, with cards on the left"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: User can see all their cards at the same time."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Less space to render report details such as graph."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dlqs"
        },
        "content": "// end::report[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dlqs"
        },
        "content": "// tag::state[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d State"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Previously, Model did not have a concept of state as there was only one screen where the user could be. But"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dlqs"
        },
        "content": "as Know-It-All grew, there are more screens that a user can be in and more commands that can only be executed in certain"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dlqs"
        },
        "content": "screens. Thus there is a need to manage the state in Model."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to manage state"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 1 (current choice):** Use enum of States"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: Fixes the states that Model can be in. By design, only one state can be true at any point in time, if state is set to type State which is a enum."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Need to add new states to enum."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 2:** Use Strings"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: No need to define new states. Trivial to change into new state: Simply set state to \"folder\", or \"homeDir\". Easy to check as well, e.g. to Check state \u003d\u003d \"folder\"."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Becomes very unsafe as even a typo would mean entering a state that other parts of the application would not understand."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dlqs"
        },
        "content": "e.g. Setting state to \"Folder\" instead of \"folder\"."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* **Alternative 2:** Use boolean flags"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Pros: Easy to manipulate. Clear when there are only two states."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Cons: Becomes very messy when there are more states, since there is a need to ensure that only one boolean flag"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dlqs"
        },
        "content": "is true at any point in time. E.g., only one of inFolder, inHomeDir, inTest... can be true."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dlqs"
        },
        "content": "// end::state[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yichong96"
        },
        "content": "//tag::importexport[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d Import/Export feature"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yichong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The Import and Export feature is facilitated by the Logic and model components, together"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yichong96"
        },
        "content": "with the addition of 2 new classes inside the csvmanager package defined under"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yichong96"
        },
        "content": "the storage package."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yichong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Similar to how the current commands are implemented, where each specific command inherits from the abstract"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yichong96"
        },
        "content": "class command, the Import and Export command likewise inherit from the command class."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yichong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The model component supports the addition of a new object attribute `CsvManager`, that carries out the read and"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yichong96"
        },
        "content": "write logic of cards to external files."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Additionally, model implements two new methods, `Model#importCardFolders` and `Model#exportCardFolders`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yichong96"
        },
        "content": "These two methods further call the CsvManager API to read and write card folders."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Model also implements `Model#setTestCsvPath` and the `Model#getDefaultPath` which are only used during testing."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yichong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d csvmanager package:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The csvmanager package contains all classes dealing with the reading and writing of cardfolders into and out to"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yichong96"
        },
        "content": "the model."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The classes include:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* CsvManager - Main class responsible for the writing and reading of .csv files during the import and export of files"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* CsvFile - Wrapper class for file name input by user"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* CsvCommands interface - API for import/export method in CsvManager"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The main logic for the import / export command is carried out inside the CsvManager class specified by it\u0027s"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yichong96"
        },
        "content": "API `CsvManager#writeFoldersToCsv` and `CsvManager#readFoldersToCsv`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yichong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Example Usage"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yichong96"
        },
        "content": "1. User wants to export folders `Human Anatomy` and `Nervous System`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Suppose that these two folders index as shown on the main application screen is 1 and 3 respectively."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The user types ``export 1 3``"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yichong96"
        },
        "content": "2. The Export command parser extracts the indices, parses the indices into a List\u003cInteger\u003e and"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yichong96"
        },
        "content": "`ExportCommand` object, which keeps track of the indices."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yichong96"
        },
        "content": "3. The Export command executes, calling `Model#exportCardFolders` method."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yichong96"
        },
        "content": "4. Model#exportCardFolders method checks that all card folders specified by user exists inside the list of card folders."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yichong96"
        },
        "content": "   With reference to the diagram below, we can see that the indices specified by the user corresponds"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yichong96"
        },
        "content": "   to each card folder. +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yichong96"
        },
        "content": "   The method throws `CardFolderNotFoundException` if card folder index is not found in list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yichong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yichong96"
        },
        "content": "image::import_export_model_list1.png[width \u003d \"800\"]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yichong96"
        },
        "content": "5. `CsvManager` is called to carry out the main logic of writing the cardfolders to file."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    File exported will be created in the project root directory. +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    Names of the files created will correspond to the names of their corresponding cardfolders. +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    i.e `Human Anatomy.csv` and `Nervous System.csv`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yichong96"
        },
        "content": "6. User wants to import `Human Anatomy.csv` file."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yichong96"
        },
        "content": "`Human Anatomy.csv` file contains flashcards represented in csv file format."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yichong96"
        },
        "content": "User types `import Blood.csv` command"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yichong96"
        },
        "content": "7. Import command parser extracts file name, wraps file into a `CsvFile` object and"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yichong96"
        },
        "content": "   parses the CsvFile into an Import Command object."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yichong96"
        },
        "content": "8. Logic unit executes the import command."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The execute method makes a call to `Model#importCardFolder` method."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yichong96"
        },
        "content": "9. CsvManager is called to carry out the main logic of reading cardfolders to file."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yichong96"
        },
        "content": "File imported will be serialized into a `CardFolder` object and"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yichong96"
        },
        "content": "added to the `filteredFoldersList` variable."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yichong96"
        },
        "content": "NOTE: Both Imported and Exported files have to be placed in the project root directory."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The below diagram shows the sequence diagram for the Import/Export commands"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yichong96"
        },
        "content": "image::import_export_sequenceDiagram.png[width \u003d \"1000\"]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d CSV file structure"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Example of a common cardfolder csv file +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Blood.csv"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yichong96"
        },
        "content": "image::Blood.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* The first line of any file contains the headers for each card."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Headers have to be present in the csv file for import."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* Each row of the csv file represents a single flashcard."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* Options header can take more than one value or none."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* Hints header can take either 0 or 1 value."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Which component responsible for import/export logic"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* Alternative 1: Implement read and write card folders in `StorageManager` class"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** The most intuitive solution,"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yichong96"
        },
        "content": "since Storage involves read and write logic"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Model and Storage are now more coupled together."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Storage has more than one responsibility now."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Instead of managing the internal data of card folder, it now has to"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yichong96"
        },
        "content": "manage the read and write to csv files."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* Alternative 2: Implement read and write card folders in `csvmanager` package class. (Current)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Separate responsibilities of both Storage and Model. +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yichong96"
        },
        "content": "1.  Model class can focus on the representation of the in-memory card folders"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Storage +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yichong96"
        },
        "content": "2. Storage class can focus on managing the internal card folder data (.json files)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** More code to write. Storage class could possibly call the relevant API\u0027s"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yichong96"
        },
        "content": "to convert .json file  into .csv file"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d  Aspect: csv file design structure"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* Alternative 1: Export multiple card folders into a single file."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Saves user trouble of calling multiple import for files."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Each card folder is separated by a new line."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Not a .csv file anymore."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yichong96"
        },
        "content": "First line header would now specify cardfolder name before card headers,"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yichong96"
        },
        "content": "leading to unequal rows and columns"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Users will be unable to select specific card folders to import if multiple card folders"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yichong96"
        },
        "content": "have been exported into a single file."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* Alternative 2: Export each card folder into a single file (Current)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** More flexibility for users to import desired card folders,"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yichong96"
        },
        "content": "since 1 cardfolder \u003d 1 csv file."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Files are now correctly formatted as .csv file"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Slightly more work needed to import multiple card folders."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yichong96"
        },
        "content": "//end::importexport[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "//tag::folders[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d Folders"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "A folder is another layer of abstraction over a `CardFolder`. Where we dealt with a single `CardFolder` in previous iterations, we now have multiple `CardFolders` that each have their own set of `Cards`. Users are able to manage each `CardFolder` independently."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Folders in the application are achieved via enhancements from the AddressBook implementation. The changes span across all four components (UI, Logic, Model and Storage)."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Previously, an instance of `ModelManager` contains only a single `VersionedCardFolder`, holding the current and previous state of the `CardFolder`. To support multiple folders, `ModelManager` now holds an `ObservableList` of `CardFolders`. The change is illustrated in the figure below, with the original implementation on the left and new implementation on the right."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "image::ModelEnhancementDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "To allow users to operate on multiple `CardFolders`, the following notable methods were also introduced:"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `ModelManager#addFolder(CardFolder cardfolder)` - Adds a specified cardfolder to the `ModelManager`’s list"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `ModelManager#deleteFolder(int index)` - Deletes the `CardFolder` at the specified index in the `ModelManager\u0027s` list"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `ModelManager#getActiveCardFolderIndex()` - Gets the index of the current active `CardFolder`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `ModelManager#enterFolder(int index)` - Specifies the active `CardFolder` for operations to be performed on via the index in `ModelManager`’s list and sets the boolean `inFolder` to `true` to denote that user is inside a folder."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `ModelManager#exitFolderToHome()` - Sets the boolean `inFolder` to `false` to indicate that the user is at the home directory."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `ModelManager#renameFolder(int index, String newName)` - Renames the folder at the specified index in the `ModelManager\u0027s` list to the new name."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `ModelManager#isInFolder()` - Returns true if the `ModelManager` is currently inside a folder."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Storage"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Similarly, the `StorageManager` needs to represent each `CardFolder` separately. In the same manner as in the Model component, we introduce a list of `JsonCardFolderStorages`. The change is illustrated in the figure below, with the original implementation on the left and new implementation on the right."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "image::StorageEnhancementDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Notable new methods:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `StorageManager#readCardFolders()` - Reads in all `CardFolders` from all `CardFolderStorage` objects in the list."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `StorageManager#saveCardFolders(List\u003cReadOnlyCardFolder\u003e cardFolders)` - Saves all `CardFolders` provided in the argument to the user\u0027s data directory."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The existing implementation of the Logic component propagates changes in a Model\u0027s `CardFolder` to the Storage component. With listeners, it is informed when a `CardFolder` is modified (e.g. a new card is added) so that it can invoke the appropriate Storage methods."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The same principle was applied to propagate changes regarding `CardFolders` themselves (and not their stored cards) to Storage: e.g. adding a new folder. Model is now an `Observable`, and changes to a Model’s `CardFolders` will inform the `LogicManager`, which in turn invokes `StorageManager#saveCardFolders(List\u003cReadOnlyCardFolder\u003e cardFolders)`."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "To illustrate how the Model, Storage and Logic components interact, below is a walkthrough of a typical usage scenario of the `addfolder` command. \u003c\u003caddfoldersequencediagram\u003e\u003e is a sequence diagram that summarises the example:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 1. The `addfolder` command is executed. For example, `addfolder f`."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 2. As with every command, the command parser reads the input and generates the relevant `Command` object, in this case an `AddFolderCommand`. The object is returned to the `LogicManager`."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "If the input is invalid (e.g. user did not provide a folder name), Step 2 would not proceed and an error message is displayed. The Model and Storage components will not be modified."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 3. The `LogicManager` executes the `AddFolderCommand`, storing the result and then transferring control to the Model component with the `ModelManager#addFolder()` method."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 4. The `ModelManager` creates a `VersionedCardFolder` to represent the newly created folder, storing a reference to its currently empty list of cards. Before returning control to the Logic component, `ModelManager#indicateModified()` is invoked to notify listeners in the `LogicManager` that the list of `CardFolders` have changed."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 5. The Logic component takes over control and checks if the `ModelManager` is modified. In the case of `addfolder` the object is indeed modified (as a result of Step 4) and thus the component proceeds to save the Model\u0027s `CardFolders` to Storage."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 6. Before handing over control to Storage, the `LogicManager` obtains the information to save and the path to save to with `ModelManager#getCardFolders()` and `ModelManager#getCardFoldersFilesPath()` respectively. It then passes these objects as parameters when it calls `StorageManager#saveCardFolders()`."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 7. The Storage component receives control, with the `StorageManager` clearing the directory at the specified path and creating `JsonCardFolderStorage` objects with path names equivalent to the names of the folders it has received. It then proceeds to invoke `JsonCardFolderStorage#saveCardFolder()` on all the `JsonCardFolderStorage` to save all the folders before returning to the `LogicManager`."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "If the path provided by the Model Component is invalid, the Storage component throws an exception and an error message is displayed. The changes made to Model are not saved and the command does not execute successfully."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 8. The `LogicManager` terminates and returns the result of the command to the calling method."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[[addfoldersequencediagram]]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".Component interactions for an `addfolder` command"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "image::AddFolderSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "As folders are a layer of abstraction over the cards, there is a need for the GUI to represent this abstraction for greater clarity and ease of use for the user. This is done by introducing the `FolderListPanel` class, which displays a list of all folders that the user has."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The `fullScreenPlaceholder:StackPane` object houses the content in the main window of our application. Depending on whether the user is in the home directory or within a folder, different UI objects are placed within `fullScreenPlaceholder`."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* When the user is in the home directory, `fullScreenPlaceholder` holds a `FolderListPanel` to display all the folders in a list inside the main window."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* When the user is within a folder, `fullScreenPlaceholder` holds a `CardMainScreen` object, which is composed of a `CardListPanel` and `BrowserPanel`. These represent the list of cards on the scrolling sidebar, as well as the card viewer on the right. The content within the `CardMainScreen` depends on the particular folder the user has navigated into, as different folders hold different cards."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "To better understand how the UI is updated, below is a walkthrough of what happens when the user enters a folder. Refer to the sequence diagram in \u003c\u003centerfoldersequencediagram\u003e\u003e for a visual representation:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 1. The Logic component informs the UI component that the user has entered a folder. The UI component responds by invoking `MainWindow#handleEnterFolder()`."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 2. UI retrieves the list of cards belonging to the entered folder from the `LogicManager`."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 3. A new `CardListPanel` is created with the information obtained in Step 2."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 4. The new `CardListPanel` from Step 3, together with the existing `BrowserPanel`, are used to create a new `CardMainScreen` object."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Step 5. The content held by `fullScreenPlaceholder` is replaced with the newly generated `CardMainScreen`."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[[enterfoldersequencediagram]]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".UI behaviour when user enters folder"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "image::EnterFolderGUISequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How multiple folders are represented in Model"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 1 (current choice)**: List of structures representing individual folders"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Scalable and better follows OOP principles."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Hard to implement, alters fundamental architecture of components."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 2**: A single structure containing Cards with information on their folder membership (folder operations performed by iterating over all cards)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Not scalable, will be computationally expensive to perform folder operations when there are many cards and/or folders."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Folder identification"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 1**: Use a unique folder name"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: The undo/redo feature would not be compatible with this approach, as checking equality between different versions of a folder across time necessarily requires the comparison of cards."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 2**: Identify a folder by its cards"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: There can be no folders with identical cards, preventing redundancy."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Two folders could have identical names as long as the cards are different, which is potentially confusing."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 3 (current choice)**: Mixed approach, use Alternative 1 for comparing different folders and Alternative 2 for comparing the same folder across time"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Reaps the benefits of both approaches without the disadvantages."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Difficult to implement and for future developers to grasp the difference between the two types of comparisons."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage file name and folder name"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 1**: Let folder name be the file name of the storage file"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Less ambiguity as to how file name is related to folder name, able to find storage file path with folder name."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Harder to retrieve folder name from the file as it requires parsing the path, more prone to data corruption as file name could be modified when application is running."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 2 (current choice)**: Let file name be independent of folder name, which is stored inside the storage file itself"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Easier to implement and avoids dependency on existing storage files after application starts."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: When saving folders from Model, it is difficult to match folders with existing storage files. Hence, rather than saving the modified folder, it is more feasible to clear the directory and save all folders. This is computationally expensive and may not be scalable beyond a certain size."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: What folders to generate in the event corrupted storage files are encountered"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 1**: Display a sample folder"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Easy to implement, guaranteed that application will not be empty with no folders displayed."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Non-corrupted folders will not be displayed and will potentially be overwritten."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 2**: Display non-corrupted folders"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Non-corrupted data is preserved."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: If all data is corrupted, an empty application is presented to the user."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 3 (current choice)**: Mixed approach, display all non-corrupted folders unless all data is corrupted, in which case display sample folder"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Has the advantages but not the disadvantages of Alternatives 1 and 2."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Challenging to implement."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d Navigating folders"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Navigation State"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The state of the application with regard to navigation (i.e. whether a user is inside of a folder or at the home directory) affects the types of commands available to the user."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* The commands that affect cards (e.g. adding a card, editing a card) are executed within folders and are known as *Card Operations*."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Commands that affect folders (e.g. adding a folder, deleting a folder) are only executable at the home directory and are known as *Folder Operations*."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Please refer to the User Guide for the full list of commands under both categories."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "To keep track of navigation state, a boolean `inFolder` is maintained by the `ModelManager`. Other components may retrieve the current state with `ModelManager#isInFolder()`. This is also how the `Command` objects determines whether the command is executable in the present navigation state."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Change Command"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Folder navigation is achieved by the user through the use of the `change` command. As navigating folders do not actually modify folders and their cards, folder navigation does not involve the Storage Component."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The change command has the following formats:"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "1. `change ..` - Returns the user to the home directory. This command can only be executed when the user is inside a folder."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "2. `change FOLDER_INDEX` - Enters the folder specified by `FOLDER_INDEX`. This command can only be executed from the home directory, when the user is not in any folder."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "When a `change` command is executed, the Logic component parses the command and creates a `ChangeCommand` object. If the command is of the first format, `ChangeCommand()` is invoked without any arguments and the boolean `isExitingFolder` is set to `true`. If the command is of the second format, the overloaded constructor `ChangeCommand(FOLDER_INDEX)` is instead called and `isExitingFolder` is set to `false`."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "`ChangeCommand#execute()` is then invoked. The value of `isExitingFolder` will determine the corresponding methods in `ModelManager` that are called (`exitFoldersToHome()` or `enterFolder()`). The sequence diagram in \u003c\u003cchangecommandsequencediagram\u003e\u003e illustrates this conditional choice and the interactions involved with each option."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[[changecommandsequencediagram]]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".Component interactions for `change` command"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "image::ChangeCommandSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Command format to enter and exit folders"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 1 (current choice)**: Use variations of the same command (e.g. `change ..` and `change INDEX` )"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: More intuitive and akin to other Command Line applications."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Harder to implement as the logic for parsing the command is different from that of existing commands."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 2**: Use distinct commands (e.g. `home` and `enter INDEX`)"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Commands would function similar to other commands in the application."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Harder for the user to get acquainted with as there are two separate commands with logically similar functionality; introduces redundancy."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "//end::folders[]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "//tag::testcommand[]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d Test Session feature"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d Overall Current Implementation"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This big feature mainly involves `UI`, `Logic` and `Model` components."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "There are 3 main variables in `ModelManager` introduced to keep track of the current state of the user in a test"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "session."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `currentTestedCardFolder`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** The current card folder that the user is running a test session on (stored as an `ObservableList` of cards) ."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Set to null if user is not inside a test session"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `currentTestedCard`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** The current card the user is seeing in the test session, obtained from `currentTestedCardFolder` using"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`currentTestedCardIndex`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Set to null if user is not inside a test session"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Related methods:"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*** `ModelManager#setCurrentTestedCard(Card card)` - set `currentTestedCard` to the card specified."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*** `ModelManager#getCurrentTestedCard()` - returns the `currentTestedCard`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `cardAlreadyAnswered`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** A boolean variable to indicate if the user has already execute a valid answer command for the current card."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Related methods:"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*** `ModelManager#setCardAsAnswered()` - set `cardAlreadyAnswered` to true."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*** `ModelManager#setCardAsNotAnswered()` - set `cardAlreadyAnswered` to false."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*** `ModelManager#isCardAlreadyAnswered()` - returns true if the current card has already been answered and false"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "otherwise."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d Overall Design Considerations"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Usage of an extra card variable to keep track of the current card in test session"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* **Alternative 1 (current choice)**: Introduce another variable, `currentTestedCard`, to store the card to display"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "in the test session."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Pros: More reader friendly. Save time from accessing the list to get card at that index."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Cons: Extra space used."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* **Alternative 2**: No introduction of `currentTestedCard` as using the `currentTestedCardIndex` suffices. Every time a"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "card is needed, can simply reference it using `currentTestedCardFolder.getIndex(currentTestedCardIndex)`."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Pros: No need to store an extra variable so this method uses less space."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Cons: Not so reader friendly. Need to keep accessing the list using the index which can potentially lead to"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "possible violation of the Law of Demeter where an object should only interact with objects that are closely related to it."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Evaluation of the 2 alternatives:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "We went with alternative 1 since not a large amount of memory is taken up with just 1 extra card stored. As there will"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "be a number of references to the `currentTestedCard`, it will be better to store them somewhere. Abiding by the Law"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "of Demeter, `currentTestedCard` object will not be interacting with `currentTestedCardFolder`,  limiting its"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "knowledge of that object which is encouraged according to the Principle of Least Knowledge."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d Test / End Command"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "The main logic for  `test` and `end` command is carried out in `ModelManager` with the following methods:"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `ModelManager#testCardFolder()` - begins a test session on the current card folder user is in and implicitly sorts"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "the cards in it."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `ModelManager#endTestSession()` - ends the current test session."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To update the change in the `UI` to reflect that the user is a test session (app goes to full screen with question of"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "the current card presented), the following methods are introduced."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `MainWindow#handleStartTestSession(Card card)` - creates a new `TestSession` page with the card specified and bring"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " the page forward in front of the current `CardMainScreen` page."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `MainWindow#handleEndTestSession()` - deletes the current `TestSession` page and the `CardMainScreen` page at the back"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " is now presented to the user."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Example Usage of test command"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To illustrate how the `UI`, `Model` and `Logic` components interact, below is a walkthrough of a typical usage scenario of"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "the test command."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c\u003ctestcommandsequencediagram\u003e\u003e is a sequence diagram that summarises `Model` and `Logic` interactions, namely steps 1 to 7."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 1**. User is inside a folder and wants to begin a test session on the current folder by executing the command"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`test`."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 2**. As with every command, the command parser reads the input and generates the relevant `Command` object, in"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "this case a `TestCommand`. The object is returned to the `LogicManager`."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 3**. The `LogicManager` executes the `TestCommand`, storing the result and then transferring control to the"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Model component, with `Model#getState()` to check that user is inside a folder and is not already in a test session."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "(This is omitted from \u003c\u003ctestcommandsequencediagram\u003e\u003e for simplicity.)"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If the user is not inside a folder, this `test` command would be rendered invalid. Step 4 would not proceed and an"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "error message is displayed."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 4**. After checking user is in a folder, `ModelManager#testCardFolder()` method is invoked, which"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "does the following:"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "1. `currentTestedCardFolder` is set to the current folder the user is in, by invoking `getCardList()` from the active"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`VersionedCardFolder` in `folders`."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If this folder is empty such that there is no card to present to the user, an `EmptyCardFolderException` is thrown,"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "to be caught in `TestCommand`, which then throws a `CommandException` to display an error message."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "2. The cards in this folder are sorted in ascending scores by invoking `sortFilteredCard(comparator)`, so that"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "lowest score cards will be presented first to the user in a test session."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "3. `ModelManager#setCurrentTestedCard(currentTestedCardIndex)` is then invoked to set `currentTestedCard` to the first"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "card in the folder as `currentTestedCardIndex` is set to 0."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "4. `state` in `Model` is set to `IN_TEST` to specify that user is in a test session from now onwards."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "5. No change to `cardAlreadyAnswered` as it is by default false."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 5**. For `TestCommand` to obtain the first card to present in the test session, `ModelManager#getCurrentTestedCard` is"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "invoked and the `Card`, `c`, is returned."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 6**. With control now transferred back to the logic unit, `TestCommand` creates a `CommandResult` object, `r` with the type `START_TEST_SESSION`, and"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "set `testSessionCard` in `CommandResult` to `c` obtained in Step 5."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 7**. `r` is returned to `LogicManager` which then terminates and returns `r` to the caller method."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 8**. The caller method here is in `MainWindow`. Control is now transferred to the UI component."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 9**. `MainWindow` sees that `CommandResult` object `r` has the type `START_TEST_SESSION`. It invokes"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`MainWindow#handleStartTestSession(currentTestedCard)` to display the `currentTestedCard` question and hints to the"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "user."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[[testcommandsequencediagram]]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".Component interactions for a `test` command"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::TestCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "//end::testcommand[]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[[exampleusageofendcommand]]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Example Usage of end command"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 1**. User is currently in a test session and executes the command `end`."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 2**. An `EndCommand` object is created and `LogicManager` executes the `EndCommand`, storing the result and then"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "transferring control to the Model component, with `Model#getState()` to check that user is indeed in a test session."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If the user is not in a test session, Step 3 would not proceed."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 3**. `ModelManager#endTestSession()` method is invoked, which does the following:"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "1. `currentTestedCardFolder` is set to null."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "2. `ModelManager#setCurrentTestedCard(null)` is invoked to set `currentTestedCard` to null."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "3. `state` in `Model` is set to `IN_FOLDER` to specify that user is back in the folder."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "4. `ModelManager#setCardAsNotAnswered()` is invoked."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 4**. As control is now transferred back to the logic unit, `EndCommand` creates a `CommandResult` object, `r` with"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "the type `END_TEST_SESSION`."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 5**. `r` is returned to `LogicManager` which then terminates and returns `r` to the caller in `MainWindow`. Control is now transferred to the UI component."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 6**. `MainWindow` sees that `CommandResult` object `r` has the type `END_TEST_SESSION`. It invokes"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`MainWindow#handleEndTestSession()` to delete the current `testSession` page, presenting `cardMainScreen` page at the"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "back (the screen the user was seeing before entering the test session) to the user."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "//tag::testcommanddesign[]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Way to execute a test/end command"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* **Alternative 1 (current choice)**: `test` is executed when inside a folder. The user does not have to specify the"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "folder index and `test` would just immediately display the first card in the this current folder."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Pros: The most logical way of carrying out a test session is where user is in the folder that he or she wants to be tested on. Lesser dependency on entering and exiting folder methods."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Cons: Requires the extra step of entering the folder before it can actually test the folder. User may actually see the questions before the test session."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* **Alternative 2**: `test` is executed when outside a folder, in the home directory. `test` command would require a"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "folder index, e.g `test 1` to test the first folder. Implementation of getting the card from the folder would rely on"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "enter folder command as well."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Pros: Fast way to enter test session from home directory"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Cons: Not logical for test to be called from home directory which should only allow folder operations. Test will"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "then have to implicitly enter the folder to get access to the cards in it in order to display them, creating a dependency between test and enter folder command."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Similar issue will arise for the end test session command where user will need to implicitly exit the folder."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Evaluation of the two alternatives:"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Overall, alternative 1 is a better choice following the Single Level of Abstraction Principle(SLAP) where a function should not mix different levels of abstractions. We can then better achieve higher cohesion and lower coupling."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Also, user being able to see the questions before the test session is not a big issue since the answer will not be shown unless user selects the card."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "//end::testcommanddesign[]"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d Answer Command"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To facilitate the marking of attempted answer, we introduce the following method in `ModelManager`."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `ModelManager#markAttemptedAnswer(Answer attemptedAnswer)` - returns true if attemptedAnswer is correct and"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "false if attemptedAnswer is wrong. It compares the attempted answer and the correct answer obtained from the current"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "card."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Comparison is not case-sensitive"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Logic"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To facilitate the update of score after marking the card, we introduce the following method in `ModelManager`."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `ModelManager#AnswerCommand#createScoredCard(Card cardToMark, boolean markCorrect)` - creates a new card with the"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "updated score."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To update the change in the `UI` to show the user the result of the marked answer, whether it is correct or wrong, the following methods are introduced."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `MainWindow#handleCorrectAnswer()` - invokes `TestSession#handleCorrectAnswer()`"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `MainWindow#handleWrongAnswer()` - invokes `TestSession#handleWrongAnswer()`"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `TestSession#handleCorrectAnswer()` - updates current `TestSession` page to green colour background with correct"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "answer and correct answer description"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `TestSession#handleWrongAnswer()` - updates current `TestSession` page to red colour background with correct answer"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "and wrong answer description"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Example Usage of answer command"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To illustrate how the components interact, below is a walkthrough of a typical usage scenario of the answer command."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c\u003canswercommandsequencediagram\u003e\u003e is a sequence diagram that summarises `Model` and `Logic` interactions, namely steps 1"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "to 8."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 1**. User is in a test session and wants to answer the question on the card currently presented by executing a"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`ans"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " four`."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 2**. An `AnswerCommand` object is created and `LogicManager` executes the `AnswerCommand`, storing the result and"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "then transferring control to the Model component, with `Model#getState()` and"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`ModelManager#isCardAlreadyAnswered()` to check that user is indeed in a test session and has not attempted an answer"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " already. (This is omitted from \u003c\u003canswercommandsequencediagram\u003e\u003e for simplicity.)"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If the user is not in a test session or already attempted an answer for the current card, this `ans` command would be"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "rendered invalid. Step 3 would not proceed and an error message is displayed."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 3**. After both checks have passed, `ModelManager#setCardAsAnswered()` is invoked."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 4**. `ModelManager` now marks the attempted answer by invoking `ModelManager#markAttemptedAnswer(attemptedAnswer)`."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 5**. Given the result of the attempt, a new card exactly the same as the current"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "card but with the updated score is created and replaces the current one by invoking `ModelManager#createScoredCard(Card"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "cardToMark, boolean markCorrect)` followed by `Model#setCard(cardToMark, scoredCard)`."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 6**. To complete the update in the change in score, `Model#updateFilteredCard(PREDICATE_SHOW_ALL_CARDS)` and"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`Model#commitActiveCardFolder()` are invoked."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 7**. `AnswerCommand` now creates a `CommandResult` object, `r` with either type `ANSWER_CORRECT` or `ANSWER_WRONG`"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " depending on the outcome of the attempt."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 8**. `r` is returned to `LogicManager` which then terminates and returns `r` to the caller."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 9**. The caller method is in `MainWindow`. Control is now transferred to the UI component."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 10**. If `MainWindow` sees that `CommandResult` object `r` has the type `ANSWER_CORRECT`, it invokes"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`MainWindow#handleCorrectAnswer()` to display the correct attempt `TestSession` page to the user."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If `MainWindow` sees that `CommandResult` object `r` has the type `ANSWER_WRONG`, it invokes"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`MainWindow#handleWrongAnswer()` to display the wrong attempt `TestSession` page to the user."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[[answercommandsequencediagram]]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".Component interactions for a answer command"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::AnswerCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d Next Command"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Model"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "The following method is introduced in `ModelManager` to display to the user the next card in the test session."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`ModelManager#testNextCard()` - returns true if it successfully finds a next card to present in the test session and"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "false otherwise (if there is no more cards left to test in the folder)."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d UI"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To display the next card in the test session, the method below is introduced in `MainWindow`."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `MainWindow#handleNextCardTestSession(Card card)` - deletes the current `TestSession` page and adds a new"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`TestSession` page with this next card specified."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Example Usage of next command"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To illustrate how the `UI`, `Model` and `Logic` components interact, below is a walkthrough of a typical usage scenario of"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "the next command."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c\u003cnextcommandsequencediagram\u003e\u003e is a sequence diagram that summarises `Model` and `Logic` interactions, namely steps 1"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "to 6."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 1**. User is in a test session and wants to move on to the next card by executing a `next`."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 2**. A `NextCommand` object is created and `LogicManager` executes the `NextCommand`, storing the result and"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "then transferring control to the Model component, with `Model#getState()` and"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`ModelManager#isCardAlreadyAnswered()` to check that user is indeed in a test session and has attempted an"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "answer already. (This is omitted from \u003c\u003cnextcommandsequencediagram\u003e\u003e for simplicity.)"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If the user is not in a test session or has not attempted an answer for the current card, this `next` command would be"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "rendered invalid. Step 3 would not proceed and an error message is displayed."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 3**. After both checks have passed, `ModelManager#testNextCard()` method is invoked, which does the following:"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "1. `currentTestedCardIndex` incremented by 1."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "2. `currentTestedCardIndex` is then checked if it equals to the size of `currentTestedCardFolder`."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Case 1: This check returns true. +"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This means `currentTestedCardIndex` is invalid and there"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "is no more next card to be presented to the user. This method immediately returns false."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Case 2: This check returns true. +"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This means `currentTestedCardIndex` is valid and will be used to get the next card"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " from `currentTestedCardFolder`. This card is set as the `currentTestedCard` via the `ModelManager#setCurrentTestedCard"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "(cardToTest)`. `ModelManager#setCardAsNotAnswered` is then invoked to reset the value of `cardAlreadyAnswered`. This"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "method returns true."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 4**. From the result of `ModelManager#testNextCard()` method earlier:"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Case 1: Method returns false. +"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "A `next` command will be equivalent to an `end` command. `ModelManager#endTestSession()` is invoked. Step 5 does not"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "proceed. Instead, step 3 and onwards of the \u003c\u003cexampleusageofendcommand\u003e\u003e takes over."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Case 2: Method returns true."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "For `NextCommand` to obtain the next card to present in the test session, `ModelManager#getCurrentTestedCard` is"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "invoked and the `Card`, `c`, is returned."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 5**. With control now transferred back to the logic unit, `NextCommand` creates a `CommandResult` object, `r` with"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "the type `SHOW_NEXT_CARD`, and set `testSessionCard` in `CommandResult` to `c`."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 6**. `r` is returned to `LogicManager` which then terminates and returns `r` to the caller method."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 7**. The caller method here is in `MainWindow`. Control is now transferred to the UI component."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Step 8**. `MainWindow` sees that `CommandResult` object `r` has the type `SHOW_NEXT_CARD`. It invokes"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`MainWindow#handleNextCardTestSession(currentTestedCard)` to display this new `currentTestedCard` question and hints"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "to the user."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[[nextcommandsequencediagram]]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".Component interactions for a `next` command"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::NextCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Behavior of next command executed on the last card"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* **Alternative 1 (current choice)**:  A `next` command will be equivalent to an `end` command"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Pros: More convenient and user-friendly. It is common sense to end the test session for the user."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Cons: By right, it is not correct since next command is just to show the next card."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* **Alternative 2**: A `next` command will throw an exception"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Pros: Most correct way to do it since there is no next card to display."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Cons: User may not understand. It is not user-friendly as user has to keep track of which card it is at to prevent the exception thrown."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Evaluation of the two alternatives:"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "With our target audience in mind, alternative 1 is the more user friendly and intuitive way to handle this scenario."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The following section details a feature implemented in the earlier iteration of the application. As such, the diagrams still refer to `AddressBook`, which has since replaced with `CardFolder`. The outdated diagrams here will be updated by `v2.0`."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedCardFolder`."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "It extends `CardFolder` with an undo/redo history, stored internally as an `cardFolderStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `VersionedCardFolder#commit()` -- Saves the current card folder state in its history."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `VersionedCardFolder#undo()` -- Restores the previous card folder state from its history."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `VersionedCardFolder#redo()` -- Restores a previously undone card folder state from its history."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitCardFolder()`, `Model#undoCardFolder()` and `Model#redoCardFolder()` respectively."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedCardFolder` will be initialized with the initial card folder state, and the `currentStatePointer` pointing to that single card folder state."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th card in the card folder. The `delete` command calls `Model#commitCardFolder()`, causing the modified state of the card folder after the `delete 5` command executes to be saved in the `cardFolderStateList`, and the `currentStatePointer` is shifted to the newly inserted card folder state."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Step 3. The user executes `add q/Some question ...` to add a new card. The `add` command also calls `Model#commitCardFolder()`, causing another modified card folder state to be saved into the `cardFolderStateList`."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "If a command fails its execution, it will not call `Model#commitCardFolder()`, so the card folder state will not be saved into the `cardFolderStateList`."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Step 4. The user now decides that adding the card was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoCardFolder()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous card folder state, and restores the card folder to that state."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial card folder state, then there are no previous card folder states to restore. The `undo` command uses `Model#canUndoCardFolder()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoCardFolder()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the card folder to that state."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "If the `currentStatePointer` is at index `cardFolderStateList.size() - 1`, pointing to the latest card folder state, then there are no undone card folder states to restore. The `redo` command uses `Model#canRedoCardFolder()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the card folder, such as `list`, will usually not call `Model#commitCardFolder()`, `Model#undoCardFolder()` or `Model#redoCardFolder()`. Thus, the `cardFolderStateList` remains unchanged."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitCardFolder()`. Since the `currentStatePointer` is not pointing at the end of the `cardFolderStateList`, all card folder states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add q/Some question ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire card folder."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the card being deleted)."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of card folder states."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedCardFolder`."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|Attribute question |Description |Default value"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|The question of the website."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "If set, the question will be displayed near the top of the page."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|Attribute question |Description |Default value"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "dlqs"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.knowitall.ui` package."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "dlqs"
        },
        "content": "e.g. `seedu.knowitall.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "dlqs"
        },
        "content": "e.g. `seedu.knowitall.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "dlqs"
        },
        "content": "e.g. `seedu.knowitall.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "dlqs"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/knowitall/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "A project often depends on third-party libraries. For example, card folder depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* medicine students who need to rote memorisation of information"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* finds carrying physical flashcards around troublesome and prefers an application to help them store and organize"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "their learning material"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*Value proposition*: flashcards that are able to test the user instead of simply having them recall the answer. The"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "user experience is more engaging and scoring is more accurate as it is based on actual performance rather than reported performance."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* * *`|student|have flashcards with questions and answers|have an easier time memorising content"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* * *`|student|create and delete my own flashcards|"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* * *`|student|edit the content of my flashcards|add on more content or correct any errors"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* * *`|student|have folders to store flashcards|logically group flashcards of the same topic"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* * *`|student|navigate in and out of folders|see one folder\u0027s cards at each point of time"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* * *` |student|test myself on each flashcard folder|better learn the content"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* * *`|student|attempt keying in answers before flashcards reveal them|have a more engaging experience"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* * *`|student|view the answers of questions directly|proceed even when I do not remember the answer"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* *`|student|know how well I\u0027ve been performing on each flashcard|know my overall progress"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* *`|student|view a progress report by folder|know my performance for each topic"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* *` |student|sort flashcards by score |know which questions i have more trouble answering"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* *`|student|import and export flashcards|share content"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* *`|student|search flash cards in a folder|save time looking for a particular card"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* *`|student|search folders|save time looking for a particular folder"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`* *`|student|move flashcards from one folder to another|better manage my flashcards"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`*` |student|add hints that I can toggle on/off|get help with more difficult cards"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`*`|student|add pictures to certain flashcards|better represent topics that heavily feature topics and diagrams"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`*`|student|have a question that expects more than one answer|test myself more complex questions"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`*` |student|different template designs for my flashcards|have a personalised experience while revising"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is `Know-It-All` and the *Actor* is the `Student`, unless specified otherwise)"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "//tag::testsessionusecases[]"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC01 Test flashcards"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "1. Student begins a test session."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "2. System presents the question on the lowest-performing flashcard first."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "3. Student inputs his/her answer."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "4. System indicates whether student’s answer is correct or wrong and shows the answer of the flashcard."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "5. Student navigates to next flashcard."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "6. Repeat steps 2-4 until all the flashcards in the folder are tested."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* 3a. Student doesn\u0027t know the answer and wants to see the answer without attempting."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** 3a1. Student uses the reveal command."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** 3a2. Answer is displayed to the student."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "//end::testsessionusecases[]"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "//tag::cardusecases[]"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC02 Add flashcards"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "1. Student navigates to a folder that he wants to add a flashcard to."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "2. Student inputs question and answer to be stored as flashcard."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "3. System stores the details as a flashcard under the current folder."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* 2a. Student only inputs a question but no answer."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** 2a1. System displays an error message informing the user that the command format is invalid."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "+"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d UC03 Edit flashcard question"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "1. Student navigates to the folder that contains the flashcard to be edited."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "2. Student indicates the card to be edited, as well as the new question."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "3. System stores the updated details for the edited card."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* 2a. Student enters a blank as the desired question."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** 2a1. System displays an error message informing the user that the question cannot be a blank."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "+"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* 2b. Student enters a card index that does not exist."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** 2b1. System displays an error message prompting the user to choose a valid card index."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "+"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "//end::cardusecases[]"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "//tag::folderusecases[]"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d UC04 Add folder"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* A folder of the desired name is created."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "1. Student navigates to home directory."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "2. Student inputs the name of the folder he wants to create."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "3. System creates a folder of the desired name and shows it on the home directory."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* 2a. Student inputs a name that already exists."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** 2a1. System displays an error message prompting the user to use a folder name that is not taken."
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d UC05 Edit folder name"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* A particular folder as selected by the student is renamed to the desired name."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "1. Student navigates to home directory."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "2. Student indicates the folder he wants to rename, as well as the new name."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "3. System renames the folder to the new name and shows it on the home directory."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* 2a. Student inputs a name that already exists."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** 2a1. System displays an error message prompting the user to use a folder name that is not taken."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* 2b. Student chooses a folder that does not exist."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** 2b1. System displays an error message prompting the user to choose a valid folder."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* 2c. Student enters a blank as the desired new folder name."
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** 2c1. System displays an error message informing that the folder name cannot be a blank."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d UC06 Navigating into folders"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "1. Student indicates the folder he wants to enter."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "2. System enters the folder and displays the folder content."
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* 1a. Student chooses a folder that does not exist."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** 1a1. System displays an error message prompting the user to choose a valid folder."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* 1b. Student is already inside a folder."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** 1b1. System displays an error message informing that the user can only navigate into the folder when he is at the home directory."
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** 1b2. Student navigates back to home directory."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "//end::folderusecases[]"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "dlqs"
        },
        "content": "//tag::reportusecase[]"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "dlqs"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d UC06 Display report for a folder"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "dlqs"
        },
        "content": "1. Student enters the a folder."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "dlqs"
        },
        "content": "2. Student indicates that they want to see the report for this folder."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "dlqs"
        },
        "content": "3. System displays a full-screen report."
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "dlqs"
        },
        "content": "+"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "dlqs"
        },
        "content": "//end::reportusecase[]"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".  Should be able to hold up to 1000 cards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "yichong96"
        },
        "content": ".  The user interface should be intuitive enough even for medical students to use the app."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "// tag::glossary[]"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[[cardanswer]] **Card Answer**: The correct answer of a card."
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[[cardhint]] **Card Hint**: The optional hint of a card."
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[[cardoption]] **Card Option**: An incorrect option for an MCQ card."
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[[cardquestion]] **Card Question**: The question of a card."
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[[cardscore]]  **Card Score**: The number of correct answers divided by the number of attempts for a single card. When the user is tested on a card, this number is automatically calculated and recorded."
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[[flashcard]]**Flashcard/Card**: An object containing a single question and answer, and optionally, hints. There are 2 types of cards, Single-answer and MCQ. MCQ cards feature incorrect options in addition to the card answer, while Single-answer cards do not."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[[folder]] **Folder**: A collections of flashcards, grouped topically. There are no"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "sub-folders."
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[[folderscore]] **Folder Score**: The average of all \u003c\u003ccardscore, card scores\u003e\u003e in a folder after a test session. This number is automatically recorded after each test session."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[[homedirectory]] **Home Directory**: The home page where all the folders are listed. From here, users can enter folders to view cards."
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[[mainstream-os]]**Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "[[testsession]] **Test Session**: A session where all flashcards in a folder are queued to have their"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "questions displayed. The user is required to key in an answer for each question."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "// end::glossary[]"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "_{ more test cases to be added ... }_"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d Deleting a card"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ". Deleting a card while all cards are listed"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".. Prerequisites: List all cards using the `list` command. Multiple cards in the list."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "   Expected: No card is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "_{ more test cases to be added ... }_"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "_{ more test cases to be added ... }_"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 290,
      "yichong96": 153,
      "dlqs": 120,
      "-": 637,
      "KerrynEer": 366,
      "mmdlow": 117
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX framework, which this code base uses for its UI, uses _events_ to communicate user input (such as mouse movement and button presses) to interested _event consumers_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX event loop acts as an _event dispatcher_ to transmit events to event consumers."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/8/javafx/events-tutorial/events.htm[JavaFX: Handling Events]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as Jackson. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Test methods `prefsReadSave()` and `cardFolderReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern*: The code base uses JavaFX\u0027s https://docs.oracle.com/javase/8/javafx/api/javafx/beans/value/ObservableValue.html[`ObservableValue`] interface to allow objects to watch for changes in data."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "This interface is an implementation of the Observer pattern."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Objects that are interested in changes to an `ObservableValue` can register a listener via `ObservableValue#addListener(...)`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "When the value represented by the `ObservableValue` changes, it will notify all registered listeners."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `CardListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "-": 269
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d Know-It-All - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w10-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "By: `CS2103-AY2018/19s2-W10-4 Team`      Since: `Mar 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "// tag::introabout[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*Know-It-All* is a flashcard application that helps users store and organise their learning material. With an easy to use interface and a storage solution that supports content sharing, *Know-It-All* is designed to help students perform rote learning more efficiently. From cramming in between lessons to focused study, the in-built test session boosts the effectiveness of repetition and recall for memorisation. *Know-It-All* targets medicine students as their studies involve a considerable amount of memory work, and deals with content that is suitable for the bite-sized flashcard format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d How To Use This Guide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Welcome to the *Know-It-All* User Guide! This document will equip you with what you need in order to use `v1.4` of the application. While some familiarity with command line programs will come in handy, simply adhere to the command formats specified in this guide closely and the rest will be a breeze."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Look out for the following icons and formatting used!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "NOTE: Important information that should be noted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Information in a box like this represents additional useful information for a deeper understanding of this command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Without further ado, let\u0027s head over to \u003c\u003cQuick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "// end::introabout[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "// tag::quickstart[]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".  Ensure that you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".  Download the latest `know-it-all.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for *Know-It-All*."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".  Some commands you can try:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* *`change`* `1` : enter the 1st flashcard folder"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* *`list`* : lists all flashcards in the current folder"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* **`add`**`q/How many chambers are there in a heart? a/Four` : adds a new flashcard to the current folder."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* **`delete`**`3` : deletes the 3rd flashcard shown in the current folder"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "// end::quickstart[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Commands are written in monospaced font, e.g. `sort`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `addfolder FOLDER_NAME`, `FOLDER_NAME` is a parameter which can be used as `add Human Anatomy`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Items in square brackets are optional e.g HINTS in `add q/QUESTION a/ANSWER [h/HINTS]`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `q/QUESTION a/ANSWER`, `a/ANSWER q/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d Card Operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Commands listed in this section affect the \u003c\u003cflashcard, flashcards\u003e\u003e within a single \u003c\u003cfolder, folder\u003e\u003e."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "The commands in this section can only be executed when you are within a folder"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "The commands in this section are also not valid inside a test or report session."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a flashcard : `add`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Adds a flashcard to the current folder. Know-It-All supports 2 types of flashcards: **Single answer cards** and **MCQ** cards."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format **(Single answer)**: `add q/QUESTION a/ANSWER [h/HINT]` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format **(MCQ)**: `add q/QUESTION a/ANSWER [i/INCORRECT_OPTION]... [h/HINT]`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* A card can have at most 1 hint (including 0)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* If multiple hints are included in the command, only the last hint will be added to the card."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* The question, answer, incorrect option, and hint fields can take any character."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* A card can have any number of incorrect options to denote an MCQ card."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* A card with 0 incorrect options will automatically be denoted as a Single answer card."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `add q/Hello? a/World`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `add q/The cat ___ on the mat a/sat h/poetry`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `add q/What is the powerhouse of the cell? a/mitochondria i/cell wall i/nucleus h/biology`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `add q/The Hippocrates Oath states to Do no ___? a/harm h/4 letters h/Rhymes with farm` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Creates a card with `hint` \"Rhymes with farm\"."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "**Adding Fill-In-The-Blanks style card** `Coming in v2.0`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Allows the user to add a card with blanks for multiple answers to be given during a test session. Questions for such cards would include underscores \"_\", each signifying a blank to be filled with an answer."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format: ``add q/QUESTION_WITH_BLANKS a/ANSWER_1/ANSWER_2/ANSWER_3...`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "`add q/The quick brown _ jumps over the lazy _. a/fox/dog`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "**Adding images to cards** `Coming in v2.0`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Allows the user to add images to cards to supplement the text content of the card."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format: `add q/QUESTION a/ANSWER [img/IMAGE_FILE_PATH]...`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "`add q/Hello? a/World img/diagram.jpg`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a flashcard : `edit`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Edits the flashcard specified by the \u003c\u003cindex, index\u003e\u003e in the current folder."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format: `edit INDEX [q/QUESTION] [a/ANSWER] [h/HINT]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* Edits the card at the specified `INDEX`. The index refers to the index number shown in the displayed card list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* **(MCQ cards)** When editing incorrect options, the existing incorrect options of the card will be removed i.e adding of options is not cumulative."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* You can remove the card\u0027s hint by typing `h/` without specifying any hint after it."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* If multiple hints are specified, only the last hint input will be selected to replace the existing hint."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `edit 1 a/Skin h/` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Edits the answer of the 1st card to be \u0027Skin\u0027 and removes the hint associated, if any."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `edit 2 h/history q/Who discovered Penicillin? a/Alexander Fleming` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Edits the hint, question and answer of the 2nd card respectively."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `edit 3 h/cells h/biology h/organs` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Replaces the hint of the current card with \"organs\" only."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a flashcard : `select`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Displays flashcard details (question, answer, hint, card score) on the right panel on selection by index."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Selects the 2nd card in the current folder"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a flashcard : `delete`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Deletes the flashcard identified by index from the current folder."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* Deletes the card at the specified `INDEX`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* The index refers to the index number shown in the displayed card list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Deletes the 2nd card in the address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlqs"
        },
        "content": "//tag::sortcommand[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Sort flashcards by score within a folder : `sort`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Displays all flashcards sorted such that the lowest \u003c\u003ccardscore, card scores\u003e\u003e are at the top temporarily."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dlqs"
        },
        "content": "//end::sortcommand[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Search by keywords : `search`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Within a folder, searches for flashcards inside the current folder using keywords in flashcard questions."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Format: `search KEYWORDS [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d List flashcards : `list`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Display a list of the flashcards in the current folder, where only questions can be seen, answers are hidden."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* This command is implicitly invoked upon entering a folder, and can be used to reset the view after search or sort."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Restores the cards in a particular card folder to the state before the previous _undoable_ command was executed."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* This command is performed with respect to the present folder you are in. For example, if you perform an `add` operation in folder A and enter folder B, invoking the `undo` command will undo the previous _undoable_ command performed in folder B and not the aforementioned `add` operation."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Undoable commands: commands that modify a card folder\u0027s content (`add`, `delete` and `edit`)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Reverses the most recent `undo` command performed in a folder."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* As with the `undo` command, this command is performed with respect to the present folder you are in. For example, if you perform an `undo` operation in folder A and enter folder B, invoking the `redo` command will redo the previous `undo` command performed in folder B and not the one in folder A."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Exit folder : `change ..`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Return to the root directory (exit the current folder). A list of folders will be displayed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Format: `change ..`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `change 2` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "`change ..` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The first command enters the second folder in the folder list on the \u003c\u003chomedirectory, home directory\u003e\u003e. The second command then returns you back to the home directory by exiting the folder."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "//tag::folderoperations[]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d Folder Operations"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Commands listed in this section affect the application and not a single folder."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "The commands in this section can only be executed when you are at the home directory, outside of any folder"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "The commands in this section are also not valid inside a test or report session."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Create new folder : `addfolder`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Creates a new flashcard folder with the specified name."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format: `addfolder FOLDER_NAME`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* The newly created folder will not contain any cards."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Folder names must be unique and non-blank. Attempting to add a folder with the same name as an existing folder will result in an error."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Each folder and its cards are stored independently in the directory specified in `preferences.json`. By default, this is the `data/` directory."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `addfolder Nervous System` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Creates a folder with the name \"Nervous System\". The user can then enter the folder with the `change` command and begin adding cards."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Remove folder : `deletefolder`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Removes the flashcard folder specified by index."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Format: `deletefolder FOLDER_INDEX`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* When a folder is deleted, all its cards are removed as well."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `deletefolder 2` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Deletes the second folder in the folder list, along with its cards, on the home directory."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Rename folder : `editfolder`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Renames the flashcard folder specified by index."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Format: `editfolder FOLDER_INDEX NEW_FOLDER_NAME`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* The new name of the folder cannot be the same as an existing folder."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `editfolder 2 Circulatory System` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Renames the second folder in the folder list to \"Circulatory System\"."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Enter folder : `change`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Enters the folder specified by index. Panel on the left will display the list of cards in that folder."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format: `change FOLDER_INDEX`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* `change 2` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Enters the second folder in the folder list on the home directory."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "**Merge folders feature** `Coming in v2.0`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "This feature will enable users to join multiple folders together, reducing the number of folders and grouping two topics."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Format: `merge FOLDER_INDEX_1 FOLDER_INDEX_1 NEW_FOLDER_NAME`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "//end::folderoperations[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dlqs"
        },
        "content": "//tag::advancedoperations[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Export flashcards : `export`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Exporting flashcards is a great way to start sharing your flashcards with others."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dlqs"
        },
        "content": "The export command creates a csv file containing the flashcards from the specified folder in your project root"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dlqs"
        },
        "content": "directory."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Format: `export FOLDER_INDEX FILENAME [MORE_INDEXES]`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yichong96"
        },
        "content": "IMPORTANT: The export command creates the new csv file in your project root directory."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yichong96"
        },
        "content": "i.e The directory where your .jar file is located. +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The `import command` imports csv files located in the same directory as well."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dlqs"
        },
        "content": "image::project_root_dir.png[width \u003d\"800\"]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dlqs"
        },
        "content": "NOTE: The current version does not support the importing and exporting of files outside of this directory"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* You should key in indices corresponding to the folder index"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* Negative numbers are not allowed"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* `export 1 2 3` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dlqs"
        },
        "content": "exports the first, second and third cardfolder in your home directory."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Suppose that the first, second and third cardfolder corresponds to the card folder names : +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dlqs"
        },
        "content": "`Blood` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dlqs"
        },
        "content": "`Circulatory System` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dlqs"
        },
        "content": "`Cardiovascular` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Then the following files `Blood.csv`, `Circulatory System.csv` and `Cardiovascular.csv`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dlqs"
        },
        "content": "will be created in the project root directory."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d Import flashcards : `import`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Besides being able to import flashcards exported by others, the import command provies a faster way of"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dlqs"
        },
        "content": "creating multiple flashcards."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dlqs"
        },
        "content": "You type your flashcards out on excel and later save it in your project root directory, allowing you"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dlqs"
        },
        "content": "to import it over to your application."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yichong96"
        },
        "content": "NOTE: The csv file imported should follow the format described below"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* The first row of the csv file should have the following headers:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yichong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Question, Answer, Options, Hints."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* Question and Answer are mandatory fields, and should not be left blank."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* Hints can take 0 or 1 values only."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* For MCQ cards, The csv file only accepts one incorrect option for each flashcard."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yichong96"
        },
        "content": ".Sample format for csv file"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yichong96"
        },
        "content": "image::Blood.png[width \u003d \"800\"]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Format: `import FILENAME`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yichong96"
        },
        "content": "NOTE: unlike the `export command` the importing of multiple csv files"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yichong96"
        },
        "content": "is not supported in Know-It-All."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* `import Blood.csv` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Imports blood csv file into know-it-all. A new `Blood` cardfolder should be present in the home"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dlqs"
        },
        "content": "directory after execution of this command."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dlqs"
        },
        "content": "// end::advancedoperations[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "//tag::testoperations[]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d Test Operations"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "After memorising the content of the flashcards, it is helpful to test how much information have been internalised and retained in a timed setting. The following commands show just how this can be done with the \u003c\u003ctestsession, Test Session\u003e\u003e functionality of *Know-It-All*."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Test flashcards in a folder : `test`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "You will enter a test session, where the display area enters a fullscreen and you will be presented flashcard questions"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " one by one. (see Figure 2 below)."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".A successful test command will display a test session page"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::startTestSessionPage.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Format: `test`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This command is only considered valid when inside the folder to be tested and is not already inside a test session."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This command is invalid if the current folder is empty as there will be no flashcards to test."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Hints will be presented along with the questions."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* When presented with a question in a test session, you can either input an attempt or enter the command to reveal the"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "answer."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* For **MCQ cards**, the ordering of options will be randomized each time the flashcard is tested."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* Internally, flashcards in a folder are queued to be displayed one by one in the order of lowest existing score to highest existing score."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* The next flashcard will only be presented when the next command is carried out."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `test`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "**Hint toggle on / off feature** `Coming in v2.0`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If you are familiar with the content and feeling confident,"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "simply toggle off hints during the test session. You can do it by specifying ‘-nohint’ at the end of the"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "test command. Hint will not be displayed along with the question when the card is presented."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Format: `test [-nohint]`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "**Timer feature** `Coming in v2.0`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If you are preparing for an exam that will require you to recall information quickly within the limited time given,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "this timer feature is just right for you! You will be given only 20 seconds to answer each question. If the 20 seconds is up before the question is answered, this attempt will be marked as wrong."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Format: `test [-timer]`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d\u003d\u003d Keying in answer to a flashcard: `ans`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "To reinforce learning and provide a more engaging experience with Know-It-All, you can input an answer for the"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "currently displayed flashcard question. Know-It-All compares your attempt with the correct answer for that flashcard and"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "tells you if you are right or wrong."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If the answer has been submitted successfully and it is correct, you will see the following page (see Figure 3)."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".Correct Answer page"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::CorrectAnswerPage.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If the answer has been submitted successfully and it is wrong, you will see the following page (see Figure 4)."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".Wrong Answer page"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::WrongAnswerPage.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format: `ans ANSWER`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This command is only considered valid if a card question is currently being"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "displayed in an active test session."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Answer matching is case insensitive."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Answering a flashcard will increase the total number of attempts. If your answer is correct, this action will also"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "increase the number of correct attempts."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* To answer **MCQ cards**, enter the number of option that you think is correct, rather than the option itself. +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "E.g. `ans 1` rather than `ans myanswer`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* `ans Mitochondrion` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "in response to the card question: What is the powerhouse of the cell?"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* `ans 4` +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "in response to the card displayed below, where choosing option 4 will give the right answer."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".Answering an MCQ card"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::AnsweringMcqCard.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "//end::testoperations[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d Reveal answer to a flashcard : `reveal` `Coming in v1.4`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "If you have no clue what the answer is, this command immediately reveals the correct answer. You will not need"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "attempt any answer before being presented the correct answer."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Format: `reveal`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This command is only considered valid if a card question is currently being displayed in an active test session."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* This is equivalent to a wrong answer, so there is no addition to the correct attempts of this card."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d Go to next flashcard : `next`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "You will be presented with the next lowest scoring flashcard in this current test session. Upon a successful next"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "command, you should see a similar page below (see Figure 5)."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".Next card question displayed upon a successful next command"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::NextCommandPage.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Format: `next`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This command is only considered valid if a card question and answer is currently being displayed  (has already done answering the question or revealed the answer) in an active test session. In other words, a flashcard cannot be skipped."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* If all cards have already been tested, a next command will be equivalent to an end command, ending the current test"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " session."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* There is no backtracking in the current session so there is no `prev` command."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "dlqs"
        },
        "content": "[[EndCommand]]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d End the current test session : `end`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Quits the current test session and you will be back inside the card folder (see Figure 6 below)."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ".A successful end command brings you back to inside the folder"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "image::EndCommandPage.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Format: `end`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "dlqs"
        },
        "content": "//tag::reportoperations[]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d Report Operations"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "dlqs"
        },
        "content": "After testing, you can track your how you scored against previous attempts using our report feature. Because cards"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "dlqs"
        },
        "content": "about a particular topic are expected to be in the same folder, the \u003c\u003cfolderscore, folder scores\u003e\u003e are tracked per folder."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d Display a folder score report : `report`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Displays a full-screen \u003c\u003cfolderscore, folder score\u003e\u003e report for the current folder."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dlqs"
        },
        "content": "The report comprises a graph showing the last 10 \u003c\u003cfolderscore, folder scores\u003e\u003e,"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dlqs"
        },
        "content": "the latest score change, and the top 3 lowest scoring cards and their individual \u003c\u003ccardscore, card scores\u003e\u003e."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "dlqs"
        },
        "content": "An example is shown below:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "dlqs"
        },
        "content": ".Report display"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "dlqs"
        },
        "content": "image::ReportDisplay.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Format: `report`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "dlqs"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "dlqs"
        },
        "content": "This command is only valid inside a folder."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "dlqs"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "dlqs"
        },
        "content": "There must be at least two test attempts for a graph to be drawn."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d\u003d End the current report session : `end`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Quits the current report session."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Format: `end`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "dlqs"
        },
        "content": "//end::reportoperations[]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d\u003d Global operations"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "dlqs"
        },
        "content": "These commands are valid from anywhere in the application."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Opens the User Guide in a new window."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "//tag::glossarycmdsummary[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* [[flashcard]] **Flashcard/Card**: An object containing a single question and answer, and optionally hints."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* [[folder]] **Folder**: A collections of flashcards, grouped topically. There are no"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "sub-folders."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* [[testsession]] **Test Session**: A session where all flashcards in a folder are queued to have their"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "questions displayed. The user is required to key in an answer for each question."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* [[cardscore]]  **Card Score**: The number of correct answers divided by the number of attempts for a single card. When the user is tested on a card,"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "dlqs"
        },
        "content": "this number is automatically calculated and recorded."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* [[folderscore]] **Folder Score**: The average of all \u003c\u003ccardscore, card scores\u003e\u003e in a folder after a test session. This number is automatically recorded after each test session."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* [[homedirectory]] **Home Directory**: The home page where all the folders are listed. From here, users can enter folders to view cards."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* [[index]] **Index**: The unique number associated with an item in a list. The first item in a list has an index of 1."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|Command | Summary"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`add q/QUESTION a/ANSWER [h/HINT]` | Adds a flashcard to the current folder."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`edit i/INDEX [q/QUESTION] [a/ANSWER] [h/HINT]` | Edits the flashcard specified by the index in the current folder."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|`select INDEX` | Displays flashcard details (question, answer, hint, card score) on the right panel on selection by index."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`delete INDEX` | Deletes the flashcard identified by index from the current folder."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`sort` | Displays all flashcards sorted such that the lowest scoring cards are at the top temporarily."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "|`search KEYWORDS [MORE_KEYWORDS]` | Searches for flashcards inside the current folder using keywords in flashcard questions."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`list` | Display a list of the flashcards in the current folder"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|`report` | Display a folder score report for the current folder"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`undo` | Undoes the previous undoable command."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`redo` | Redoes the last `undo`."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`change ..` | Return to the root directory (exit the current folder). A list of folders will be displayed."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`change FOLDER_INDEX`|Enters the folder specified by index. Panel on the left will display the list of cards in that folder."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`addfolder FOLDER_NAME` | Creates a new flashcard folder with the specified name."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`deletefolder FOLDER_INDEX` | Removes the flashcard folder specified by index."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`editfolder FOLDER_INDEX NEW_FOLDER_NAME`| Renames the flashcard folder specified by index to the new name specified."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "|`test` | This command begins a test session, where the display area enters a fullscreen."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`ans ANSWER` | Enter answer for a flashcard."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`reveal` | Immediately reveals the correct answer."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`next` | Presents the next lowest score flashcard in this current test session."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|`end` | Quits the current test session or report display."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|`search KEYWORDS [MORE_KEYWORDS]` | Searches for flashcards inside the current folder using keywords in flashcard questions."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yichong96"
        },
        "content": "|`import FILENAME` | Imports a file with the specified name. Filename must include .csv extension"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yichong96"
        },
        "content": "|`export FOLDER_INDEX FILENAME [MORE_INDEXES]` | Creates a csv file containing the flashcards from the specified folder, which can later be imported."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|`help` | Opens the User Guide in a new window."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|`exit` | Exits the application."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "//end::glossarycmdsummary[]"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 158,
      "yichong96": 17,
      "dlqs": 96,
      "-": 164,
      "mmdlow": 63,
      "KerrynEer": 161
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ". Enter an arbitrary description e.g. cardfolder"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "b"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "-": 40
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Runs all tests in the `seedu.knowitall.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Runs all non-GUI tests in the `seedu.knowitall`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 111
    }
  },
  {
    "path": "docs/team/auliangjun.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d Au Liang Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d PROJECT: Know-It-All"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "Know-It-All is a flashcard application that helps users store and organise their learning material. With an easy to use interface and a storage solution that supports content sharing, Know-It-All is designed to help students perform rote learning more efficiently. From cramming in between lessons to focused study, the in-built test session boosts the effectiveness of repetition and recall for memorisation. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* *Major enhancement*: added *the ability to have flashcard folders*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** What it does: allows the user to create folders that store separate sets of flashcards. Folders can be renamed and deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Justification: This feature allows the user to logically group flashcards of the same topic together, separate from flashcards of other topics. This significantly improves the product as it enables better organisation, which is crucial for efficiency and ease of use."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Highlights: The enhancement affected all components extensively. For some components, the architecture had to be redesigned, and the multiple options to do so had to be carefull considered and assessed. The implementation was also challenging due to the tightly coupled nature of classes within each component, and the inherent and widespread changes to architecture required a deep understanding of how every component worked."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dafterdusk[Collated code]]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from ____% to ____% (Pull request https://github.com/cs2103-ay1819s2-w10-4/main/pull/104[#104])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*** Created GitHub organisation and team repository, issue labels, milestones and https://github.com/cs2103-ay1819s2-w10-4/main/projects/1[project board]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*** Managed and tagged milestones `v1.1` to `v1.2`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*** Introduced an about section and populated the command summary and glossary sections in the User Guide. Also revised the format of the User Guide to be more consistent (Pull request https://github.com/cs2103-ay1819s2-w10-4/main/pull/90[#90])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*** Wrote user stories to set project requirements, which were eventually ported over to the Developer Guide and GitHub issues (Pull request https://github.com/cs2103-ay1819s2-w10-4/main/pull/53[#53])."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*** Contributed to use cases (Pull request https://github.com/cs2103-ay1819s2-w10-4/main/pull/104[#104])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*** Performed the initial refactoring of code to flashcard context (Pull requests https://github.com/cs2103-ay1819s2-w10-4/main/pull/37[#37])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "*** Integrated a GitHub plugin (Netlify) to the team repo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintroabout]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfolderoperations]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "include::../UserGuide.adoc[tag\u003dglossarycmdsummary]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfolders]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfolderusecases]"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 60
    }
  },
  {
    "path": "docs/team/donaldlee.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d Donald Lee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d PROJECT: Know-It-All"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Know-It-All is a flashcard application that helps students manage, store, and use flash cards effectively. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "My major roles included the report feature and ability to record score."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|_Below is a summary of my coding, documentation, and other helpful contributions to the team project._"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* *Major enhancement*: added the *ability to generate scoring report for card folder*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** What it does: Averages the card scores of all cards in the folder after a test session, called the folder score, and generates a report for that folder that shows the change in past folder scores."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "There is also a line showing percentage change in folder score as well as the lowest scoring questions in the current folder. An example is shown below."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "image::ReportDisplay.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Justification: This feature improves the product significantly because a user can see the outcome of the spaced-repetition technique employed by Know-It-All. They are able to track their average score over time, per folder, so that"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "they are able tell which folders they score well and not so well for. This lets them know which folder they need to practice more on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Highlights: This enhancement has a graph showing the last 10 test session scores. The color of the folder score change"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "also changes based on whether it was a positive, same or negative change."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* *Major enhancement*: added *the ability to sort by scoring performance*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** What it does: allows the user to sort the cards by scoring performance. Other features can make use of this feature by using any appropriate comparator."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Justification: This lets the user see which cards they scored the lowest on, so that they know which cards require more practice."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "This feature also improves the product significantly because many other features can be built on top of this one, e.g. the test session, which puts the lowest scoring cards in front."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Highlights: This enhancement affects the existing list. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changing the way cards are naturally ordered."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* *Minor enhancement*: Added State to Model Component\u0027s to represent user\u0027s \"location\" in the application. This removes edge cases of commands being executed illegally, i.e. where they otherwise shouldn\u0027t be."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* *Minor enhancement*: added a score attribute that allows the application to track the number of correct and incorrect attempts for individual cards."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* *Code contributed*: [https://github.com/cs2103-ay1819s2-w10-4/main/pull/75[ability to sort]] [https://github.com/cs2103-ay1819s2-w10-4/main/pull/46[add score attribute]][https://github.com/cs2103-ay1819s2-w10-4/main/pull/97[add report]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlqs"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*** Wrote additional tests for new features to increase coverage from 80% to 82% (Pull requests https://github.com/cs2103-ay1819s2-w10-4/main/pull/75[#75])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*** Rewrote the project README to look like a real product: https://github.com/cs2103-ay1819s2-w10-4/main/pull/107[#107]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/cs2103-ay1819s2-w10-4/main/pull/57[#57], https://github.com/cs2103-ay1819s2-w10-4/main/pull/49[#49], https://github.com/cs2103-ay1819s2-w10-4/main/pull/72[#72], https://github.com/cs2103-ay1819s2-w10-4/main/pull/129[#129]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlqs"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlqs"
        },
        "content": "*** Integrated Github plugins Travis CI, AppVeyor and Coveralls to the team repo: https://github.com/cs2103-ay1819s2-w10-4/main/pull/2[#2]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlqs"
        },
        "content": "I implemented a new report command as well as sort command, which required updates to the user guide so that new users"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlqs"
        },
        "content": "know how to use it."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlqs"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreportoperations]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlqs"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsortcommand]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlqs"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlqs"
        },
        "content": "Besides the aforementioned new features for users, I also refactored internal code which affects how other developers should contribute"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlqs"
        },
        "content": "to the project, namely how to pass results from Model into Ui and Model state that the user is in."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlqs"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreport]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlqs"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstate]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlqs"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreportusecase]"
      }
    ],
    "authorContributionMap": {
      "dlqs": 77
    }
  },
  {
    "path": "docs/team/kerryneer.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d Kerryn Eer - Project Portfolio for Know-It-All"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "I worked in a team of 5 for a software engineering project to morph a basic command line interface addressbook into a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "flashcard management application called Know-It-All. Know-It-All is designed to help medical students store, organise"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "and share their learning material, integrated with a test session feature and scoring system to allow for a more efficient rote learning process."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "My role was to design and implement the test session feature. The following sections illustrate this major feature in more detail."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Note the following icons and formatting used in this document:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "NOTE: This symbol indicates important information related to this section."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "`test`: A grey highlight (called a mark-up) indicates that this is a command to be executed or a component, class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "or object in the architecture of the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Information in a box like this represents additional useful information related to this section."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*Feature implemented*: I implemented the functionalities of a test session."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* What it does: This allows users to  begin and end a test session. While inside a test session, flashcard questions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "will be presented and student can input an answer or choose to reveal the answer before moving on to the next flashcard."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Justification: This feature is the main highlight of Know-It-All, as students use flashcards to test how"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "much content they have memorised. Equipped with the user friendly answer command that is missing in existing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "flashcard applications, Know-It-All provides a more engaging and interactive testing experience for the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Highlights: This feature modifies the existing UI to facilitate the addition of a new test session screen. It also"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "has a heavy dependency on folder methods. Hence, this feature required an in-depth analysis of design alternatives,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "considering design patterns and principles as well as the user-friendliness of the commands."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "More details can be found under design considerations sections of \u003c\u003ccontributionstodevguide\u003e\u003e."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Implementation and writing tests were also tedious as many checks of the current state of the test session needs to be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "done to permit only certain commands and ban others."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dkerryneer[Collated code]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "*Other contributions*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Enhancements to features:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Wrote additional tests for new features to increase coverage from 79% to 81% (Pull requests https://github.com/cs2103-ay1819s2-w10-4/main/pull/74[#74])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** User guide: I updated the QuickStart section, added new features, remove previous addressbook features and modify"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "existing commands (Pull requests https://github.com/cs2103-ay1819s2-w10-4/main/pull/60[#60], https://github.com/cs2103-ay1819s2-w10-4/main/pull/59[#59], https://github.com/cs2103-ay1819s2-w10-4/main/pull/80[#80],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "https://github.com/cs2103-ay1819s2-w10-4/main/pull/106[#106], https://github.com/cs2103-ay1819s2-w10-4/main/pull/127[#127])"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Developer guide: I updated relevant sections related to addressbook to our Know-It-All flashcard context"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "like Product scope and Non-Functional Requirements, some of its class diagrams and sequence diagrams, and added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "implementation for test session (Pull requests https://github.com/cs2103-ay1819s2-w10-4/main/pull/80[#80],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "https://github.com/cs2103-ay1819s2-w10-4/main/pull/106[#106])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** About Us page: I collated and updated profiles for all members of the team. (Pull requests https://github.com/cs2103-ay1819s2-w10-4/main/pull/6[#6],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "https://github.com/cs2103-ay1819s2-w10-4/main/pull/127[#127])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** PRs reviewed (with non-trivial review comment):"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "https://github.com/cs2103-ay1819s2-w10-4/main/pull/65[#65] (suggested another method of implementation),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "https://github.com/cs2103-ay1819s2-w10-4/main/pull/46[#46] (explained why travis CI was failing)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "** Conducted manual testing, reported bugs and offered suggestions for our team: https://github.com/cs2103-ay1819s2-w10-4/main/issues/117[#117], https://github.com/cs2103-ay1819s2-w10-4/main/issues/119[#119],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "https://github.com/cs2103-ay1819s2-w10-4/main/issues/120[#120], https://github.com/cs2103-ay1819s2-w10-4/main/issues/121[#121], https://github.com/cs2103-ay1819s2-w10-4/main/issues/123[#123], https://github.com/cs2103-ay1819s2-w10-4/main/issues/124[#124],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "https://github.com/cs2103-ay1819s2-w10-4/main/issues/125[#125]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "We had to update the original addressbook User Guide with instructions for Know-It-All enhancements that we"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "had added. The following is an excerpt from our updated Know-It-All User Guide, showing additions that I have made for"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "the test session feature."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtestoperations]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "[[contributionstodevguide]]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "Besides updating the original addressbook User Guide, Developer Guide has to be updated to Know-It-All context and"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "features as well. The following section is an excerpt from our updated Know-It-All Developer Guide about the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "implementation details and design considerations for the test session feature."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestcommand]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestcommanddesign]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KerrynEer": 87
    }
  },
  {
    "path": "docs/team/matthewlow.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d Matthew Low - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d PROJECT: Know-It-All"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Know-It-All is a flashcard application developed as a software engineering project by a team of 5, including myself. The base application was originally an addressbook application, and my team was given the choice of either enhancing its current features, or morphing the application to suit a different purpose. We chose the latter path, which resulted in the current iteration of Know-It-All."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "Our application aims to assist students in their learning by proving them with an easy-to-use digital flashcard management system to create and review their own flashcards. Through components such as the in-built test session and report feature, users can learn more effectively and review their performance. Interaction is primarily done via a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "My role involved the restructuring of the `model` and `logic` components of the original addressbook application, as well as implementing flashcard creation and management for Know-It-All. A more detailed breakdown of my contributions are detailed below, together with my additions to the user and developer guides."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* *Major enhancement*: implemented *flashcard creation and management*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** What it does: Allows users to create, edit and delete different kinds of flashcards."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Justification: This is a core feature of the project, as users will be spending a large portion of their time interacting with the flashcards they have created or imported."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*** Users can create 2 different types of flashcards, Single-answer cards and MCQ cards. This provides greater versatility in how users choose to structure their learning material through the flashcards."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*** Users can easily convert between both types of cards by simply adding or removing MCQ options."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*** Users have the option to include a hint for each flashcard."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* *Minor enhancement*: implemented *testing for MCQ cards*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** What it does: For MCQ card test, allows users to input a number corresponding to the options available for an MCQ card, instead of having to input the entire answer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Justification: Provides greater flexibility in the way users can interact with test sessions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Highlights: MCQ card options are randomized every time the card is tested, thus preventing users from simply memorizing the correct option number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* *Minor enhancement*: updated *UI display for cards within card folders and for tests*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** What it does: Changed the display of the side panel for cards within card folders to display all card information to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*** For card folders, the side panel shows users all necessary information of a card at a glance whenever users select a card."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "image:Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*** For test sessions, only relevant information is shown at the start for each card. The correct answer is displayed only after a user inputs an answer."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "image:AnsweringMcqCard.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*** In a test session, the card color changes to reflect if a user has answered correctly or not. Green signifies a correct answer, while red signifies a wrong answer."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "image:ExampleMcqTest.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dmmdlow[Collated code]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*** Wrote additional tests for new and existing features: https://github.com/cs2103-ay1819s2-w10-4/main/pull/100[#100], https://github.com/cs2103-ay1819s2-w10-4/main/pull/110[#110]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/cs2103-ay1819s2-w10-4/main/pull/54[#54], https://github.com/cs2103-ay1819s2-w10-4/main/pull/73[#73]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcards]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcardusecases]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dglossary]"
      }
    ],
    "authorContributionMap": {
      "mmdlow": 80
    }
  },
  {
    "path": "docs/team/ongyichong.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d Ong Yi Chong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d PROJECT: Know-It-All"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": "My team and I were tasked with enhancing a basic command line interface addressbook for our"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": "Software Engineering project. We chose to morph it into an desktop flashcard application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": "called Know-It-All. This enhanced application helps students organize their digital flashcards neatly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": "The application also comes with a test feature; allowing users to test themselves on the flashcards"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": "created, a report feature; allowing them to view their performance for each folder and a import and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": "export feature; which allows for the sharing of flashcards."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": "My role was to design and write the codes for the import and export features. The following sections"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yichong96"
        },
        "content": "illustrate these enhancements in more detail, as well as the relevant sections I have added to the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yichong96"
        },
        "content": "user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* *Major enhancement*: added *the ability to import/export existing or new flashcards*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** What it does: The import and export command allows users to import and export flashcards as csv files."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Justification: This feature improves the product significantly because users can now share their flashcards with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "others. The ability to import flashcards also provides a faster alternative to creating multiple flashcards in comparison"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": "to manually adding within the app iteself."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Highlights: Although not technically challenging, there were many considerations that went into the design of the import/export feature. One of them was deciding"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": "the formatting of csv files. whether a user should be able to export multiple card folders into a single csv. Also, since commas"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": "were used within each card field as well, there was a need to ensure that the comma separated values are actually not"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": "part of the \"commas\" within the card field itself."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dyichong96[Collated code]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yichong96"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 78.379% to 81.079 (Pull requests https://github.com[#105])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yichong96"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yichong96"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/cs2103-ay1819s2-w10-4/main/pull/60[#60], https://github.com/cs2103-ay1819s2-w10-4/main/pull/2[#2]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yichong96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yichong96"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "include::../UserGuide.adoc[tag \u003d advancedoperations]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yichong96"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yichong96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yichong96"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yichong96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yichong96"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimportexport]"
      }
    ],
    "authorContributionMap": {
      "yichong96": 64
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.LogicManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.CardFolderStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.JsonCardFolderStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CardFolder ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCardFolderStorage\u003e cardFolderStorageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Path cardFolderFilesPath \u003d userPrefs.getcardFolderFilesPath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        boolean withSample \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (Files.isDirectory(cardFolderFilesPath)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Stream\u003cPath\u003e stream \u003d Files.walk(cardFolderFilesPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (stream !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                stream.filter(Files::isRegularFile)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                      .forEach(file -\u003e cardFolderStorageList.add(new JsonCardFolderStorage(file)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (cardFolderStorageList.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            logger.info(\"Folders not found. Will be starting with a sample CardFolder\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Path samplePath \u003d cardFolderFilesPath.resolve(SampleDataUtil.getSampleFolderFileName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            cardFolderStorageList.add(new JsonCardFolderStorage(samplePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            withSample \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        storage \u003d new StorageManager(cardFolderStorageList, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (withSample) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            model \u003d initModelManagerWithSample(userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s card folder and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * All folders in valid formats that are found will be read. If none are found, the data from the sample card folder"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * will be used instead."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e initialCardFolders;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        initialCardFolders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // read all valid card folders"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            storage.readCardFolders(initialCardFolders);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (e instanceof DataConversionException) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                logger.warning(\"Data file not in the correct format.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            } else if (e instanceof IOException) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                logger.warning(\"Problem while reading from the file.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                logger.warning(\"Unknown error while reading from file.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // if no card folder is valid, then start with a sample one."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (initialCardFolders.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            logger.warning(\"No CardFolders read. Will be starting with a sample CardFolder\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return initModelManagerWithSample(userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new ModelManager(initialCardFolders, userPrefs);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns a {@code ModelManager} with data from the sample card folder."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Model initModelManagerWithSample(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e sampleCardFolders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        sampleCardFolders.add(SampleDataUtil.getSampleCardFolder());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new ModelManager(sampleCardFolders, userPrefs);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void initLogging(Config config) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CardFolder\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        logger.info(\"Starting CardFolder \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping card folder ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 65,
      "dlqs": 23,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String LOG_FILE \u003d \"cardfolder.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same question"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "dlqs": 1,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_INVALID_FOLDER_DISPLAYED_INDEX \u003d \"The card folder index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_CARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN \u003d \"This command is not valid outside a test\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            + \" or report\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_INVALID_ANSWER_COMMAND \u003d \"Answer command is valid only when a question is \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            + \"displayed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_INVALID_REVEAL_COMMAND \u003d \"Reveal command is valid only when a question is \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            + \"displayed\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_NO_NEGATIVE_INDEX \u003d \"Negative index not allowed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_ON_EMPTY_FOLDER \u003d \"This command is not valid on an empty\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            + \" folder\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_INVALID_NEXT_COMMAND \u003d \"Next command is valid only when this question has been\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            + \" answered\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER \u003d \"Command can only be executed in folder\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_INSIDE_FOLDER \u003d \"Command can only be executed in home directory\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String MESSAGE_ILLEGAL_OPTION_CANNOT_BE_SAME_AS_ANSWER \u003d \"Incorrect MCQ options cannot be same\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + \" as the correct answer\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_CSV_MANAGER_NOT_INITIALIZED \u003d \"Unable to carry out import and export commands\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_INCORRECT_CSV_FILE_HEADER \u003d \"Incorrect Csv file headers. Check that the\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"csv file contains question,answer,options,hints header\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_EMPTY_CSV_FILE \u003d \"Empty csv file!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "yichong96": 5,
      "dlqs": 3,
      "-": 9,
      "KerrynEer": 11,
      "mmdlow": 2
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public String displayIndex() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return Integer.toString(getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 5,
      "dlqs": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Deletes given file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void deleteFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Files.delete(file);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 7,
      "dlqs": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/util/InvalidationListenerManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.VersionedCardFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the CardFolder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @see seedu.knowitall.model.Model#getActiveCardFolder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ReadOnlyCardFolder getCardFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cards */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCards();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered folders list */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ObservableList\u003cVersionedCardFolder\u003e getFilteredCardFolders();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the user prefs\u0027 card folder file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Path getcardFolderFilesPath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Selected card in the filtered card list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * null if no card is selected."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @see seedu.knowitall.model.Model#selectedCardProperty()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ReadOnlyProperty\u003cCard\u003e selectedCardProperty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the selected card in the filtered card list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @see seedu.knowitall.model.Model#setSelectedCard(Card)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void setSelectedCard(Card card);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 14,
      "dlqs": 11,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.VersionedCardFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private final CommandParser commandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private boolean cardFolderModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private boolean modelModified;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Add listeners to all card folders and the model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        addCardFolderListeners(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Set modelModified whenever the models\u0027 card folders are modified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.addListener(observable -\u003e modelModified \u003d true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderModified \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelModified \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            Command command \u003d commandParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (cardFolderModified) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            logger.info(\"card folder modified, saving to file.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                storage.saveCardFolder(model.getActiveCardFolder(), model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (modelModified) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            logger.info(\"model is modified, saving to file\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                List\u003cReadOnlyCardFolder\u003e cardFolders \u003d model.getCardFolders();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Path path \u003d model.getcardFolderFilesPath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                storage.saveCardFolders(cardFolders, path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            // re-register listeners to all card folders"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            addCardFolderListeners(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ReadOnlyCardFolder getCardFolder() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return model.getActiveCardFolder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCards() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return model.getFilteredCards();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ObservableList\u003cVersionedCardFolder\u003e getFilteredCardFolders() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return model.getFilteredFolders();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Path getcardFolderFilesPath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return model.getcardFolderFilesPath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ReadOnlyProperty\u003cCard\u003e selectedCardProperty() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return model.selectedCardProperty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setSelectedCard(Card card) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.setSelectedCard(card);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Adds listeners to all {@code CardFolders} in {@code model}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void addCardFolderListeners(Model model) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Set cardFolderModified to true whenever the models\u0027 card folder is modified."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (ReadOnlyCardFolder cardFolder : model.getCardFolders()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            cardFolder.addListener(observable -\u003e cardFolderModified \u003d true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 53,
      "dlqs": 13,
      "-": 76,
      "KerrynEer": 3
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_OPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Adds a card to the card folder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a card to the card folder. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + \"[\" + PREFIX_HINT + \"HINT]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + \"[\" + PREFIX_OPTION + \"INCORRECT_OPTION]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + PREFIX_QUESTION + \"What is the powerhouse of the cell? \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + PREFIX_ANSWER + \"Mitochondria \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + PREFIX_HINT + \"Rhymes with Hypochondria \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the card folder\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public AddCommand(Card card) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        toAdd \u003d card;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_FOLDER) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (model.hasCard(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.commitActiveCardFolder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 17,
      "dlqs": 12,
      "-": 35,
      "mmdlow": 5,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/AddFolderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Adds a card folder."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class AddFolderCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addfolder\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a card folder. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"FOLDER_NAME \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Nervous System \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card folder added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD_FOLDER \u003d \"This card folder already exists\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final CardFolder toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public AddFolderCommand(CardFolder cardFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(cardFolder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        toAdd \u003d cardFolder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_HOMEDIR) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_INSIDE_FOLDER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (model.hasFolder(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD_FOLDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.addFolder(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                || (other instanceof AddFolderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddFolderCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 49,
      "dlqs": 8,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/AnswerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Allows user to input an answer for the currently displayed card, compares it with the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * correct answer in that card and tell the user if it is correct or wrong."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Answer matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class AnswerCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ans\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": User inputs an answer for the\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \" currently displayed card.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            + \"Parameters: ANSWER \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Mitochondrion\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_ANSWER_SUCCESS \u003d \"Answer sent successfully\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String MESSAGE_INT_EXPECTED_NOT_STRING \u003d \"MCQ question expects option number as answer\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private final Answer attemptedAnswer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public AnswerCommand(Answer attemptedAnswer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        this.attemptedAnswer \u003d attemptedAnswer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_TEST) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (model.isCardAlreadyAnswered()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ANSWER_COMMAND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Card cardToMark \u003d model.getCurrentTestedCard();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        boolean isAttemptCorrect;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        switch (cardToMark.getCardType()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        case MCQ:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                int answerIndex \u003d Integer.parseInt(attemptedAnswer.fullAnswer);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                isAttemptCorrect \u003d model.markAttemptedMcqAnswer(answerIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                throw new CommandException(MESSAGE_INT_EXPECTED_NOT_STRING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        case SINGLE_ANSWER:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            isAttemptCorrect \u003d model.markAttemptedAnswer(attemptedAnswer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            isAttemptCorrect \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        model.setCardAsAnswered();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card scoredCard \u003d model.createScoredCard(cardToMark, isAttemptCorrect);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        model.setCard(cardToMark, scoredCard);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        model.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        model.commitActiveCardFolder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (isAttemptCorrect) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return new CommandResult(MESSAGE_ANSWER_SUCCESS, CommandResult.Type.ANSWER_CORRECT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return new CommandResult(MESSAGE_ANSWER_SUCCESS, CommandResult.Type.ANSWER_WRONG);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                || (other instanceof AnswerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                \u0026\u0026 attemptedAnswer.equals(((AnswerCommand) other).attemptedAnswer)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 20,
      "KerrynEer": 43,
      "mmdlow": 18
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/ChangeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Selects a folder identified using it\u0027s displayed index in the home directory. Also used to navigate from"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * within a folder back to the home directory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class ChangeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"change\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    // TODO: Include use case for changing to home directory"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \": Changes the card folder that the user is in.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_EXIT_FOLDER_SUCCESS \u003d \"Returned to home\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_ENTER_FOLDER_SUCCESS \u003d \"Entered Card Folder: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final boolean isExitingFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ChangeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        isExitingFolder \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ChangeCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        isExitingFolder \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (isExitingFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return executeExitFolder(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return executeEnterFolder(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                || (other instanceof ChangeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 isExitingFolder \u003d\u003d ((ChangeCommand) other).isExitingFolder"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 sameTargetIndex((ChangeCommand) other));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Executes the logic to enter a folder. Model cannot already be in a folder."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private CommandResult executeEnterFolder(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e cardFolderList \u003d model.getCardFolders();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_HOMEDIR) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_INSIDE_FOLDER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d cardFolderList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOLDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENTER_FOLDER_SUCCESS, targetIndex.getOneBased()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.ENTERED_FOLDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Executes the logic to exit a folder. Model cannot already be outside folders."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private CommandResult executeExitFolder(Model model) throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_FOLDER) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.exitFolderToHome();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_FOLDER_SUCCESS, CommandResult.Type.EXITED_FOLDER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Compares the {@code targetIndex} of two ChangeCommand objects, returning true if they are equal."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private boolean sameTargetIndex(ChangeCommand other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // if target indices exist, they must be the same"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (targetIndex !\u003d null \u0026\u0026 other.targetIndex !\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return targetIndex.equals(other.targetIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // return true if both indices do not exist, else return false if only one target index do not exist"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return (targetIndex \u003d\u003d null \u0026\u0026 other.targetIndex \u003d\u003d null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 92,
      "dlqs": 11,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Clears the card folder."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"card folder has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Name of CardFolder is preserved in clear operation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_FOLDER) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.resetCardFolder(new CardFolder(model.getActiveCardFolder().getFolderName()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.commitActiveCardFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 7,
      "dlqs": 8,
      "-": 16,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * {@code Type } representing the type of CommandResult and what response should be displayed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public enum Type {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        SHOW_HELP, // Help information should be shown to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        IS_EXIT, // The application should exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        ENTERED_FOLDER, // The side panel should be updated as folder was entered."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        EXITED_FOLDER, // The side panel should be updated as folder was exited."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EDITED_FOLDER, // The side panel should be updated as a folder was edited."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        START_TEST_SESSION, // The application should enter a test session."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        END_TEST_SESSION, // The current test session should end."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        ANSWER_CORRECT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        ANSWER_WRONG,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        ENTERED_REPORT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        EXITED_REPORT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        SHOW_NEXT_CARD, // The next card will be displayed in the current test session."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        NONE // use for \"nothing to do\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Card testSessionCard;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public CommandResult(String feedbackToUser, Type type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this(feedbackToUser, Type.NONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void setTestSessionCard(Card card) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        testSessionCard \u003d card;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public Card getTestSessionCard() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return testSessionCard;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 type \u003d\u003d otherCommandResult.getType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return Objects.hash(feedbackToUser, type);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 28,
      "-": 45,
      "KerrynEer": 12
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Deletes a card identified using it\u0027s displayed index from the card folder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \": Deletes the card identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted Card: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_FOLDER) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCards();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.commitActiveCardFolder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 12,
      "dlqs": 9,
      "-": 39,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/DeleteFolderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Deletes a folder identified using it\u0027s displayed index from the home directory."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class DeleteFolderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletefolder\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \": Deletes the card folder identified by the index number used in the displayed list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_DELETE_FOLDER_SUCCESS \u003d \"Deleted Card Folder: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public DeleteFolderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_HOMEDIR) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_INSIDE_FOLDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e cardFolderList \u003d model.getCardFolders();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d cardFolderList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOLDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ReadOnlyCardFolder cardFolderToDelete \u003d cardFolderList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.deleteFolder(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOLDER_SUCCESS, cardFolderToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                || (other instanceof DeleteFolderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteFolderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 48,
      "dlqs": 10,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_OPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Score;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Edits the details of an existing card in the card folder."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the card identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"by the index number used in the displayed card list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + \"[\" + PREFIX_OPTION + \"OPTION]... \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + \"[\" + PREFIX_HINT + \"HINT]\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            + PREFIX_ANSWER + \"91234567 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited Card: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the card folder.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final EditCardDescriptor editCardDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @param index of the card in the filtered card list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @param editCardDescriptor details to edit the card with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditCommand(Index index, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(editCardDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.editCardDescriptor \u003d new EditCardDescriptor(editCardDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_FOLDER) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCards();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card editedCard \u003d createEditedCard(cardToEdit, editCardDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (!cardToEdit.isSameCard(editedCard) \u0026\u0026 model.hasCard(editedCard)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.setCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.commitActiveCardFolder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedCard));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Creates and returns a {@code Card} with the details of {@code cardToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * edited with {@code editCardDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static Card createEditedCard(Card cardToEdit, EditCardDescriptor editCardDescriptor)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assert cardToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Question updatedQuestion \u003d editCardDescriptor.getQuestion().orElse(cardToEdit.getQuestion());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Answer updatedAnswer \u003d editCardDescriptor.getAnswer().orElse(cardToEdit.getAnswer());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // Score cannot be edited, so copy original"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Score originalScore \u003d cardToEdit.getScore();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Set\u003cOption\u003e updatedOptions \u003d editCardDescriptor.getOptions().orElse(cardToEdit.getOptions());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Set\u003cHint\u003e updatedHints \u003d editCardDescriptor.getHints().orElse(cardToEdit.getHints());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // Check if options list contains answer in the edit command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        for (Option option : updatedOptions) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            if (option.optionValue.equalsIgnoreCase(updatedAnswer.fullAnswer)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_ILLEGAL_OPTION_CANNOT_BE_SAME_AS_ANSWER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return new Card(updatedQuestion, updatedAnswer, originalScore, updatedOptions, updatedHints);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Stores the details to edit the card with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * corresponding field value of the card."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static class EditCardDescriptor {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        private Set\u003cOption\u003e options;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        private Set\u003cHint\u003e hints;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public EditCardDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * A defensive copy of {@code hints} is used internally."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public EditCardDescriptor(EditCardDescriptor toCopy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            setOptions(toCopy.options);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            setHints(toCopy.hints);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            return CollectionUtil.isAnyNonNull(question, answer, options, hints);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * Sets {@code options} to this object\u0027s {@code options}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * A defensive copy of {@code options} is used internally."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        public void setOptions(Set\u003cOption\u003e options) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            this.options \u003d (options !\u003d null) ? new HashSet\u003c\u003e(options) : null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * Returns an unmodifiable option set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code options} is null."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        public Optional\u003cSet\u003cOption\u003e\u003e getOptions() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            return (options !\u003d null) ? Optional.of(Collections.unmodifiableSet(options)) : Optional.empty();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * Sets {@code hints} to this object\u0027s {@code hints}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * A defensive copy of {@code hints} is used internally."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        public void setHints(Set\u003cHint\u003e hints) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            this.hints \u003d (hints !\u003d null) ? new HashSet\u003c\u003e(hints) : null;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * Returns an unmodifiable hint set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code hints} is null."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        public Optional\u003cSet\u003cHint\u003e\u003e getHints() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            return (hints !\u003d null) ? Optional.of(Collections.unmodifiableSet(hints)) : Optional.empty();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (!(other instanceof EditCardDescriptor)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            EditCardDescriptor e \u003d (EditCardDescriptor) other;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    \u0026\u0026 getAnswer().equals(e.getAnswer())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                    \u0026\u0026 getOptions().equals(e.getOptions())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                    \u0026\u0026 getHints().equals(e.getHints());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 49,
      "dlqs": 23,
      "-": 114,
      "mmdlow": 49,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/EditFolderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.VersionedCardFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Edits the details of an existing card in the card folder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class EditFolderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editfolder\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the name of the folder identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"by the index number used in the displayed folder list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Existing folder name will be overwritten.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"NEW_FOLDER_NAME\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \" CIRCULATORY SYSTEM \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_EDIT_FOLDER_SUCCESS \u003d \"Renamed Folder: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOLDER \u003d \"This folder already exists.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final String newName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @param index of the card in the filtered card list to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @param newName the name that we should rename the folder to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditFolderCommand(Index index, String newName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(newName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d Model.State.IN_HOMEDIR) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_INSIDE_FOLDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cVersionedCardFolder\u003e folderList \u003d model.getFilteredFolders();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d folderList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder folderToEdit \u003d folderList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!folderToEdit.getFolderName().equals(newName) \u0026\u0026 model.hasFolderWithName(newName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOLDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.renameFolder(index.getZeroBased(), newName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FOLDER_SUCCESS, newName), CommandResult.Type.EDITED_FOLDER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!(other instanceof EditFolderCommand)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditFolderCommand e \u003d (EditFolderCommand) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 newName.equals(e.newName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 81,
      "dlqs": 9
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/EndCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Ends the current test session."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * This command is valid only when user is in a test session."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class EndCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"end\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_END_TEST_SESSION_SUCCESS \u003d \"End test session\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final String MESSAGE_END_REPORT_DISPLAY_SUCCESS \u003d \"End report display\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        switch(model.getState()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        case IN_TEST:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            model.endTestSession();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new CommandResult(MESSAGE_END_TEST_SESSION_SUCCESS, CommandResult.Type.END_TEST_SESSION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        case IN_REPORT:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            model.exitReportDisplay();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new CommandResult(MESSAGE_END_REPORT_DISPLAY_SUCCESS, CommandResult.Type.EXITED_REPORT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 10,
      "KerrynEer": 15
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting card folder as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, CommandResult.Type.IS_EXIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolderNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.CsvManagerNotInitialized;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * Exports single or multiple card folders into a .csv file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exports single or multiple card folders into\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \" their respective .csv files.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"Parameters: INDEX (Index specifies the card folder index to export) \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"Can specify more than one card folder index to export\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 3 5 7\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully exported card folders\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_MISSING_CARD_FOLDERS \u003d \"Could not find the specified folder index: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_FILE_OPS_FAILURE \u003d \"Could not export to specified file\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private List\u003cInteger\u003e cardFolderIndexes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public ExportCommand(List\u003cInteger\u003e cardFolderIndexes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        this.cardFolderIndexes \u003d cardFolderIndexes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // check whether model contains the card folders desired. Catch exception thrown"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_HOMEDIR) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_INSIDE_FOLDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            model.exportCardFolders(cardFolderIndexes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (CardFolderNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_CARD_FOLDERS + e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_OPS_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (CsvManagerNotInitialized e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CSV_MANAGER_NOT_INITIALIZED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                || other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                \u0026\u0026 cardFolderIndexes.containsAll(((ExportCommand) other).cardFolderIndexes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 39,
      "dlqs": 9,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, CommandResult.Type.SHOW_HELP);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.model.DuplicateCardFolderException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.IncorrectCsvHeadersException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * Imports a .csv file containing card folders data into the application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": imports a .csv file containing \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"card folders information.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"File imported must have a .csv extension.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"Default file path if not specified will be in the root folder of this application\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"Parameters: CSV_FILE_NAME\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice.csv\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_FILE_OPS_FAILURE \u003d \"Could not import from specified file. Check that it exists \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"in root directory\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully imported: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD_FOLDERS \u003d \"Card folder already exists in model\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_CARD_FIELD_WRONG_SPECIFICATION \u003d \"Card fields in csv file do not follow \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"flashcard \" + \"specification:\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private CsvFile csvFile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public ImportCommand(CsvFile csvFile) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        this.csvFile \u003d csvFile;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_HOMEDIR) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_INSIDE_FOLDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            model.importCardFolders(csvFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_OPS_FAILURE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (DuplicateCardFolderException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD_FOLDERS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(MESSAGE_CARD_FIELD_WRONG_SPECIFICATION + e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (IncorrectCsvHeadersException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INCORRECT_CSV_FILE_HEADER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, csvFile.filename));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                || other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                \u0026\u0026 csvFile.filename.equals(((ImportCommand) other).csvFile.filename);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 42,
      "dlqs": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Lists all cards in the card folder to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all cards\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d Model.State.IN_FOLDER) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 12,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/NextCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.EndCommand.MESSAGE_END_TEST_SESSION_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Displays to the user the next question in the folder during the test session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * This command is valid only when user is in a test session."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class NextCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"next\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_NEXT_QUESTION_SUCCESS \u003d \"Displaying the next question in test session\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_TEST) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (!model.isCardAlreadyAnswered()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NEXT_COMMAND);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        boolean successfullyFoundNextCard \u003d model.testNextCard();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (!successfullyFoundNextCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            model.endTestSession();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            return new CommandResult(MESSAGE_END_TEST_SESSION_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                    CommandResult.Type.END_TEST_SESSION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card cardToTest \u003d model.getCurrentTestedCard();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_NEXT_QUESTION_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                CommandResult.Type.SHOW_NEXT_CARD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        commandResult.setTestSessionCard(cardToTest);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 10,
      "KerrynEer": 36
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Reverts the {@code model}\u0027s card folder to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!model.canRedoActiveCardFolder()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.redoActiveCardFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 4,
      "dlqs": 5,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/ReportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * Display a report for a folder identified using it\u0027s displayed index from the card folder list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Report displayed\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_FOLDER) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        model.enterReportDisplay();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandResult.Type.ENTERED_REPORT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 31
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/RevealCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Allows user to be shown the answer for the currently displayed card, card will be marked as wrong."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class RevealCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reveal\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_REVEAL_SUCCESS \u003d \"Answer revealed\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (model.getState() !\u003d State.IN_TEST) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (model.isCardAlreadyAnswered()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REVEAL_COMMAND);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card cardToMark \u003d model.getCurrentTestedCard();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        boolean isAttemptCorrect \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.setCardAsAnswered();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card scoredCard \u003d model.createScoredCard(cardToMark, isAttemptCorrect);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.setCard(cardToMark, scoredCard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.commitActiveCardFolder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return new CommandResult(MESSAGE_REVEAL_SUCCESS, CommandResult.Type.ANSWER_WRONG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KerrynEer": 45
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/SearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Finds and lists all cards in card folder whose question contains any of the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cards or folders whose questions \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"or names contain any of the specified keywords (case-insensitive) and \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final QuestionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public SearchCommand(QuestionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (model.getState() !\u003d State.IN_FOLDER) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.updateFilteredCard(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                String.format(Messages.MESSAGE_CARDS_LISTED_OVERVIEW, model.getFilteredCards().size()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 5,
      "dlqs": 12,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Selects a card identified using it\u0027s displayed index from the card folder."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \": Selects the card identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_SELECT_CARD_SUCCESS \u003d \"Selected Card: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e filteredCardList \u003d model.getFilteredCards();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d Model.State.IN_FOLDER) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredCardList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.setSelectedCard(filteredCardList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_CARD_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 8,
      "-": 40,
      "mmdlow": 3
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.COMPARATOR_ASC_SCORE_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Sorts flashcards based on score. Flashcards will be arranged in ascending order, from the lowest score to the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * highest."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted flashcards with lowest score first\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d Model.State.IN_FOLDER) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        model.sortFilteredCard(COMPARATOR_ASC_SCORE_CARDS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 21,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/TestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.EmptyCardFolderException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Enters a test session using the current card folder."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class TestCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"test\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String MESSAGE_ENTER_TEST_FOLDER_SUCCESS \u003d \"In Test Session\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d State.IN_FOLDER) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            model.testCardFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            Card cardToTest \u003d model.getCurrentTestedCard();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            CommandResult commandResult \u003d new CommandResult(MESSAGE_ENTER_TEST_FOLDER_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                    CommandResult.Type.START_TEST_SESSION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            commandResult.setTestSessionCard(cardToTest);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        } catch (EmptyCardFolderException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_ON_EMPTY_FOLDER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 12,
      "KerrynEer": 30
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Reverts the {@code model}\u0027s card folder to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (model.getState() !\u003d Model.State.IN_FOLDER) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!model.canUndoActiveCardFolder()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.undoActiveCardFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 6,
      "dlqs": 7,
      "-": 22,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_ILLEGAL_OPTION_CANNOT_BE_SAME_AS_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_OPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Score;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                        args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_HINT, PREFIX_OPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // Default score is 0/0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Score score \u003d new Score(0, 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Set\u003cHint\u003e hintList \u003d ParserUtil.parseHints(argMultimap.getAllValues(PREFIX_HINT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Set\u003cOption\u003e optionList \u003d ParserUtil.parseOptions(argMultimap.getAllValues(PREFIX_OPTION));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // Check if options list contains answer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        for (Option option: optionList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            if (option.optionValue.equalsIgnoreCase(answer.fullAnswer)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                throw new ParseException(MESSAGE_ILLEGAL_OPTION_CANNOT_BE_SAME_AS_ANSWER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Card card \u003d new Card(question, answer, score, optionList, hintList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new AddCommand(card);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 4,
      "dlqs": 16,
      "-": 31,
      "mmdlow": 11
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/AddFolderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddFolderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Parses input arguments and creates a new AddFolderCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class AddFolderCommandParser implements Parser\u003cAddFolderCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses the given {@code String} in the context of the AddFolderCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * and returns an AddFolderCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public AddFolderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFolderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder cardFolder \u003d new CardFolder(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new AddFolderCommand(cardFolder);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 26,
      "dlqs": 5
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/AnswerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AnswerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Parses input arguments and creates a new AnswerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class AnswerCommandParser implements Parser\u003cAnswerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AnswerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * and returns an AnswerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public AnswerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AnswerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return new AnswerCommand(new Answer(trimmedArgs));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 5,
      "KerrynEer": 24
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 56,
      "mmdlow": 4
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 146,
      "mmdlow": 2
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/ChangeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ChangeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Parses input arguments and creates a new ChangeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class ChangeCommandParser implements Parser\u003cChangeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ChangeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * and returns an ChangeCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ChangeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (ParserUtil.parseHomeSymbol(args)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                return new ChangeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new ChangeCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 26,
      "dlqs": 5
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Prefix PREFIX_OPTION \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Prefix PREFIX_HINT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FILENAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FOLDERNAME \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 11,
      "mmdlow": 4
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/CommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddFolderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AnswerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ChangeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteFolderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditFolderCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EndCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.logic.commands.RevealCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        case AddFolderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new AddFolderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        case ChangeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new ChangeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        case EditFolderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new EditFolderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        case DeleteFolderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new DeleteFolderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        case TestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            return new TestCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return new ReportCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        case AnswerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            return new AnswerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        case RevealCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            return new RevealCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        case EndCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            return new EndCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        case NextCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            return new NextCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 12,
      "dlqs": 35,
      "-": 81,
      "KerrynEer": 17
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/DeleteFolderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteFolderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Parses input arguments and creates a new DeleteFolderCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class DeleteFolderCommandParser implements Parser\u003cDeleteFolderCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteFolderCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * and returns an DeleteFolderCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public DeleteFolderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new DeleteFolderCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteFolderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 24,
      "dlqs": 5
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_OPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                        args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_OPTION, PREFIX_HINT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand.EditCardDescriptor editCardDescriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            editCardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            editCardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        parseOptionsForEdit(argMultimap.getAllValues(PREFIX_OPTION)).ifPresent(editCardDescriptor::setOptions);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        parseHintsForEdit(argMultimap.getAllValues(PREFIX_HINT)).ifPresent(editCardDescriptor::setHints);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!editCardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new EditCommand(index, editCardDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns emptySet if string collection only contains an empty string, or null is collection is empty."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Collection\u003cString\u003e parseStringCollection(Collection\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assert strings !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (strings.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return strings.size() \u003d\u003d 1 \u0026\u0026 strings.contains(\"\") ? Collections.emptySet() : strings;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e options} into a {@code Set\u003cOption\u003e} if {@code options} is non-empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * If {@code options} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * {@code Set\u003cOption\u003e} containing zero options."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Optional\u003cSet\u003cOption\u003e\u003e parseOptionsForEdit(Collection\u003cString\u003e options) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Collection\u003cString\u003e optionSet \u003d parseStringCollection(options);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return optionSet !\u003d null ? Optional.of(ParserUtil.parseOptions(optionSet)) : Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e hints} into a {@code Set\u003cHint\u003e} if {@code hints} is non-empty."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * If {@code hints} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * {@code Set\u003cHint\u003e} containing zero hints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Optional\u003cSet\u003cHint\u003e\u003e parseHintsForEdit(Collection\u003cString\u003e hints) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Collection\u003cString\u003e hintSet \u003d parseStringCollection(hints);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return hintSet !\u003d null ? Optional.of(ParserUtil.parseHints(hintSet)) : Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 11,
      "-": 44,
      "mmdlow": 30
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/EditFolderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditFolderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Parses input arguments and creates a new EditFolderCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class EditFolderCommandParser implements Parser\u003cEditFolderCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditFolderCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * and returns an EditFolderCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditFolderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Pair\u003cIndex, String\u003e parsedObjects;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        parsedObjects \u003d ParserUtil.parseIndexAndFolderName(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new EditFolderCommand(parsedObjects.getKey(), parsedObjects.getValue());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 24,
      "dlqs": 4
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_NO_NEGATIVE_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input for export command arguments and creates a new export command object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            List\u003cInteger\u003e folderIndexes \u003d ParserUtil.parseFolderIndex(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return new ExportCommand(folderIndexes);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new ParseException(MESSAGE_NO_NEGATIVE_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 12,
      "dlqs": 6,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parser input for import command arguments."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public ImportCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String filename \u003d userInput.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        CsvFile csvFile \u003d ParserUtil.parseFileName(filename);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return new ImportCommand(csvFile);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 2,
      "dlqs": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditFolderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvFile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_INDEX_LESS_THAN_ZERO \u003d \"Index is less than zero\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String HOME_SYMBOL \u003d \"..\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses {@code String args} into an {@code Index} and {@code String} and returns it as a {@code Pair} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws ParseException if the specified index or folder name is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static Pair\u003cIndex, String\u003e parseIndexAndFolderName(String args) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        int spaceIndex \u003d trimmedArgs.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (spaceIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditFolderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String trimmedIndex \u003d trimmedArgs.substring(0, spaceIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String trimmedFolderName \u003d trimmedArgs.substring(spaceIndex).trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (trimmedFolderName.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new ParseException(ReadOnlyCardFolder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index index \u003d Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new Pair\u003c\u003e(index, trimmedFolderName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses {@code String args} and checks whether it is equal to {@code HOME_SYMBOL}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static boolean parseHomeSymbol(String args) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return (trimmedArgs.equals(HOME_SYMBOL));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses a {@code String hint} into a {@code Hint}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @throws ParseException if the given {@code hint} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static Hint parseHint(String hint) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        requireNonNull(hint);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String trimmedHint \u003d hint.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (!Hint.isValidHintName(trimmedHint)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            throw new ParseException(Hint.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return new Hint(trimmedHint);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e hints} into a {@code Set\u003cHint\u003e}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Restrict to at most the last hint from {@code Collection\u003cString\u003e hints}, or none if the Collection is empty."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static Set\u003cHint\u003e parseHints(Collection\u003cString\u003e hints) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        requireNonNull(hints);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        List\u003cString\u003e hintList \u003d new ArrayList\u003c\u003e(hints);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        final Set\u003cHint\u003e hintSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (!hintList.isEmpty()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            hintSet.add(parseHint(hintList.get(hintList.size() - 1)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return hintSet;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses a {@code String option} into a {@code Option}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @throws ParseException if the given {@code option} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static Option parseOption(String option) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        requireNonNull(option);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String trimmedOption \u003d option.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (!Option.isValidOption(trimmedOption)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            throw new ParseException(Option.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return new Option(trimmedOption);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e options} into a {@code Set\u003cOption\u003e}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static Set\u003cOption\u003e parseOptions(Collection\u003cString\u003e options) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        requireNonNull(options);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        final Set\u003cOption\u003e optionSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        for (String optionValue : options) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            optionSet.add(parseOption(optionValue));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return optionSet;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static Integer stringToInt(String element) throws NumberFormatException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return Integer.parseInt(element);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Parses a user input of a string of integers into a {@code List\u003cInteger\u003e}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static List\u003cInteger\u003e parseFolderIndex(String folderIndexes) throws NumberFormatException,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            IllegalValueException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        folderIndexes \u003d folderIndexes.trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cInteger\u003e indexList \u003d Arrays.stream(folderIndexes.split(\" \"))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                .map(ParserUtil::stringToInt)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cInteger\u003e invalidIndexList \u003d indexList.stream().filter(i -\u003e i \u003c 0).collect(Collectors.toList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (invalidIndexList.size() \u003e 0) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INDEX_LESS_THAN_ZERO);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return indexList;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Parses a {@Code String filename} into a {@Code CsvFile}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static CsvFile parseFileName(String filename) throws ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (!CsvFile.isValidFileName(filename)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                    ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return new CsvFile(filename);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 53,
      "yichong96": 40,
      "dlqs": 14,
      "-": 64,
      "mmdlow": 45
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/SearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SearchCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String[] questionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new SearchCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(questionKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/CardFolder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.UniqueCardList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * Wraps all data at the knowitall-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * Duplicates are not allowed (by .isSameCard comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardFolder implements ReadOnlyCardFolder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final UniqueCardList cards;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private String folderName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private List\u003cDouble\u003e folderScores;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardFolder(String folderName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        setFolderName(folderName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        folderScores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Creates an {@code CardFolder} using the Cards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardFolder(ReadOnlyCardFolder toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the name of the {@code CardFolder}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void rename(String newName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderName \u003d newName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the number of {@code cards} within the folder."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public int countCards() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Replaces the contents of the folder list with {@code cards}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code cards} must not contain duplicate cards."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.cards.setCards(cards);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Resets the existing data of this {@code CardFolder} with {@code newData}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void resetData(ReadOnlyCardFolder newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        setCards(newData.getCardList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        setFolderName(newData.getFolderName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        setFolderScores(newData.getFolderScores());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    //// card-level operations"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in the card folder."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cards.contains(card);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Adds a card to the card folder."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * The card must not already exist in the card folder."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void addCard(Card p) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cards.add(p);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Replaces the given card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code target} must exist in the card folder."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the card folder."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(editedCard);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cards.setCard(target, editedCard);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Removes {@code key} from this {@code CardFolder}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code key} must exist in the card folder."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void removeCard(Card key) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cards.remove(key);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Adds a folder score to a list of the last {@code MAX_NUM_FOLDER_SCORES} folder scores."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * A folder score is a double representing the percentage of questions answered correctly in the last test session."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void addFolderScore(Double folderScore) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        while (folderScores.size() \u003e\u003d MAX_NUM_FOLDER_SCORES) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            folderScores.remove(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        folderScores.add(folderScore);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Notifies listeners that the card folder has been modified."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return getFolderName();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public List\u003cDouble\u003e getFolderScores() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return folderScores;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Sets the folderScores of {@code CardFolder } and overwrites the previous scores."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param folderScores"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void setFolderScores(List\u003cDouble\u003e folderScores) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.folderScores \u003d folderScores;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void sortCards(Comparator\u003cCard\u003e comparator) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        cards.sortCards(comparator);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the name of the {@code CardFolder} and overwrites the previous name."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setFolderName(String newFolderName) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.folderName \u003d newFolderName;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public String getFolderName() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return folderName;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean hasSameCards(ObservableList\u003cCard\u003e otherCardList) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cards.asUnmodifiableObservableList().equals(otherCardList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Equivalence of {@code CardFolder} is determined by folderName."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                || (other instanceof CardFolder // instanceof handles nulls"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 folderName.equals(((CardFolder) other).folderName));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return folderName.hashCode();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 79,
      "dlqs": 40,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/CardFolderNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * Signals that the operation is unable to find the specified card folder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class CardFolderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public CardFolderNotFoundException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public CardFolderNotFoundException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 15,
      "dlqs": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/DuplicateCardFolderException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class DuplicateCardFolderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public DuplicateCardFolderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        super(\"Operation would result in duplicate card folders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 10,
      "dlqs": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/EmptyCardFolderException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Signals that the the current card folder is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class EmptyCardFolderException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public EmptyCardFolderException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        super(\"This card folder is empty\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "KerrynEer": 9
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.CsvManagerNotInitialized;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.IncorrectCsvHeadersException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public interface Model extends Observable {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /** {@code Comparator} that sorts cards by ascending percentage score */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    Comparator\u003cCard\u003e COMPARATOR_ASC_SCORE_CARDS \u003d Comparator.comparing(Card::getScore);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /** {@code Comparator} that sorts cards by lexicographic order of questions */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    Comparator\u003cCard\u003e COMPARATOR_LEXICOGRAPHIC_CARDS \u003d Comparator.comparing(Card::getQuestion);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Represents the location the user is in."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    enum State {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        IN_FOLDER,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        IN_HOMEDIR,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        IN_TEST,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        IN_REPORT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the user prefs\u0027 card folder file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Path getcardFolderFilesPath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the user prefs\u0027 card folder file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void setcardFolderFilesPath(Path cardFolderFilesPath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Replaces card folder data with the data in {@code cardFolder}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void resetCardFolder(ReadOnlyCardFolder cardFolder);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /** Returns the active CardFolder */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ReadOnlyCardFolder getActiveCardFolder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /** Returns all CardFolders */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    List\u003cReadOnlyCardFolder\u003e getCardFolders();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in the card folder."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    boolean hasCard(Card card);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * The card must exist in the card folder."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void deleteCard(Card target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Adds the given card."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code card} must not already exist in the card folder."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void addCard(Card card);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Replaces the given card {@code target} with {@code editedCard}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code target} must exist in the card folder."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the card folder."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void setCard(Card target, Card editedCard);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Removes the selected card, if any."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void removeSelectedCard();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if a {@code CardFolder} with the same identity as {@code cardFolder} exists."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    boolean hasFolder(CardFolder cardFolder);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if a{@code CardFolder} with the same name as {@code folderName} exists."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    boolean hasFolderWithName(String name);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Deletes the folder at the given index."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * The folder must exist."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void deleteFolder(int index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Adds the given folder."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code cardFolder} must not already exist."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void addFolder(CardFolder cardFolder);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Renames the folder at the given index to the string passed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code newName} must not be the name of an existing folder."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void renameFolder(int index, String newName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Gets the index of the current active {@code CardFolder}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    int getActiveCardFolderIndex();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Enters the folder at the specified {@code index}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void enterFolder(int index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the Model back to the home directory, outside of any {@code CardFolder}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void exitFolderToHome();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered card list */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCards();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered folders list */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ObservableList\u003cVersionedCardFolder\u003e getFilteredFolders();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Updates the filter of the filtered card list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void updateFilteredCard(Predicate\u003cCard\u003e predicate);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Updates the filter of the filtered card list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    void sortFilteredCard(Comparator\u003cCard\u003e cardComparator);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if the model has previous card folder states to restore."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    boolean canUndoActiveCardFolder();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if the model has undone card folder states to restore."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    boolean canRedoActiveCardFolder();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Restores the model\u0027s card folder to its previous state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void undoActiveCardFolder();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Restores the model\u0027s card folder to its previously undone state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void redoActiveCardFolder();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Saves the current card folder state for undo/redo."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void commitActiveCardFolder();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Selected card in the filtered card list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * null if no card is selected."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ReadOnlyProperty\u003cCard\u003e selectedCardProperty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the selected card in the filtered card list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * null if no card is selected."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Card getSelectedCard();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the selected card in the filtered card list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void setSelectedCard(Card card);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Enters a test session using the specified card folder index."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    void testCardFolder();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the current card in the test session."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    void setCurrentTestedCard(Card card);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the current card in the test session"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * null if there is no cards in folder or user is not in a test session."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    Card getCurrentTestedCard();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * End the current test session."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    void endTestSession();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Test the next card in the current folder in this test session."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Returns true if successfully found next card,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * false if there is no next card."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    boolean testNextCard();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Returns true if the given answer is right"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * false if answer is wrong"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    boolean markAttemptedAnswer(Answer attemptedAnswer);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * @param cardToMark {@code Card} which is being marked correct or wrong"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * @param markCorrect Boolean representing if card should be graded correct or wrong"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * @return Card created with new score"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    Card createScoredCard(Card cardToMark, boolean markCorrect);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns true if the index provided matches the answerIndex of the currently tested card,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * false otherwise."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    boolean markAttemptedMcqAnswer(int answerIndex);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Set cardAlreadyAnswered variable to true to indicate current card as answered"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    void setCardAsAnswered();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if the answer has already been input for that card"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * false if otherwise"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    boolean isCardAlreadyAnswered();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    State getState();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    void exportCardFolders(List\u003cInteger\u003e cardFolderExports) throws IOException, CsvManagerNotInitialized;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    void importCardFolders(CsvFile csvFile) throws IOException, CommandException, IncorrectCsvHeadersException;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    void enterReportDisplay();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    void exitReportDisplay();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    void setTestCsvPath(String path);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    String getDefaultPath();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 108,
      "yichong96": 10,
      "dlqs": 32,
      "-": 87,
      "KerrynEer": 45,
      "mmdlow": 6
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.model.card.Score;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvFile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.CsvManagerNotInitialized;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.IncorrectCsvHeadersException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Represents the in-memory model of the card folder data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private State state;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    //Card related"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private final SimpleObjectProperty\u003cCard\u003e selectedCard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    // CardFolder related"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private ObservableList\u003cVersionedCardFolder\u003e folders;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final FilteredList\u003cVersionedCardFolder\u003e filteredFolders;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final List\u003cFilteredList\u003cCard\u003e\u003e filteredCardsList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private int activeCardFolderIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    // Test Session related"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private final SimpleObjectProperty\u003cCard\u003e currentTestedCard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private ObservableList\u003cCard\u003e currentTestedCardFolder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private int currentTestedCardIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private boolean cardAlreadyAnswered \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private int numAnsweredCorrectly \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    // Export related"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private CsvManager csvManager;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            csvManager \u003d new CsvManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            csvManager \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            logger.warning(\"Unable to carry out import and export of card folders\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Initializes a ModelManager with the given cardFolders and userPrefs."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ModelManager(List\u003cReadOnlyCardFolder\u003e cardFolders, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireAllNonNull(cardFolders, userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        logger.fine(\"Initializing with card folder: \" + cardFolders + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cVersionedCardFolder\u003e versionedCardFolders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (ReadOnlyCardFolder cardFolder : cardFolders) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            versionedCardFolders.add(new VersionedCardFolder(cardFolder));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folders \u003d FXCollections.observableArrayList(versionedCardFolders);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        filteredFolders \u003d new FilteredList\u003c\u003e(folders);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        filteredCardsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredFolders.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            FilteredList\u003cCard\u003e filteredCards \u003d new FilteredList\u003c\u003e(filteredFolders.get(i).getCardList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            filteredCardsList.add(filteredCards);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            filteredCards.addListener(this::ensureSelectedCardIsValid);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // ModelManager initialises to first card folder"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        activeCardFolderIndex \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        state \u003d State.IN_HOMEDIR;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ModelManager(String newFolderName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this(Collections.singletonList(new CardFolder(newFolderName)), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Path getcardFolderFilesPath() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return userPrefs.getcardFolderFilesPath();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setcardFolderFilesPath(Path cardFolderFilesPath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(cardFolderFilesPath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        userPrefs.setcardFolderFilesPath(cardFolderFilesPath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardFolder \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void resetCardFolder(ReadOnlyCardFolder cardFolder) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.resetData(cardFolder);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ReadOnlyCardFolder getActiveCardFolder() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public List\u003cReadOnlyCardFolder\u003e getCardFolders() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new ArrayList\u003c\u003e(filteredFolders);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return versionedCardFolder.hasCard(card);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.removeCard(target);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.addCard(card);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.setCard(target, editedCard);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean hasFolder(CardFolder cardFolder) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(cardFolder);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return hasFolderWithName(cardFolder.getFolderName());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean hasFolderWithName(String name) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return folders.stream().anyMatch(folder -\u003e folder.getFolderName().equals(name));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void deleteFolder(int index) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folders.remove(index);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        filteredCardsList.remove(index);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void addFolder(CardFolder cardFolder) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d new VersionedCardFolder(cardFolder);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folders.add(versionedCardFolder);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        FilteredList\u003cCard\u003e filteredCards \u003d new FilteredList\u003c\u003e(versionedCardFolder.getCardList());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        filteredCardsList.add(filteredCards);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        filteredCards.addListener(this::ensureSelectedCardIsValid);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void renameFolder(int index, String newName) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder folderToRename \u003d folders.get(index);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderToRename.rename(newName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void enterFolder(int index) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        state \u003d State.IN_FOLDER;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        activeCardFolderIndex \u003d index;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void exitFolderToHome() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        state \u003d State.IN_HOMEDIR;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        removeSelectedCard();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public int getActiveCardFolderIndex() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return activeCardFolderIndex;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the active {@code CardFolder}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private VersionedCardFolder getActiveVersionedCardFolder() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return folders.get(activeCardFolderIndex);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the filtered list of cards from the active {@code CardFolder}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private FilteredList\u003cCard\u003e getActiveFilteredCards() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return filteredCardsList.get(activeCardFolderIndex);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Notifies listeners that the list of card folders has been modified."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void indicateModified() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Card List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code filteredFolders}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCards() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return getActiveFilteredCards();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ObservableList\u003cVersionedCardFolder\u003e getFilteredFolders() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return filteredFolders;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void updateFilteredCard(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        FilteredList\u003cCard\u003e filteredCards \u003d getActiveFilteredCards();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        filteredCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void sortFilteredCard(Comparator\u003cCard\u003e cardComparator) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        requireNonNull(cardComparator);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folders.get(activeCardFolderIndex).sortCards(cardComparator);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean canUndoActiveCardFolder() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return versionedCardFolder.canUndo();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean canRedoActiveCardFolder() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return versionedCardFolder.canRedo();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void undoActiveCardFolder() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.undo();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void redoActiveCardFolder() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.redo();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void commitActiveCardFolder() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d getActiveVersionedCardFolder();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.commit();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Report Displayed \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void enterReportDisplay() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        state \u003d State.IN_REPORT;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.sortFilteredCard(COMPARATOR_ASC_SCORE_CARDS);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void exitReportDisplay() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        state \u003d State.IN_FOLDER;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Test Session \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void testCardFolder() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        currentTestedCardFolder \u003d getActiveCardFolder().getCardList();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (currentTestedCardFolder.isEmpty()) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new EmptyCardFolderException();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        sortFilteredCard(COMPARATOR_ASC_SCORE_CARDS);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        currentTestedCardIndex \u003d 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card cardToTest \u003d currentTestedCardFolder.get(currentTestedCardIndex);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        setCurrentTestedCard(cardToTest);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        state \u003d State.IN_TEST;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        numAnsweredCorrectly \u003d 0;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void setCurrentTestedCard(Card card) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (card !\u003d null \u0026\u0026 !getActiveFilteredCards().contains(card)) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        currentTestedCard.setValue(card);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public Card getCurrentTestedCard() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return currentTestedCard.getValue();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void endTestSession() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        getActiveVersionedCardFolder()"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                .addFolderScore((double) numAnsweredCorrectly / getActiveCardFolder().getCardList().size());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        getActiveVersionedCardFolder().commit();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        state \u003d State.IN_FOLDER;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        setCardAsNotAnswered();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        numAnsweredCorrectly \u003d 0;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        setCurrentTestedCard(null);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        currentTestedCardFolder \u003d null;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public boolean markAttemptedAnswer(Answer attemptedAnswer) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Answer correctAnswer \u003d currentTestedCard.getValue().getAnswer();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String correctAnswerInCapitals \u003d correctAnswer.toString().toUpperCase();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String attemptedAnswerInCapitals \u003d attemptedAnswer.toString().toUpperCase();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (correctAnswerInCapitals.equals(attemptedAnswerInCapitals)) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            numAnsweredCorrectly++;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public boolean markAttemptedMcqAnswer(int answerIndex) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (answerIndex \u003d\u003d currentTestedCard.getValue().getAnswerIndex()) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            numAnsweredCorrectly++;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public Card createScoredCard(Card cardToMark, boolean markCorrect) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Score newScore;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (markCorrect) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            newScore \u003d new Score(cardToMark.getScore().correctAttempts + 1,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                    cardToMark.getScore().totalAttempts + 1);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            newScore \u003d new Score(cardToMark.getScore().correctAttempts,"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                    cardToMark.getScore().totalAttempts + 1);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return new Card(cardToMark.getQuestion(), cardToMark.getAnswer(), newScore, cardToMark.getOptions(),"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                cardToMark.getHints());"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void setCardAsAnswered() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        cardAlreadyAnswered \u003d true;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private void setCardAsNotAnswered() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        cardAlreadyAnswered \u003d false;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public boolean isCardAlreadyAnswered() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return cardAlreadyAnswered;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public boolean testNextCard() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        currentTestedCardIndex +\u003d 1;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        if (currentTestedCardIndex \u003d\u003d currentTestedCardFolder.size()) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card cardToTest \u003d currentTestedCardFolder.get(currentTestedCardIndex);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        setCurrentTestedCard(cardToTest);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        setCardAsNotAnswered();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected card \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ReadOnlyProperty\u003cCard\u003e selectedCardProperty() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return selectedCard;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Card getSelectedCard() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return selectedCard.getValue();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setSelectedCard(Card card) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (card !\u003d null \u0026\u0026 !getActiveFilteredCards().contains(card)) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectedCard.setValue(card);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void removeSelectedCard() {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectedCard.setValue(null);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Ensures {@code selectedCard} is a valid card in {@code filteredCardsList}."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void ensureSelectedCardIsValid(ListChangeListener.Change\u003c? extends Card\u003e change) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (selectedCard.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                // null is always a valid selected card, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            boolean wasSelectedCardReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedCard.getValue());"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (wasSelectedCardReplaced) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                // Update selectedCard to its new value."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedCard.getValue());"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                selectedCard.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            boolean wasSelectedCardRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                    .anyMatch(removedCard -\u003e selectedCard.getValue().isSameCard(removedCard));"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (wasSelectedCardRemoved) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                // Select the card that came before it in the list,"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                // or clear the selection if there is no such card."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                selectedCard.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public State getState() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return filteredFolders.equals(other.filteredFolders)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 filteredCardsList.equals(other.filteredCardsList)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedCard.get(), other.selectedCard.get())"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 state \u003d\u003d other.state"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                \u0026\u0026 currentTestedCardIndex \u003d\u003d other.currentTestedCardIndex"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                \u0026\u0026 cardAlreadyAnswered \u003d\u003d other.cardAlreadyAnswered"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 activeCardFolderIndex \u003d\u003d other.activeCardFolderIndex;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Export / Import card folders \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void exportCardFolders(List\u003cInteger\u003e cardFolderExports) throws IOException, CsvManagerNotInitialized {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (csvManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CsvManagerNotInitialized(Messages.MESSAGE_CSV_MANAGER_NOT_INITIALIZED);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e cardFolders \u003d returnValidCardFolders(cardFolderExports);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        csvManager.writeFoldersToCsv(cardFolders);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void importCardFolders(CsvFile csvFile) throws IOException, CommandException, IllegalArgumentException,"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            IncorrectCsvHeadersException {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String cardFolderName \u003d csvFile.getFileNameWithoutExt();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (isCardFolderExists(cardFolderName)) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new DuplicateCardFolderException();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        CardFolder cardFolder \u003d csvManager.readFoldersFromCsv(csvFile);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        addFolder(cardFolder);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * checks whether cardfolder already exists in the model when importing file"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private boolean isCardFolderExists(String cardFolderName) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (CardFolder cardFolder : folders) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            if (cardFolderName.equals(cardFolder.getFolderName())) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void setTestCsvPath(String path) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        csvManager.setTestDefaultPath(path);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public String getDefaultPath() {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return csvManager.getDefaultPath();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * returns the corresponding {@code List\u003cReadOnlyCardFolder\u003e} from the list of integer indexes"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private List\u003cReadOnlyCardFolder\u003e returnValidCardFolders(List\u003cInteger\u003e cardFolderExports) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e readOnlyCardFolders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cIndex\u003e indexList \u003d cardFolderExports.stream().map(Index::fromOneBased).collect(Collectors.toList());"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (Index index : indexList) {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                ReadOnlyCardFolder cardFolder \u003d folders.get(index.getZeroBased());"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                readOnlyCardFolders.add(cardFolder);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                throw new CardFolderNotFoundException(index.displayIndex());"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return readOnlyCardFolders;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 218,
      "yichong96": 76,
      "dlqs": 56,
      "-": 148,
      "KerrynEer": 98,
      "mmdlow": 10
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/ReadOnlyCardFolder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Unmodifiable view of an card folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public interface ReadOnlyCardFolder extends Observable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    String MESSAGE_CONSTRAINTS \u003d \"Folder name can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /** Maximum number of scores to keep in list */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    int MAX_NUM_FOLDER_SCORES \u003d 10;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns an unmodifiable view of the cards list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * This list will not contain any duplicate cards."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    ObservableList\u003cCard\u003e getCardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the name of the folder."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    String getFolderName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Returns a list of folder scores"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    List\u003cDouble\u003e getFolderScores();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if passed in list of cards has the same cards as the folder."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Used to test equality between a folder\u0027s contents over time, since folder"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * equality is enforced via folder name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    boolean hasSameCards(ObservableList\u003cCard\u003e otherCardList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 17,
      "dlqs": 13,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Path getcardFolderFilesPath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Path cardFolderFilesPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        setcardFolderFilesPath(newUserPrefs.getcardFolderFilesPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Path getcardFolderFilesPath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cardFolderFilesPath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setcardFolderFilesPath(Path cardFolderFilesPath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(cardFolderFilesPath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.cardFolderFilesPath \u003d cardFolderFilesPath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 cardFolderFilesPath.equals(o.cardFolderFilesPath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return Objects.hash(guiSettings, cardFolderFilesPath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cardFolderFilesPath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 10,
      "dlqs": 2,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/VersionedCardFolder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * {@code CardFolder} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class VersionedCardFolder extends CardFolder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final List\u003cReadOnlyCardFolder\u003e cardFolderStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public VersionedCardFolder(ReadOnlyCardFolder initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStateList.add(new CardFolder(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Saves a copy of the current {@code CardFolder} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStateList.add(new CardFolder(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStateList.subList(currentStatePointer + 1, cardFolderStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Restores the card folder to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        resetData(cardFolderStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Restores the card folder to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        resetData(cardFolderStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if {@code undo()} has card folder states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if {@code redo()} has card folder states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return currentStatePointer \u003c cardFolderStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!(other instanceof VersionedCardFolder)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder otherVersionedCardFolder \u003d (VersionedCardFolder) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // check past states have same folder name and cards"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (int i \u003d 0; i \u003c cardFolderStateList.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            ReadOnlyCardFolder state \u003d cardFolderStateList.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            ReadOnlyCardFolder otherState \u003d otherVersionedCardFolder.cardFolderStateList.get(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (!state.equals(otherState) || !state.hasSameCards(otherState.getCardList())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // present state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return super.equals(otherVersionedCardFolder)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 hasSameCards(otherVersionedCardFolder.getCardList())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedCardFolder.currentStatePointer;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Checks whether the latest version of this card folder has the same folder name as {@code other}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean hasSameFolderName(String name) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ReadOnlyCardFolder currentState \u003d cardFolderStateList.get(cardFolderStateList.size() - 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return currentState.getFolderName().equals(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            super(\"Current state pointer at start of cardFolderState list, unable to undo.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            super(\"Current state pointer at end of cardFolderState list, unable to redo.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 126,
      "dlqs": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/Answer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * Represents a Card\u0027s answer in the card folder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAnswer(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Answers can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public final String fullAnswer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Constructs a {@code Answer}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @param answer A valid answer number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        fullAnswer \u003d answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if a given string is a valid answer number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return fullAnswer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                \u0026\u0026 fullAnswer.equals(((Answer) other).fullAnswer)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return fullAnswer.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 10,
      "dlqs": 2,
      "-": 32,
      "mmdlow": 8
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/Card.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Represents a Card in the card folder."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * {@code CardType} representing the type of Card question."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public enum CardType {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        MCQ,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        SINGLE_ANSWER"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private int answerIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private List\u003cString\u003e completeOptions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private final Score score;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private final Set\u003cOption\u003e options \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private final Set\u003cHint\u003e hints \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private CardType type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public Card(Question question, Answer answer, Score score, Set\u003cOption\u003e options, Set\u003cHint\u003e hints) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        requireAllNonNull(question, answer, score, options, hints);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.options.addAll(options);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.hints.addAll(hints);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.completeOptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        options.forEach(option -\u003e completeOptions.add(option.optionValue));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        completeOptions.add(answer.fullAnswer);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        answerIndex \u003d completeOptions.indexOf(answer.fullAnswer) + 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (options.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            this.type \u003d CardType.SINGLE_ANSWER;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            this.type \u003d CardType.MCQ;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns an immutable {@code Hint} set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public Set\u003cHint\u003e getHints() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return Collections.unmodifiableSet(hints);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns an immutable {@code Option} set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public Set\u003cOption\u003e getOptions() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return Collections.unmodifiableSet(options);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns the assigned {@code CardType} of this Card."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public CardType getCardType() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns a list of options, inclusive of the answer, for MCQ cards."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public List\u003cString\u003e getCompleteMcqOptions() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return completeOptions;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public int getAnswerIndex() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return answerIndex;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Randomizes the order of completeOptions list and updates answerIndex."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void shuffleMcqOptions() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Collections.shuffle(completeOptions);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        answerIndex \u003d completeOptions.indexOf(answer.fullAnswer) + 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        System.out.println(answerIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Returns true if both cards of the same question also have the same answer, but not necessarily the same hint."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * This defines a weaker notion of equality between two cards."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public boolean isSameCard(Card otherCard) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (otherCard \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return otherCard !\u003d null"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 otherCard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 (otherCard.getAnswer().equals(getAnswer()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Returns true if both cards have the same identity and data fields."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * This defines a stronger notion of equality between two cards."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card otherCard \u003d (Card) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return otherCard.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 otherCard.getAnswer().equals(getAnswer())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                \u0026\u0026 otherCard.getOptions().equals(getOptions())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 otherCard.getScore().equals(getScore())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 otherCard.getHints().equals(getHints());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return Objects.hash(question, answer, score, hints);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        builder.append(getQuestion())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .append(\" Answer: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .append(getAnswer())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .append(\" Incorrect options: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .append(getOptions())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                .append(\" Score: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                .append(getScore())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                .append(\" Hints: \");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        getHints().forEach(builder::append);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 16,
      "dlqs": 31,
      "-": 54,
      "mmdlow": 73
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/Option.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * Represents a Card\u0027s incorrect Option, if any, in the card folder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOption(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "public class Option {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Options can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String VALIDATION_INDEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public final String optionValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Constructs a {@code Option}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @param value A valid option value."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public Option(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        checkArgument(isValidOption(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.optionValue \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns true if a given string is a valid option value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static boolean isValidOption(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return test.matches(VALIDATION_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                || (other instanceof Option // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                \u0026\u0026 optionValue.equals(((Option) other).optionValue)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return optionValue.hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return \u0027[\u0027 + optionValue + \u0027]\u0027;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "mmdlow": 50
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/Question.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Represents a Card\u0027s question in the card folder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "public class Question implements Comparable\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Questions can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * The first character of the knowitall must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public final String fullQuestion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Question(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        checkArgument(isValidQuestion(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        fullQuestion \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return fullQuestion;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 fullQuestion.equals(((Question) other).fullQuestion)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public int compareTo(Question other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return fullQuestion.compareTo(other.fullQuestion);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return fullQuestion.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 12,
      "dlqs": 9,
      "-": 39,
      "mmdlow": 2
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/QuestionContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class QuestionContainsKeywordsPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(card.getQuestion().fullQuestion, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 7,
      "dlqs": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/Score.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * Represents a Card\u0027s score in the card folder."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidScore(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "public class Score implements Comparable\u003cScore\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Score can take a float between 0 and 1 or a string a/b,\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            + \"where 0 \u003c\u003d a \u003c\u003d b and a and b are integers.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public final int correctAttempts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public final int totalAttempts;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Constructs an {@code Score}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param score A valid score string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public Score(String score) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        checkArgument(isValidScore(score), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.correctAttempts \u003d parseCorrectAttempts(score);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.totalAttempts \u003d parseTotalAttempts(score);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Constructs an {@code Score}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param correctAttempts A valid number of correct attempts."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param totalAttempts A valid number of total attempts."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public Score(int correctAttempts, int totalAttempts) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        requireNonNull(correctAttempts);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        requireNonNull(totalAttempts);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        checkArgument(isValidScore(correctAttempts, totalAttempts), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.correctAttempts \u003d correctAttempts;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.totalAttempts \u003d totalAttempts;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Returns true if a given string is a valid score."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static boolean isValidScore(String score) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return isValidScore(parseCorrectAttempts(score), parseTotalAttempts(score));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Returns true if given integers form valid score."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static boolean isValidScore(int correctAttempts, int totalAttempts) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return 0 \u003c\u003d correctAttempts \u0026\u0026 correctAttempts \u003c\u003d totalAttempts;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Returns score as correctAttempts divided by totalAttempts"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @return score A double between 0 and 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public double getAsDouble() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (totalAttempts \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return (double) correctAttempts / totalAttempts;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Returns number of correct attempts as integer from score string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param score Score formatted as string"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @return correctAttempts The number of correct attempts"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static int parseCorrectAttempts(String score) throws NumberFormatException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String[] splitString \u003d score.split(\"/\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (splitString.length !\u003d 2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new NumberFormatException(\"Score is not formatted correctly.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return Integer.parseInt(splitString[0]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Returns number of total attempts as integer from score string."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param score Score formatted as string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @return totalAttempts The number of total attempts"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static int parseTotalAttempts(String score) throws NumberFormatException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String[] splitString \u003d score.split(\"/\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (splitString.length !\u003d 2) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new NumberFormatException(\"Score is not formatted correctly.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return Integer.parseInt(splitString[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return String.format(\"%d/%d\", correctAttempts, totalAttempts);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                || (other instanceof Score // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 correctAttempts \u003d\u003d (((Score) other).correctAttempts)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u0026\u0026 totalAttempts \u003d\u003d (((Score) other).totalAttempts));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public int compareTo(Score other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // Get percentage difference and multiply by 100 to compare as int"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return (int) (100 * (this.getAsDouble() - other.getAsDouble()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return Objects.hash(correctAttempts, totalAttempts);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlqs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 134
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/UniqueCardList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * A card is considered unique by comparing using {@code Card#isSameCard(Card)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * cards uses Card#isSameCard(Card) for equality so as to ensure that the card being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * unique in terms of identity in the UniqueCardList. However, the removal of a card uses Card#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * as to ensure that the card with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * @see Card#isSameCard(Card)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class UniqueCardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if the list contains an equivalent card as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the number of cards in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * The card must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Replaces the card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (!target.isSameCard(editedCard) \u0026\u0026 contains(editedCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        internalList.set(index, editedCard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCards(UniqueCardList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Replaces the contents of this list with {@code cards}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code cards} must not contain duplicate cards."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireAllNonNull(cards);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!cardsAreUnique(cards)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        internalList.setAll(cards);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Sorts the list using {@code comparator}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param comparator Comparator to sort cards with."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void sortCards(Comparator\u003cCard\u003e comparator) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                || (other instanceof UniqueCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private boolean cardsAreUnique(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                if (cards.get(i).isSameCard(cards.get(j))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 132,
      "dlqs": 22
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/exceptions/CardNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 5,
      "dlqs": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/card/exceptions/DuplicateCardException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class DuplicateCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public DuplicateCardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        super(\"Operation would result in duplicate cards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 10,
      "dlqs": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/hint/Hint.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.hint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * Represents a Hint in the card folder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHintName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "public class Hint {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Hints can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public final String hintName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Constructs a {@code Hint}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @param hintName A valid hint name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public Hint(String hintName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        requireNonNull(hintName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        checkArgument(isValidHintName(hintName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.hintName \u003d hintName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns true if a given string is a valid hint name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static boolean isValidHintName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                || (other instanceof Hint // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                \u0026\u0026 hintName.equals(((Hint) other).hintName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return hintName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return \u0027[\u0027 + hintName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "mmdlow": 52
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Score;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Contains utility methods for populating {@code CardFolder} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static Card[] getSampleCards() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new Card[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            new Card(new Question(\"What is the best Software Engineering module?\"), new Answer(\"CS2103T\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    new Score(5, 10),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    Collections.emptySet(), getHintSet(\"Best taken with CS2101\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            new Card(new Question(\"What is the best flashcard application?\"), new Answer(\"Know-It-All\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    new Score(10, 60),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    getOptionSet(\"Anki\", \"Physical Flashcards\"), getHintSet(\"The answer is obvious\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            new Card(new Question(\"_____ benefits memorisation.\"), new Answer(\"Repetition\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    new Score(0, 24),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    Collections.emptySet(), Collections.emptySet()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static ReadOnlyCardFolder getSampleCardFolder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder sampleAb \u003d new CardFolder(getSampleFolderName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        sampleAb.setFolderScores(getSampleFolderScore());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (Card sampleCard : getSampleCards()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            sampleAb.addCard(sampleCard);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static String getSampleFolderName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return \"Sample Folder\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static String getSampleFolderFileName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return \"Sample Folder.json\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static List\u003cDouble\u003e getSampleFolderScore() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(0.5, 0.6, 0.7));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns a hint set containing the list of strings given."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static Set\u003cHint\u003e getHintSet(String... strings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .map(Hint::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns an option set containing the list of strings given."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static Set\u003cOption\u003e getOptionSet(String... strings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .map(Option::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 24,
      "dlqs": 16,
      "-": 23,
      "mmdlow": 13
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/CardFolderStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Represents a storage for {@link CardFolder}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public interface CardFolderStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Path getcardFolderFilesPath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns CardFolder data as a {@link ReadOnlyCardFolder}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Optional\u003cReadOnlyCardFolder\u003e readCardFolder() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see #getcardFolderFilesPath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Optional\u003cReadOnlyCardFolder\u003e readCardFolder(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns a the name of the card folder, which uniquely identifies it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     *  Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    Optional\u003cString\u003e getCardFolderName() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Saves the given {@link ReadOnlyCardFolder} to the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @param cardFolder cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void saveCardFolder(ReadOnlyCardFolder cardFolder) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see #saveCardFolder(ReadOnlyCardFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void saveCardFolder(ReadOnlyCardFolder cardFolder, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Deletes the CardFolder at the {@code filePath}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void deleteCardFolder(Path filePath) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 53,
      "dlqs": 4
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/JsonAdaptedCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Jackson-friendly version of {@link Card}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "class JsonAdaptedCard {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private final String score;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private final List\u003cJsonAdaptedOption\u003e optionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private final List\u003cJsonAdaptedHint\u003e hintList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Constructs a {@code JsonAdaptedCard} with the given card details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public JsonAdaptedCard(@JsonProperty(\"question\") String question, @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                           @JsonProperty(\"score\") String score,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                           @JsonProperty(\"option\") List\u003cJsonAdaptedOption\u003e optionList,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                           @JsonProperty(\"hint\") List\u003cJsonAdaptedHint\u003e hintList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (optionList !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            this.optionList.addAll(optionList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (hintList !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            this.hintList.addAll(hintList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Converts a given {@code Card} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public JsonAdaptedCard(Card source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        question \u003d source.getQuestion().fullQuestion;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        answer \u003d source.getAnswer().fullAnswer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        score \u003d source.getScore().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        optionList.addAll(source.getOptions().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .map(JsonAdaptedOption::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        hintList.addAll(source.getHints().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .map(JsonAdaptedHint::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Converts this Jackson-friendly adapted card object into the model\u0027s {@code Card} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted card."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        final List\u003cOption\u003e cardOptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        final List\u003cHint\u003e cardHints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        for (JsonAdaptedOption option : optionList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            cardOptions.add(option.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        for (JsonAdaptedHint hint : hintList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            cardHints.add(hint.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (score \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Score.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (!Score.isValidScore(score)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        final Score modelScore \u003d new Score(score);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        final Set\u003cHint\u003e modelHints \u003d new HashSet\u003c\u003e(cardHints);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        final Set\u003cOption\u003e modelOptions \u003d new HashSet\u003c\u003e(cardOptions);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return new Card(modelQuestion, modelAnswer, modelScore, modelOptions, modelHints);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 26,
      "dlqs": 18,
      "-": 41,
      "mmdlow": 27
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/JsonAdaptedHint.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * Jackson-friendly version of {@link Hint}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "class JsonAdaptedHint {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private final String hintName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Constructs a {@code JsonAdaptedHint} with the given {@code hintName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public JsonAdaptedHint(String hintName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.hintName \u003d hintName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Converts a given {@code Hint} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public JsonAdaptedHint(Hint source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        hintName \u003d source.hintName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public String getHintName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return hintName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Converts this Jackson-friendly adapted hint object into the model\u0027s {@code Hint} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted hint."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public Hint toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (!Hint.isValidHintName(hintName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            throw new IllegalValueException(Hint.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return new Hint(hintName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "mmdlow": 45
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/JsonAdaptedOption.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " * Jackson-friendly version of {@link Option}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "public class JsonAdaptedOption {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private final String optionValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Constructs a {@code JsonAdaptedOption} with the given {@code optionValue}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public JsonAdaptedOption(String optionValue) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.optionValue \u003d optionValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Converts a given {@code Option} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public JsonAdaptedOption(Option source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        optionValue \u003d source.optionValue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public String getOptionValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return optionValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Converts this Jackson-friendly adapted option object into the model\u0027s {@code Option} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted hint."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public Option toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (!Option.isValidOption(optionValue)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            throw new IllegalValueException(Option.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return new Option(optionValue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "mmdlow": 44
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/JsonCardFolderStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A class to access CardFolder data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class JsonCardFolderStorage implements CardFolderStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCardFolderStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public JsonCardFolderStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Path getcardFolderFilesPath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Optional\u003cReadOnlyCardFolder\u003e readCardFolder() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return readCardFolder(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Similar to {@link #readCardFolder()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Optional\u003cReadOnlyCardFolder\u003e readCardFolder(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Optional\u003cJsonSerializableCardFolder\u003e jsonCardFolder \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                filePath, JsonSerializableCardFolder.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!jsonCardFolder.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            logger.info(\"File not found at \" + filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return Optional.of(jsonCardFolder.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Optional\u003cString\u003e getCardFolderName() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Optional\u003cReadOnlyCardFolder\u003e readOnlyCardFolder \u003d readCardFolder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!readOnlyCardFolder.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return Optional.of(readOnlyCardFolder.get().getFolderName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void saveCardFolder(ReadOnlyCardFolder cardFolder) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        saveCardFolder(cardFolder, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Similar to {@link #saveCardFolder(ReadOnlyCardFolder)}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void saveCardFolder(ReadOnlyCardFolder cardFolder, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(cardFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCardFolder(cardFolder), filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void deleteCardFolder(Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        FileUtil.deleteFile(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 37,
      "dlqs": 7,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/JsonSerializableCardFolder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * An Immutable CardFolder that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "@JsonRootName(value \u003d \"cardfolder\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "class JsonSerializableCardFolder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"Cards list contains duplicate card(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final String folderName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private final List\u003cDouble\u003e folderScores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final List\u003cJsonAdaptedCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Constructs a {@code JsonSerializableCardFolder} with the given cards."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public JsonSerializableCardFolder(@JsonProperty(\"folderName\") String folderName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                                      @JsonProperty(\"cards\") List\u003cJsonAdaptedCard\u003e cards,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                                      @JsonProperty(\"folderScores\") List\u003cDouble\u003e folderScores) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.folderName \u003d folderName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.folderScores.addAll(folderScores);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.cards.addAll(cards);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Converts a given {@code ReadOnlyCardFolder} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCardFolder}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public JsonSerializableCardFolder(ReadOnlyCardFolder source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cards.addAll(source.getCardList().stream().map(JsonAdaptedCard::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderName \u003d source.getFolderName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        folderScores.addAll(source.getFolderScores());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Converts this card folder into the model\u0027s {@code CardFolder} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardFolder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder cardFolder \u003d new CardFolder(folderName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        cardFolder.setFolderScores(folderScores);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (JsonAdaptedCard jsonAdaptedCard : cards) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Card card \u003d jsonAdaptedCard.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (cardFolder.hasCard(card)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            cardFolder.addCard(card);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cardFolder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 24,
      "dlqs": 11,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    String FILE_FORMAT \u003d \".json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void readCardFolders(List\u003cReadOnlyCardFolder\u003e readFolders) throws Exception;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void saveCardFolder(ReadOnlyCardFolder cardFolder, int index) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    void saveCardFolders(List\u003cReadOnlyCardFolder\u003e cardFolders, Path cardFolderFilesPath) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 12,
      "dlqs": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Manages storage of CardFolder data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private List\u003cCardFolderStorage\u003e cardFolderStorageList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public StorageManager(List\u003cCardFolderStorage\u003e cardFolderStorageList, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.cardFolderStorageList \u003d new ArrayList\u003c\u003e(cardFolderStorageList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardFolder methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void readCardFolders(List\u003cReadOnlyCardFolder\u003e readFolders) throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Exception exception \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (CardFolderStorage cardFolderStorage : cardFolderStorageList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Optional\u003cReadOnlyCardFolder\u003e cardFolder \u003d readCardFolder(cardFolderStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardFolder.ifPresent(readFolders::add);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                exception \u003d e;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (exception !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw exception;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Reads a {@code ReadOnlyCardFolder} from a {@code CardFolderStorage}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @return {@code Optional.empty} if the file is not found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Optional\u003cReadOnlyCardFolder\u003e readCardFolder(CardFolderStorage cardFolderStorage)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + cardFolderStorage.getcardFolderFilesPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cardFolderStorage.readCardFolder(cardFolderStorage.getcardFolderFilesPath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Saves the CardFolder to the specified filePath"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void saveCardFolder(ReadOnlyCardFolder cardFolder, int index) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assert index \u003c cardFolderStorageList.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Path filePath \u003d cardFolderStorageList.get(index).getcardFolderFilesPath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStorageList.get(index).saveCardFolder(cardFolder, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void saveCardFolders(List\u003cReadOnlyCardFolder\u003e cardFolders, Path path) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStorageList.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Clear directory before saving"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            clearDirectory(path);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (ReadOnlyCardFolder cardFolder : cardFolders) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Path filePath \u003d path.resolve(cardFolder.getFolderName() + Storage.FILE_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            CardFolderStorage cardFolderStorage \u003d new JsonCardFolderStorage(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            cardFolderStorageList.add(cardFolderStorage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            cardFolderStorage.saveCardFolder(cardFolder);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Deletes every file at the specified {@code path}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * If {@code path} is a file, only the file will be deleted. If {@code path} is a folder, all files inside"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * the folder (but not the folder itself) will be deleted."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void clearDirectory(Path path) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cPath\u003e pathsToDelete \u003d Files.walk(path)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .filter(Files::isRegularFile)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (Path pathToDelete : pathsToDelete) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Files.deleteIfExists(pathToDelete);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 68,
      "dlqs": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * Represents a storage for {@link seedu.knowitall.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Saves the given {@link seedu.knowitall.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/csvmanager/CsvCommands.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage.csvmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.IncorrectCsvHeadersException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * API for export and import of card folders"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": "interface CsvCommands {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    CardFolder readFoldersFromCsv(CsvFile csvFile) throws IOException, CommandException,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            IncorrectCsvHeadersException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    void writeFoldersToCsv(List\u003cReadOnlyCardFolder\u003e cardFolders) throws IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 18,
      "dlqs": 4
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/csvmanager/CsvFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage.csvmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * Represents a Csv file for either import or export"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class CsvFile {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File name should not be left blank and should have\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \".csv format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String FILE_EXT_REGEX \u003d \"\\\\.(?\u003d[^.]+$)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public final String filename;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public CsvFile(String filename) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static boolean isValidFileName(String filename) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return !isFileNameEmpty(filename) \u0026\u0026 isCorrectFileExtension(filename);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static boolean isFileNameEmpty(String filename) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return filename.isEmpty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Returns true if file extension is of .csv format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static boolean isCorrectFileExtension(String filename) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(FILE_EXT_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(filename);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return filename.split(FILE_EXT_REGEX)[1].equals(\"csv\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public String getFileNameWithoutExt() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return this.filename.split(FILE_EXT_REGEX)[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return obj \u003d\u003d this || obj instanceof CsvFile \u0026\u0026 ((CsvFile) obj).filename.equals(this.filename);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return filename.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 56,
      "dlqs": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/csvmanager/CsvManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage.csvmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.IncorrectCsvHeadersException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * Manages the importing and exporting of flashcards into model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class CsvManager implements CsvCommands {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String COMMA_DELIMITTER \u003d \",\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String NEW_LINE_SEPARATOR \u003d \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String CARD_HEADERS \u003d \"Question,Answer,Hints,Options\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String TEST_FOLDER_PATH \u003d \"test\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private String defaultPath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private boolean isImportTest \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public CsvManager() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        defaultPath \u003d getDefaultFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public CardFolder readFoldersFromCsv (CsvFile csvFile) throws IOException, CommandException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            IllegalArgumentException, IncorrectCsvHeadersException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (!fileExists(csvFile)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String filePath \u003d defaultPath + \"/\" + csvFile.filename;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String filename \u003d csvFile.filename;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String folderName \u003d filename.split(\"\\\\.\")[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        CardFolder cardFolder \u003d new CardFolder(folderName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String header \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (!checkCorrectHeaders(header)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new IncorrectCsvHeadersException(Messages.MESSAGE_INCORRECT_CSV_FILE_HEADER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            // split quotes within card field by commas"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            String[] stringCard \u003d line.split(\",(?\u003d(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\", -1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            Card card \u003d buildCard(stringCard);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            cardFolder.addCard(card);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (bufferedReader !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return cardFolder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Builds a card object from each line of the csv file imported. Throws IllegalArgumentException in the event that"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * lines in csv file do not follow {@code Card} field specifications."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private Card buildCard(String[] rawStringCard) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // cardValues \u003d {\"question\", \"answer\", \"hint\",\"option\"}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // Allow only one option per card"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String[] stringCard \u003d Arrays.copyOfRange(rawStringCard, 0, 4);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // remove double quotes from each string array"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String[] cardValues \u003d Stream.of(stringCard).map(line -\u003e line.replace(\"\\\"\", \"\"))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                .toArray(String[]::new);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Question question \u003d new Question(cardValues[0]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Answer answer \u003d new Answer(cardValues[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Set\u003cOption\u003e optionSet \u003d buildOptions(cardValues);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Set\u003cHint\u003e hintSet \u003d buildHint(cardValues);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return new Card(question, answer, new Score(0, 0), optionSet, hintSet);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * reconstructs a set of options from each line of the csv file to import"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private Set\u003cOption\u003e buildOptions(String[] card) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Set\u003cOption\u003e optionSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String optionVal \u003d card[3];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (optionVal.equals(\"\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return optionSet;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Option option \u003d new Option(optionVal);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        optionSet.add(option);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return optionSet;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * reconstructs a set of hints from each line of the csv file to import."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private Set\u003cHint\u003e buildHint(String[] card) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        Set\u003cHint\u003e hintSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String hint \u003d card[2];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (hint.equals(\"\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return hintSet;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        hintSet.add(new Hint(hint));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return hintSet;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * checks whether the headers of the imported file conforms to the specifications of the csv file header. Throws"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Command Exception if file is empty or headers do not follow specifications."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private boolean checkCorrectHeaders(String header) throws CommandException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (header \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EMPTY_CSV_FILE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String[] cardHeaders \u003d CARD_HEADERS.split(\",\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String[] fileHeaders \u003d header.split(\",\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (cardHeaders.length !\u003d fileHeaders.length) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (int i \u003d 0; i \u003c cardHeaders.length; i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            if (!cardHeaders[i].toLowerCase().equals(fileHeaders[i].toLowerCase())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void writeFoldersToCsv(List\u003cReadOnlyCardFolder\u003e cardFolders) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (ReadOnlyCardFolder readOnlyCardFolder : cardFolders) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            List\u003cCard\u003e cardList \u003d readOnlyCardFolder.getCardList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            String folderName \u003d getFolderName(readOnlyCardFolder);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(defaultPath + \"/\" + folderName + \".csv\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            fileWriter.append(CARD_HEADERS + NEW_LINE_SEPARATOR);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            for (Card card : cardList) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                String cardRepresentation \u003d getCardString(card);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                fileWriter.append(cardRepresentation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                fileWriter.append(NEW_LINE_SEPARATOR);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            fileWriter.flush();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private String getFolderName(ReadOnlyCardFolder folder) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String folderName \u003d folder.getFolderName();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (isImportTest) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return folder + \" \" + TEST_FOLDER_PATH;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return folderName;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private boolean fileExists(CsvFile csvFile) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return new File(defaultPath + \"/\" + csvFile.filename).exists();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static String getDefaultFilePath() throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return new File(CsvUtils.DEFAULT_FILE_PATH).getCanonicalPath();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public String getDefaultPath() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return defaultPath;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void setTestDefaultPath(String testPath) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        defaultPath \u003d defaultPath + testPath;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (testPath.equals(CsvUtils.DEFAULT_IMPORT_TEST_PATH)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            isImportTest \u003d true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private String getCardString(Card card) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        parseQuestion(card.getQuestion(), stringBuilder);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        parseAnswer(card.getAnswer(), stringBuilder);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        parseHints(card.getHints(), stringBuilder);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        parseOptions(card.getOptions(), stringBuilder);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Parses quotation marks to card field strings if comma value is present within field."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private String parseQuotationMarks(String cardField) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (cardField.contains(\",\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return \"\\\"\" + cardField + \"\\\"\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return cardField;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private void parseQuestion(Question question, StringBuilder stringBuilder) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String questionString \u003d parseQuotationMarks(question.toString());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        stringBuilder.append(questionString + COMMA_DELIMITTER);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private void parseAnswer(Answer answer, StringBuilder stringBuilder) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String answerString \u003d parseQuotationMarks(answer.toString());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        stringBuilder.append(answerString + COMMA_DELIMITTER);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Parses each {@code Set\u003cOption\u003e} of the card attribute into a string"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private void parseOptions(Set\u003cOption\u003e options, StringBuilder stringBuilder) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (options.isEmpty()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            Set\u003cString\u003e optionString \u003d options.stream().map(x -\u003e x.optionValue).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            String toJoin \u003d String.join(\",\", optionString);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            stringBuilder.append(toJoin);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Parses each {@code Set\u003cHint\u003e} of the card attribute into a string"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private void parseHints(Set\u003cHint\u003e hintSet, StringBuilder stringBuilder) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        if (hintSet.isEmpty()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            stringBuilder.append(\"\" + COMMA_DELIMITTER);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            hintSet.forEach(hint -\u003e stringBuilder.append(parseQuotationMarks(hint.hintName))"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                    .append(COMMA_DELIMITTER));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 245,
      "dlqs": 11
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/csvmanager/CsvUtils.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yichong96"
        },
        "content": "package seedu.knowitall.storage.csvmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * Csv utility class that contains file paths for normal and testing usage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class CsvUtils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String DEFAULT_IMPORT_TEST_PATH \u003d \"/src/test/data/CsvCardFolderTest/Import\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String DEFAULT_EXPORT_TEST_PATH \u003d \"/src/test/data/CsvCardFolderTest/\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String DEFAULT_FILE_PATH \u003d \"./\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 11
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/csvmanager/exceptions/CsvManagerNotInitialized.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage.csvmanager.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * Represents an error in the initialization of the csv manager"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class CsvManagerNotInitialized extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public CsvManagerNotInitialized(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 10,
      "dlqs": 1
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/storage/csvmanager/exceptions/IncorrectCsvHeadersException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yichong96"
        },
        "content": "package seedu.knowitall.storage.csvmanager.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * Represents error in reading Csv headers during the import command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class IncorrectCsvHeadersException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public IncorrectCsvHeadersException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 11
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String DEFAULT_CARD_PAGE \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private GridPane cardPage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label cardQuestion;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label options;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label hint;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label score;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cCard\u003e selectedCard) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Load card page when selected card changes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectedCard.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                loadDefaultCard();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            loadCardPage(newValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        loadDefaultCard();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Load the current selected {@code Card} into the browser panel with all card info."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @param card selected to be displayed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void loadCardPage(Card card) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        cardPage.getChildren().clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        cardQuestion.setText(card.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        answer.setText(card.getAnswer().fullAnswer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        score.setText(\"Score: \" + card.getScore().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // Set empty string for hint and options by default"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        hint.setText(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (!card.getHints().isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            assert card.getHints().size() \u003c\u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            card.getHints().forEach(hintVal -\u003e hint.setText(\"Hint: \" + hintVal.hintName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        options.setText(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (!card.getOptions().isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            answer.setText(\"1) \" + answer.getText());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            int index \u003d 2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            for (Option option : card.getOptions()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                options.setText(options.getText() + index + \") \" + option.optionValue + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        cardPage.getChildren().addAll(cardQuestion, answer, score, options, hint);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Loads a default blank card with a background that matches the general theme."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private void loadDefaultCard() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        cardPage.getChildren().clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        cardQuestion.setText(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        answer.setText(\"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        score.setText(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        options.setText(\"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        hint.setText(\"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        cardPage.getChildren().addAll(cardQuestion, answer, score, options, hint);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 5,
      "dlqs": 4,
      "-": 40,
      "mmdlow": 53
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/CardListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Panel containing the list of cards."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String FXML \u003d \"CardListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private ListView\u003cCard\u003e cardListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardListPanel(ObservableList\u003cCard\u003e cardList, ObservableValue\u003cCard\u003e selectedCard,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                         Consumer\u003cCard\u003e onSelectedCardChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardListView.setItems(cardList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new CardListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            logger.fine(\"Selection in card list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            onSelectedCardChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectedCard.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            logger.fine(\"Selected card changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected card,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (Objects.equals(cardListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                int index \u003d cardListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardThumbnail}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    class CardListViewCell extends ListCell\u003cCard\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        protected void updateItem(Card card, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                setGraphic(new CardThumbnail(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 68,
      "dlqs": 3
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/CardMainScreen.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * An UI component for the list of cards and browser panel after entering a folder"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class CardMainScreen extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private static final String FXML \u003d \"CardMainScreen.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private StackPane cardListPanelPlaceholder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public CardMainScreen(CardListPanel cardListPanel, BrowserPanel browser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        this.cardListPanelPlaceholder.getChildren().add(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        this.browserPlaceholder.getChildren().add(browser.getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "KerrynEer": 24
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/CardThumbnail.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardThumbnail extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String FXML \u003d \"CardListThumbnail.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private HBox cardThumbnailPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardThumbnail(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        question.setText(card.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!(other instanceof CardThumbnail)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardThumbnail card \u003d (CardThumbnail) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 this.card.equals(card.card);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 13,
      "dlqs": 2,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlqs"
        },
        "content": "         * @see seedu.knowitall.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 5,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/FolderListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.VersionedCardFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Panel containing the list of folders."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class FolderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String FXML \u003d \"FolderListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FolderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private ListView\u003cVersionedCardFolder\u003e folderListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public FolderListPanel(ObservableList\u003cVersionedCardFolder\u003e folderList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderListView.setItems(folderList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderListView.setCellFactory(listView -\u003e new FolderListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void refreshContent() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderListView.setCellFactory(listView -\u003e new FolderListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CardFolder} using a {@code CardFolderThumbnail}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    class FolderListViewCell extends ListCell\u003cVersionedCardFolder\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        protected void updateItem(VersionedCardFolder folder, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            super.updateItem(folder, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            if (empty || folder \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                setGraphic(new FolderThumbnail(folder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 48,
      "dlqs": 3
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/FolderThumbnail.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * An UI component that displays information of a {@code CardFolder}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class FolderThumbnail extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String FXML \u003d \"FolderListThumbnail.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String CARD_COUNT_POSTFIX_SINGLE \u003d \" card\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String CARD_COUNT_POSTFIX \u003d \" cards\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public final CardFolder folder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private HBox folderThumbnailPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Label folderName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Label folderSize;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public FolderThumbnail(CardFolder folder, int displayedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.folder \u003d folder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderName.setText(folder.getFolderName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        int cardCount \u003d folder.countCards();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (cardCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            folderSize.setText(cardCount + CARD_COUNT_POSTFIX_SINGLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderSize.setText(cardCount + CARD_COUNT_POSTFIX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!(other instanceof FolderThumbnail)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        FolderThumbnail folder \u003d (FolderThumbnail) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return id.getText().equals(folder.id.getText())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                \u0026\u0026 this.folder.equals(folder.folder);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 57,
      "dlqs": 2
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private FolderListPanel folderListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private CardListPanel cardListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private ReportDisplay reportDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private CardMainScreen cardMainScreen;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private TestSession testSession;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private StackPane fullScreenPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedCardProperty());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderListPanel \u003d new FolderListPanel(logic.getFilteredCardFolders());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardListPanel \u003d new CardListPanel(logic.getFilteredCards(), logic.selectedCardProperty(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                logic::setSelectedCard);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        cardMainScreen \u003d new CardMainScreen(cardListPanel, browserPanel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        fullScreenPlaceholder.getChildren().add(folderListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Starts test session UI."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private void handleStartTestSession(Card card) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testSession \u003d new TestSession(card);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Region testSessionRegion \u003d (testSession).getRoot();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        fullScreenPlaceholder.getChildren().add(testSessionRegion);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooter.updateStatusBarInTestSession();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Display the next card in this test session."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private void handleNextCardTestSession(Card card) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        fullScreenPlaceholder.getChildren().remove(fullScreenPlaceholder.getChildren().size() - 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        testSession \u003d new TestSession(card);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Region testSessionRegion \u003d (testSession).getRoot();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        fullScreenPlaceholder.getChildren().add(testSessionRegion);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Ends test session and display back card main screen."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private void handleEndTestSession() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        fullScreenPlaceholder.getChildren().remove(fullScreenPlaceholder.getChildren().size() - 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooter.updateStatusBarInFolder();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Refreshes the side panel to display the contents of the new active folder."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void handleEnterFolder() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardListPanel \u003d new CardListPanel(logic.getFilteredCards(), logic.selectedCardProperty(),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                logic::setSelectedCard);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardMainScreen \u003d new CardMainScreen(cardListPanel, browserPanel);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        fullScreenPlaceholder.getChildren().add(cardMainScreen.getRoot());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooter.updateStatusBarInFolder();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Refreshes the side panel to display all folders."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void handleExitFolder() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        fullScreenPlaceholder.getChildren().remove(fullScreenPlaceholder.getChildren().size() - 1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderListPanel.refreshContent();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooter.updateStatusBarInHomeDirectory();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Refreshes the side panel to display updated information of all folders."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void handleEditFolder() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        folderListPanel.refreshContent();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Start a report display by displaying the report page to the user."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private void handleReport() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        reportDisplay \u003d new ReportDisplay(logic.getCardFolder());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Region reportRegion \u003d (reportDisplay).getRoot();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        fullScreenPlaceholder.getChildren().add(reportRegion);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooter.updateStatusBarInReportDisplay();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Ends report display and display back card main screen."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private void handleEndReport() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        fullScreenPlaceholder.getChildren().remove(fullScreenPlaceholder.getChildren().size() - 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooter.updateStatusBarInFolder();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Show the page with correct answer."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private void handleCorrectAnswer() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assert testSession !\u003d null;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testSession.handleCorrectAnswer();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Show the page with wrong answer."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private void handleWrongAnswer() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assert testSession !\u003d null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testSession.handleWrongAnswer();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void updateCardListPanel() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        fullScreenPlaceholder.getChildren();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardListPanel getCardListPanel() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cardListPanel;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @see seedu.knowitall.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            switch (commandResult.getType()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case SHOW_HELP:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case IS_EXIT:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case ENTERED_FOLDER:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                handleEnterFolder();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case EXITED_FOLDER:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                handleExitFolder();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            case EDITED_FOLDER:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                handleEditFolder();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            case START_TEST_SESSION:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                handleStartTestSession(commandResult.getTestSessionCard());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case END_TEST_SESSION:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                handleEndTestSession();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case ENTERED_REPORT:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                handleReport();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case EXITED_REPORT:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                handleEndReport();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            case SHOW_NEXT_CARD:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                handleNextCardTestSession(commandResult.getTestSessionCard());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case ANSWER_CORRECT:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                handleCorrectAnswer();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            case ANSWER_WRONG:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                handleWrongAnswer();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 44,
      "dlqs": 44,
      "-": 168,
      "KerrynEer": 67,
      "mmdlow": 8
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/ReportDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.scene.chart.AreaChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * An UI component when user enters a test session."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "public class ReportDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final String FXML \u003d \"ReportDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final String MESSAGE_SCORE_CHANGE_PREFIX \u003d \"Your latest score has changed by \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final int NUM_QUESTIONS_SHOWN \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final int MAX_QUESTION_CHAR \u003d 60;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    // Pixel values used for manipulating string offset (see below)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final int PIXELS_PER_CHARACTER \u003d 6;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final int CHARACTER_OFFSET \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    // number change display colors, in hex"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final String CHANGE_POSITIVE \u003d \"#47AB6C\"; // green"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final String CHANGE_NEGATIVE \u003d \"#ED553B\"; // red"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final String CHANGE_SAME \u003d \"#BDB76B\"; // dark khaki"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private FlowPane container;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private GridPane reportDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Label questionsDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private AreaChart\u003cInteger, Double\u003e graph;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Label folderName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Label tagLine;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Label performanceLine;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Label numberLine;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public ReportDisplay(ReadOnlyCardFolder cardFolder) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        displayTitle(cardFolder.getFolderName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        displayGraph(cardFolder.getFolderScores());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        displayQuestions(cardFolder.getCardList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        displayTagLine(\"Last \" + cardFolder.getFolderScores().size() + \" scores, latest on the right\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        reportDisplay.getChildren().clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        reportDisplay.getChildren().add(folderName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        reportDisplay.getChildren().add(tagLine);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        reportDisplay.getChildren().add(graph);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        reportDisplay.getChildren().add(questionsDisplay);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (cardFolder.getFolderScores().size() \u003e 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            displayPerformanceLine(cardFolder.getFolderScores());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            reportDisplay.getChildren().add(performanceLine);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            reportDisplay.getChildren().add(numberLine);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Displays a line indicating change in performance depending on last 2 scores."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param folderScores List of Double of folderScores, at least \u003e 1 in length."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private void displayPerformanceLine(List\u003cDouble\u003e folderScores) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assert folderScores.size() \u003e 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // Calculate difference based on last two scores"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        double scoreAfter \u003d folderScores.get(folderScores.size() - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        double scoreBefore \u003d folderScores.get(folderScores.size() - 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        double difference \u003d Math.abs(scoreAfter - scoreBefore);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        performanceLine.setText(MESSAGE_SCORE_CHANGE_PREFIX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlqs"
        },
        "content": "         * The number needs to be in a different Label because has its own style i.e. the highlighting and color change."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlqs"
        },
        "content": "         * This will translate the Label manually by the correct number of pixels so that it is just to the right of the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlqs"
        },
        "content": "         * Label directly preceding this one, i.e. the one containing \"...has changed by \"."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlqs"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        numberLine.setTranslateX((MESSAGE_SCORE_CHANGE_PREFIX.length() - CHARACTER_OFFSET) * PIXELS_PER_CHARACTER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        if (scoreAfter \u003e scoreBefore) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            numberLine.setStyle(\"-fx-background-color: \" + CHANGE_POSITIVE + \";\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            numberLine.setText(String.format(\"+%.2f\", difference));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        } else if (scoreAfter \u003d\u003d scoreBefore) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            numberLine.setStyle(\"-fx-background-color: \" + CHANGE_SAME + \";\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            numberLine.setText(String.format(\"\u003d%.2f\", difference));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            numberLine.setStyle(\"-fx-background-color: \" + CHANGE_NEGATIVE + \";\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            numberLine.setText(String.format(\"-%.2f\", difference));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Adds the list of folderScores (as the Y values) to a graph."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param folderScores List of Double scores to be added"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private void displayGraph(List\u003cDouble\u003e folderScores) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        graph.getData().clear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        XYChart.Series\u003cInteger, Double\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        for (int x \u003d 0; x \u003c folderScores.size(); x \u003d x + 1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            series.getData().add(new XYChart.Data\u003cInteger, Double\u003e(x + 1, folderScores.get(x)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        graph.setMaxHeight(250);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        graph.getData().add(series);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Concatenate the questions and their scores to be added below the graph."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * @param cards To be concatenated."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private void displayQuestions(ObservableList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String result \u003d \"\\t\\t\\t\\t\\t\\t\\t\\tLowest scoring questions:\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        int toShow \u003d Math.min(NUM_QUESTIONS_SHOWN, cards.size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String question;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        for (int i \u003d 0; i \u003c toShow; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            Card card \u003d cards.get(i);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            question \u003d card.getQuestion().fullQuestion;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            if (question.length() \u003e MAX_QUESTION_CHAR) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                question \u003d question.substring(0, MAX_QUESTION_CHAR) + \" ...\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            question \u003d \"Question: \" + question;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            result +\u003d question + \" | \" + \"Score: \" + card.getScore() + \"\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        questionsDisplay.setText(result);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private void displayTitle(String name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        folderName.setText(\"Report for \" + name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private void displayTagLine(String string) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        tagLine.setText(string);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlqs"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dlqs": 164
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String STATUS_IN_HOME_DIRECTORY \u003d \"In Home Directory\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String STATUS_IN_FOLDER \u003d \"Inside Folder\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String STATUS_IN_TEST_SESSION \u003d \"In Test Session\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String STATUS_IN_REPORT_DISPLAY \u003d \"In Report Display\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Label currentStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Initialise status bar to display user default status to be in home directory when user launch the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        currentStatus.setText(STATUS_IN_HOME_DIRECTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Updates status bar to state current user is currently in the home directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void updateStatusBarInHomeDirectory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        updateStatusBar(STATUS_IN_HOME_DIRECTORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Updates status bar to state current user is currently in a folder."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void updateStatusBarInFolder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        updateStatusBar(STATUS_IN_FOLDER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Updates status bar to state current user is currently in a test session."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void updateStatusBarInTestSession() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        updateStatusBar(STATUS_IN_TEST_SESSION);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Updates status bar to state current user is currently in a report display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void updateStatusBarInReportDisplay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        updateStatusBar(STATUS_IN_REPORT_DISPLAY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Updates status bar to display the specified status."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private void updateStatusBar(String status) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        currentStatus.setText(status);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 26,
      "KerrynEer": 37
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/TestSession.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * An UI component when user enters a test session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class TestSession extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private static final String FXML \u003d \"TestSession.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String MESSAGE_CORRECT_ANSWER \u003d \"\\\"Correct answer, good job!\\\"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String MESSAGE_WRONG_ANSWER \u003d \"\\\"Wrong answer, better luck next time!\\\"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Card cardToTest; //final?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private GridPane testSessionPage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label testCardQuestion;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label testCardHint;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label testCardAnswer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label testCardOptions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Label testMessage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public TestSession() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public TestSession(Card cardToTest) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        this.cardToTest \u003d cardToTest;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        displayCard(cardToTest);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Updates the UI to show test session page with the question of the specified card"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * @param cardToTest card to be tested in this page of test session"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void displayCard(Card cardToTest) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        testSessionPage.getChildren().clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testCardQuestion.setText(cardToTest.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testCardHint.setText(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (!cardToTest.getHints().isEmpty() \u0026\u0026 cardToTest.getHints().size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            System.out.println(\"got hint\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            cardToTest.getHints().forEach(hintVal -\u003e testCardHint.setText(\"Hint: \" + hintVal.hintName));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testCardOptions.setText(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (cardToTest.getCardType() \u003d\u003d Card.CardType.MCQ) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            cardToTest.shuffleMcqOptions();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            List\u003cString\u003e completeOptions \u003d cardToTest.getCompleteMcqOptions();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d completeOptions.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                testCardOptions.setText(testCardOptions.getText() + i + \") \" + completeOptions.get(i - 1) + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testCardAnswer.setText(\"Correct answer:\\n\" + cardToTest.getAnswer().fullAnswer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testSessionPage.getChildren().addAll(testCardQuestion, testCardHint, testCardOptions);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Updates the UI to show the answer for a correctly answered card."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void handleCorrectAnswer() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        testSessionPage.setStyle(\"-fx-background-color: #90EE90;\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testMessage.setText(MESSAGE_CORRECT_ANSWER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testSessionPage.getChildren().addAll(testCardAnswer, testMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Updates the UI to show the answer for a wrongly answered card."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void handleWrongAnswer() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        testSessionPage.setStyle(\"-fx-background-color: #ef6262;\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testMessage.setText(MESSAGE_WRONG_ANSWER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        testSessionPage.getChildren().addAll(testCardAnswer, testMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "KerrynEer": 35,
      "mmdlow": 48
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/know-it-all_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/knowitall/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003cGridPane id\u003d\"cardPage\" fx:id\u003d\"cardPage\" styleClass\u003d\"background-card\" stylesheets\u003d\"@DarkTheme.css\" alignment\u003d\"center\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "          hgap\u003d\"10\" vgap\u003d\"10\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003cpadding\u003e\u003cInsets top\u003d\"25\" bottom\u003d\"25\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003cLabel fx:id\u003d\"cardQuestion\" styleClass\u003d\"label-card\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003cLabel fx:id\u003d\"hint\" styleClass\u003d\"label-card\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"label-card\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003cLabel fx:id\u003d\"options\" styleClass\u003d\"label-card\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"5\" GridPane.halignment\u003d\"LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003cLabel fx:id\u003d\"score\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "mmdlow": 15,
      "KerrynEer": 2
    }
  },
  {
    "path": "src/main/resources/view/CardListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \u003cListView fx:id\u003d\"cardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/CardListThumbnail.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003cHBox id\u003d\"cardThumbnailPane\" fx:id\u003d\"cardThumbnailPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/CardMainScreen.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003cVBox fx:id\u003d\"cardList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    \u003cStackPane fx:id\u003d\"cardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "KerrynEer": 23
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ".background-test {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    -fx-background-color: #54d3c2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ".background-card {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-background-color: #005e5e;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-padding: 20;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-vgap: 10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ".label-card {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-text-fill: #8c8c8c;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "#cardQuestion.label-card {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 18pt;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "#hint.label-card {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "#answer.label-card {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 24pt;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "#options.label-card {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-family: \"Segoe UI Semilight\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "#score.label-card {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ".label-dark {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ".label-test-ans {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-text-alignment: \"center\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ".label-test {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    -fx-background-color: #5F9EA0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ".list-cell:filled:selected #cardThumbnailPane #folderThumbnailPane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "#cardThumbnailPane #folderThumbnailPane {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "#folderList{"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "#filterField, #cardListPanel, #cardWebpage {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "#hints {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "#hints .label {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 7,
      "-": 346,
      "mmdlow": 70,
      "KerrynEer": 2
    }
  },
  {
    "path": "src/main/resources/view/FolderListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003cVBox fx:id\u003d\"folderList\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \u003cListView VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"folderListView\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 13
    }
  },
  {
    "path": "src/main/resources/view/FolderListThumbnail.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003cHBox id\u003d\"folderThumbnailPane\" fx:id\u003d\"folderThumbnailPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        \u003cLabel fx:id\u003d\"folderName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "      \u003cLabel fx:id\u003d\"folderSize\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$folderSize\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 32
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "         title\u003d\"Know-It-All\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \u003cImage url\u003d\"@/images/know-it-all_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "          \u003cStackPane fx:id\u003d\"fullScreenPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 49,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/resources/view/ReportDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?import javafx.scene.chart.AreaChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003cScrollPane id\u003d\"scrollPane\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \u003ccontent\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        \u003cFlowPane id\u003d\"container\" fx:id\u003d\"container\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" alignment\u003d\"center\" orientation\u003d\"VERTICAL\" vgap\u003d\"10\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u003cGridPane id\u003d\"reportDisplay\" fx:id\u003d\"reportDisplay\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" alignment\u003d\"center\" hgap\u003d\"10\" vgap\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003cLabel fx:id\u003d\"folderName\" styleClass\u003d\"label-header\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003cLabel fx:id\u003d\"tagLine\" styleClass\u003d\"label-header\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.columnSpan\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003cLabel fx:id\u003d\"performanceLine\" styleClass\u003d\"label-header\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003cLabel fx:id\u003d\"numberLine\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" styleClass\u003d\"label-header\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003cAreaChart fx:id\u003d\"graph\" legendVisible\u003d\"false\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"3\" prefHeight\u003d\"400.0\" prefWidth\u003d\"1000.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                            \u003cxAxis\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                                \u003cNumberAxis autoRanging\u003d\"false\" lowerBound\u003d\"1\" side\u003d\"BOTTOM\" tickUnit\u003d\"1\" upperBound\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                            \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                            \u003cyAxis\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                                \u003cNumberAxis autoRanging\u003d\"false\" lowerBound\u003d\"0.00\" side\u003d\"LEFT\" tickUnit\u003d\"0.1\" upperBound\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                            \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                            \u003ccursor\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                                \u003cCursor fx:constant\u003d\"CROSSHAIR\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                            \u003c/cursor\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003c/AreaChart\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                        \u003cLabel fx:id\u003d\"questionsDisplay\" styleClass\u003d\"label-header\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"4\" \u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dlqs": 41
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "  \u003cLabel fx:id\u003d\"currentStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "KerrynEer": 1
    }
  },
  {
    "path": "src/main/resources/view/TestSession.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003cGridPane id\u003d\"testSessionPage\" fx:id\u003d\"testSessionPage\" styleClass\u003d\"background-test\" stylesheets\u003d\"@DarkTheme.css\" alignment\u003d\"center\" hgap\u003d\"10\" vgap\u003d\"10\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "   \u003cpadding\u003e\u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003cLabel fx:id\u003d\"testCardQuestion\" styleClass\u003d\"label-test\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003cLabel fx:id\u003d\"testCardHint\" styleClass\u003d\"label-dark\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003cLabel fx:id\u003d\"testCardAnswer\" styleClass\u003d\"label-test-ans\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003cLabel fx:id\u003d\"testCardOptions\" styleClass\u003d\"label-dark\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003cLabel fx:id\u003d\"testMessage\" styleClass\u003d\"label-dark\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "KerrynEer": 8,
      "mmdlow": 14
    }
  },
  {
    "path": "src/test/data/JsonCardFolderStorageTest/invalidAndValidCardCardFolder.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"folderName\": \"Invalid and Valid\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"cards\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\": \"Valid Card\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\": \"0/0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\": \"Card With Invalid Answer Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"answer\": \" \","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\": \"0/0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  \"folderScores\": [ 0 ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 5,
      "dlqs": 4,
      "-": 3,
      "mmdlow": 1
    }
  },
  {
    "path": "src/test/data/JsonCardFolderStorageTest/invalidCardCardFolder.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"folderName\" : \"Invalid question\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"cards\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"question\": \" \","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\": \"1/2\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  \"folderScores\" : [ 0 ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 3,
      "-": 2,
      "mmdlow": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableCardFolderTest/duplicateThumbnailCardFolder.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"folderName\": \"Duplicate Thumbnail\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"cards\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\": \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\": \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\": \"1/2\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"hint\": [ \"friends\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\": \"Alice Pauline\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\": \"94351253\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\": \"3/4\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  \"folderScores\" : [ 0 ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 6,
      "dlqs": 5,
      "-": 3,
      "mmdlow": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableCardFolderTest/invalidCardCardFolder.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"folderName\": \"Invalid Card\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"cards\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"question\": \" \","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\" : \"1/2\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  \"folderScores\" : [ 0 ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 3,
      "-": 2,
      "mmdlow": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableCardFolderTest/typicalCardsCardFolder.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"_comment\": \"CardFolder save file which contains the same Card values as in TypicalCards#getTypicalCardFolder()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"folderName\": \"Typical Cards\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"cards\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\" : \"94351253\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\" : \"0/0\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"hint\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\" : \"Benson Meier\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\" : \"98765432\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\" : \"0/0\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"hint\" : [ \"owesMoney\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\" : \"95352563\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\" : \"0/0\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"hint\" : [ ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\" : \"87652533\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\" : \"0/0\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"hint\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\" : \"9482224\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\" : \"0/0\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"hint\" : [ ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\" : \"9482427\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\" : \"2/3\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"hint\" : [ ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"question\" : \"George Best\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    \"answer\" : \"9482442\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    \"score\" : \"1/2\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    \"hint\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "  \"folderScores\" : [ 0.5 ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 17,
      "dlqs": 9,
      "-": 8,
      "mmdlow": 7
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"cardFolderFilesPath\" : \"cardfolder.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "  \"cardFolderFilesPath\" : \"cardfolder.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Stage getStage(String stageTitle) throws StageNotFoundException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "-": 118
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String CURRENT_CARD_QUESTION \u003d \"#cardQuestion\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private String lastRememberedQuestion;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @return the string form of the {@code Question} of the card currently in the {@code BrowserPanel}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public String getCurrentQuestion() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Label currentCardQuestion \u003d getChildNode(CURRENT_CARD_QUESTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return currentCardQuestion.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns the question of the currently loaded card."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Remembers the question of the currently loaded card."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void rememberQuestion() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        lastRememberedQuestion \u003d getCurrentQuestion();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns true if the current question is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * {@code rememberQuestion()} call."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public boolean isQuestionChanged() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return !lastRememberedQuestion.equals(getCurrentQuestion());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        getChildNode(CURRENT_CARD_QUESTION).applyCss();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "mmdlow": 18
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CardListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Provides a handle for {@code CardListPanel} containing the list of {@code CardThumbnail}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardListPanelHandle extends NodeHandle\u003cListView\u003cCard\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String CARD_LIST_VIEW_ID \u003d \"#cardListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardThumbnailPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Optional\u003cCard\u003e lastRememberedSelectedCardCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardListPanelHandle(ListView\u003cCard\u003e cardListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        super(cardListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns a handle to the selected {@code CardThumbnailHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardThumbnailHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e selectedCardList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (selectedCardList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"Card list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .map(CardThumbnailHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedCardList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Navigates the listview to display {@code card}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void navigateToCard(Card card) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        if (!getRootNode().getItems().contains(card)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new IllegalArgumentException(\"Card does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            getRootNode().scrollTo(card);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Selects the {@code CardThumbnail} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the card handle of a card associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardThumbnailHandle getCardCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .map(CardThumbnailHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .filter(handle -\u003e handle.equals(getCard(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Card getCard(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Remembers the selected {@code CardThumbnail} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void rememberSelectedCardCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            lastRememberedSelectedCardCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            lastRememberedSelectedCardCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Returns true if the selected {@code CardThumbnail} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code rememberSelectedCardCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean isSelectedCardCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return lastRememberedSelectedCardCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return !lastRememberedSelectedCardCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    || !lastRememberedSelectedCardCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 37,
      "dlqs": 1,
      "-": 120,
      "mmdlow": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CardThumbnailHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Provides a handle to a card card in the card list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardThumbnailHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String QUESTION_FIELD_ID \u003d \"#question\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Label questionLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardThumbnailHandle(Node cardNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        questionLabel \u003d getChildNode(QUESTION_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return questionLabel.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns true if this handle contains {@code card}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public boolean equals(Card card) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return getQuestion().equals(card.getQuestion().fullQuestion);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 1,
      "-": 26,
      "mmdlow": 3
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private CardListPanelHandle cardListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Initialises the {@code cardListPanel} and {@code browserPanel}. The reason a separate method is necessary"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * is because these two elements will not be present on app initialisation, but only when a folder is entered."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void initialiseCardListPanelHandle() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardListPanel \u003d new CardListPanelHandle(getChildNode(CardListPanelHandle.CARD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.CURRENT_CARD_QUESTION));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardListPanelHandle getCardListPanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cardListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 10,
      "-": 47,
      "mmdlow": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private static final String CURRENT_STATUS_ID \u003d \"#currentStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private final Labeled currentStatusNode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        currentStatusNode \u003d getChildNode(CURRENT_STATUS_ID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Returns the text of the current status displayed in the status bar."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public String getCurrentStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        return currentStatusNode.getText();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "KerrynEer": 6
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.CardFolderStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.JsonCardFolderStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.StorageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TestUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.ui.UiManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    protected Supplier\u003cReadOnlyCardFolder\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyCardFolder\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            JsonCardFolderStorage jsonCardFolderStorage \u003d new JsonCardFolderStorage(saveFileLocation);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                jsonCardFolderStorage.saveCardFolder(initialDataSupplier.get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCardFolderStorage\u003e cardFolderStorageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Path cardFolderFilesPath \u003d userPrefs.getcardFolderFilesPath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStorageList.add(new JsonCardFolderStorage(cardFolderFilesPath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        storage \u003d new StorageManager(cardFolderStorageList, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        userPrefs.setcardFolderFilesPath(saveFileLocation);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns a defensive copy of the card folder data stored inside the storage file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardFolder readFirstStorageCardFolder() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            List\u003cReadOnlyCardFolder\u003e folders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            storage.readCardFolders(folders);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return new CardFolder(folders.get(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"Data is not in the CardFolder format.\", dce);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"Unknown error encountered.\", e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the file path of the storage files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return saveFileLocation;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model copy \u003d new ModelManager(Collections.singletonList(model.getActiveCardFolder()),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        copy.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredCards());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Makes model enter folder at {@code index}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void enterFolder(int index) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 54,
      "dlqs": 17,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        final Index fifthCardIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(fifthCardIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(fifthCardIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(fifthCardIndex.equals(fifthCardIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(fifthCardIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(fifthCardIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(fifthCardIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 7,
      "dlqs": 1,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/know-it-all_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/util/InvalidationListenerManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cObject\u003e dummyObservable \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int counter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerOnce_listenerAdded() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(dummyObservable, observable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerTwice_listenerAddedTwice() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, counter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_listenersBeingCalled_listenerNotCalled() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_singleListenerAdded_listenerRemoved() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_sameListenerAddedTwice_firstListenerRemoved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_listenersBeingCalled_listenerStillCalled() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.removeListener(listener1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(serializableTestClass.getQuestion(), SerializableTestClass.getQuestionTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 3,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.QUESTION_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.CardFolderStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.JsonCardFolderStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonCardFolderStorage cardFolderStorage \u003d new JsonCardFolderStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCardFolderStorage\u003e cardFolderStorageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStorageList.add(cardFolderStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cardFolderStorageList, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Setup LogicManager with JsonCardFolderIoExceptionThrowingStub"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonCardFolderStorage cardFolderStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new JsonCardFolderIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCardFolderStorage\u003e cardFolderStorageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStorageList.add(cardFolderStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cardFolderStorageList, userPrefsStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_SAMPLE_1 + ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card expectedCard \u003d new CardBuilder(CARD_1).withHint().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.addCard(expectedCard);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void getFilteredCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        logic.getFilteredCards().remove(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(Collections.singletonList(model.getActiveCardFolder()),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     *      - {@code expectedModel}\u0027s card folder was saved to the storage file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static class JsonCardFolderIoExceptionThrowingStub extends JsonCardFolderStorage {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        private JsonCardFolderIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void saveCardFolder(ReadOnlyCardFolder cardFolder, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 29,
      "dlqs": 22,
      "-": 145,
      "KerrynEer": 2
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_newCard_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.addCard(validCard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(new AddCommand(validCard), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validCard), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_duplicateCard_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardInList \u003d model.getActiveCardFolder().getCardList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(new AddCommand(cardInList), model, commandHistory,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 15,
      "dlqs": 10,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.VersionedCardFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void constructor_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_cardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ModelStubAcceptingCardAdded modelStub \u003d new ModelStubAcceptingCardAdded();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(Arrays.asList(validCard), modelStub.cardsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_duplicateCard_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validCard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCard(validCard);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card alice \u003d new CardBuilder().withQuestion(\"Alice\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card bob \u003d new CardBuilder().withQuestion(\"Bob\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public Path getcardFolderFilesPath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void setcardFolderFilesPath(Path cardFolderFilesPath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void resetCardFolder(ReadOnlyCardFolder newData) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public ReadOnlyCardFolder getActiveCardFolder() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public List\u003cReadOnlyCardFolder\u003e getCardFolders() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public void testCardFolder() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public Card getCurrentTestedCard() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public void setCurrentTestedCard(Card card) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public void endTestSession() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public boolean testNextCard() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public boolean markAttemptedAnswer(Answer attemptedAnswer) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        public boolean markAttemptedMcqAnswer(int answerIndex) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public Card createScoredCard(Card cardToMark, boolean markCorrect) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public void setCardAsAnswered() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        public boolean isCardAlreadyAnswered() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        public void exportCardFolders(List\u003cInteger\u003e cardFolderExports) throws IOException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public boolean inReportDisplay() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        };"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public void enterReportDisplay() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        };"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public void exitReportDisplay() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        };"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        public void importCardFolders(CsvFile csvFile) throws IOException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        public void setTestCsvPath(String path) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        public String getDefaultPath() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void setCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void removeSelectedCard() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public boolean hasFolder(CardFolder cardFolder) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public boolean hasFolderWithName(String name) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void deleteFolder(int index) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void addFolder(CardFolder cardFolder) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void renameFolder(int index, String newName) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public int getActiveCardFolderIndex() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void enterFolder(int newIndex) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void exitFolderToHome() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCards() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public ObservableList\u003cVersionedCardFolder\u003e getFilteredFolders() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void updateFilteredCard(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public void sortFilteredCard(Comparator\u003cCard\u003e comparator) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public boolean canUndoActiveCardFolder() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public boolean canRedoActiveCardFolder() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void undoActiveCardFolder() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void redoActiveCardFolder() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void commitActiveCardFolder() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public ReadOnlyProperty\u003cCard\u003e selectedCardProperty() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public Card getSelectedCard() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void setSelectedCard(Card card) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public State getState() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * A Model stub that contains a single card."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private class ModelStubWithCard extends ModelStub {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        private final Card card;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ModelStubWithCard(Card card) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public State getState() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return State.IN_FOLDER;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return this.card.isSameCard(card);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * A Model stub that always accept the card being added."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private class ModelStubAcceptingCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::isSameCard);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public State getState() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            return State.IN_FOLDER;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public void commitActiveCardFolder() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 120,
      "yichong96": 21,
      "dlqs": 48,
      "-": 185,
      "KerrynEer": 44,
      "mmdlow": 5
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/AnswerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_ANSWER_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Contains integration tests (interaction with the Model) and junit tests for {@code AnswerCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class AnswerCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Answer firstAttemptedAnswer \u003d new Answer(VALID_ANSWER_1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Answer secondAttemptedAnswer \u003d new Answer(VALID_ANSWER_2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand answerFirstCommand \u003d new AnswerCommand(firstAttemptedAnswer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand answerSecondCommand \u003d new AnswerCommand(secondAttemptedAnswer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(answerFirstCommand.equals(answerFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand answerFirstCommandCopy \u003d new AnswerCommand(firstAttemptedAnswer);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(answerFirstCommand.equals(answerFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(answerFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(answerFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(answerFirstCommand.equals(answerSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_correctAnswerAttempt_markCorrect() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(AnswerCommand.MESSAGE_ANSWER_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.ANSWER_CORRECT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.testCardFolder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card testedCard \u003d model.getCurrentTestedCard();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand answerCommand \u003d new AnswerCommand(testedCard.getAnswer());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.setCardAsAnswered();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card scoredCard \u003d expectedModel.createScoredCard(testedCard, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.setCard(testedCard, scoredCard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandSuccess(answerCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_wrongAnswerAttempt_markWrong() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(AnswerCommand.MESSAGE_ANSWER_SUCCESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.ANSWER_WRONG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.testCardFolder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card testedCard \u003d model.getCurrentTestedCard();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand answerCommand \u003d new AnswerCommand(new Answer(VALID_ANSWER_2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.setCardAsAnswered();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card scoredCard \u003d expectedModel.createScoredCard(testedCard, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.setCard(testedCard, scoredCard);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandSuccess(answerCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_invalidAnswerOutsideTestSession_fail() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand answerCommand \u003d new AnswerCommand(new Answer(VALID_ANSWER_2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(answerCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_invalidAnswerAfterAnsweredAttempt_fail() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_ANSWER_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card testedCard \u003d model.getCurrentTestedCard();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand answerCommand \u003d new AnswerCommand(testedCard.getAnswer());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.setCardAsAnswered();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(answerCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 5,
      "dlqs": 20,
      "KerrynEer": 90
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/ChangeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Contains integration tests (interaction with the Model) and junit tests for {@code ChangeCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class ChangeCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_validChangeCommandIntoFolder_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ChangeCommand changeCommand \u003d new ChangeCommand(TypicalIndexes.INDEX_FIRST_CARD_FOLDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                        ChangeCommand.MESSAGE_ENTER_FOLDER_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                        TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getOneBased()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                CommandResult.Type.ENTERED_FOLDER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(changeCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_validChangeCommandExitFolder_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ChangeCommand changeCommand \u003d new ChangeCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ChangeCommand.MESSAGE_EXIT_FOLDER_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                CommandResult.Type.EXITED_FOLDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(changeCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_invalidEnterFolderCommand_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ChangeCommand changeCommand \u003d new ChangeCommand(TypicalIndexes.INDEX_FIRST_CARD_FOLDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_COMMAND_INSIDE_FOLDER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(changeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.exitFolderToHome();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        changeCommand \u003d new ChangeCommand(TypicalIndexes.INDEX_SECOND_CARD_FOLDER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedMessage \u003d Messages.MESSAGE_INVALID_FOLDER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(changeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_invalidExitFolderCommand_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.exitFolderToHome();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ChangeCommand changeCommand \u003d new ChangeCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(changeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ChangeCommand changeExitFolderCommand \u003d new ChangeCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ChangeCommand changeEnterFolderOneCommand \u003d new ChangeCommand(TypicalIndexes.INDEX_FIRST_CARD_FOLDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ChangeCommand changeEnterFolderTwoCommand \u003d new ChangeCommand(TypicalIndexes.INDEX_SECOND_CARD_FOLDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(changeExitFolderCommand.equals(changeExitFolderCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(changeExitFolderCommand.equals(new ChangeCommand()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(changeEnterFolderOneCommand.equals(new ChangeCommand(TypicalIndexes.INDEX_FIRST_CARD_FOLDER)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(changeExitFolderCommand.equals(changeEnterFolderOneCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(changeEnterFolderOneCommand.equals(changeEnterFolderTwoCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(changeEnterFolderOneCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 86,
      "dlqs": 10
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalFolderName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_emptyCardFolder_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model model \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_nonEmptyCardFolder_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.resetCardFolder(new CardFolder(getTypicalFolderName()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 14,
      "dlqs": 9,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card sampleTestCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", CommandResult.Type.NONE)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandResult.Type.SHOW_HELP)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandResult.Type.IS_EXIT)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // different testSessionCard value -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandResult.Type.START_TEST_SESSION)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // different endTestSession value -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandResult.Type.END_TEST_SESSION)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // different AnswerCommandResult value -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandResult.Type.ANSWER_CORRECT)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandResult.Type.ANSWER_WRONG)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card sampleTestCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.SHOW_HELP).hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.IS_EXIT).hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // different testSessionCard value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                CommandResult.Type.START_TEST_SESSION).hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // different endTestSession value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.END_TEST_SESSION).hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // different AnswerCommandResult value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.ANSWER_CORRECT).hashCode());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.ANSWER_WRONG).hashCode());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 20,
      "-": 45,
      "KerrynEer": 18,
      "mmdlow": 2
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_FILENAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_FOLDERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_OPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final Index TEST_FOLDER_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String VALID_QUESTION_1 \u003d \"Sample Question 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String VALID_QUESTION_2 \u003d \"Sample Question 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String VALID_ANSWER_1 \u003d \"Sample Answer 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String VALID_ANSWER_2 \u003d \"Sample Answer 2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String VALID_SCORE_1 \u003d \"0/0\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String VALID_OPTION_1 \u003d \"Sample Option 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String VALID_OPTION_2 \u003d \"Sample Option 2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String VALID_HINT_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String VALID_HINT_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String VALID_FOLDER_NAME_1 \u003d \"Sample Folder 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String VALID_FOLDER_NAME_2 \u003d \"Sample Folder 2\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String VALID_FILENAME \u003d \"sample_folder.csv\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String INVALID_FILENAME \u003d \"sample_folder.json\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String QUESTION_DESC_SAMPLE_1 \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String QUESTION_DESC_SAMPLE_2 \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String ANSWER_DESC_SAMPLE_1 \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String ANSWER_DESC_SAMPLE_2 \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String OPTION_DESC_SAMPLE_1 \u003d \" \" + PREFIX_OPTION + VALID_OPTION_1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String OPTION_DESC_SAMPLE_2 \u003d \" \" + PREFIX_OPTION + VALID_OPTION_2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String HINT_DESC_FRIEND \u003d \" \" + PREFIX_HINT + VALID_HINT_FRIEND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String HINT_DESC_HUSBAND \u003d \" \" + PREFIX_HINT + VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String FOLDER_DESC_SAMPLE_1 \u003d \" \" + PREFIX_FOLDERNAME + VALID_FOLDER_NAME_1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String FOLDER_DESC_SAMPLE_2 \u003d \" \" + PREFIX_FOLDERNAME + VALID_FOLDER_NAME_2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String FILENAME_DESC_SAMPLE \u003d \" \" + PREFIX_FILENAME + VALID_FILENAME;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String INVALID_FILENAME_EXT \u003d \" \" + PREFIX_FILENAME + INVALID_FILENAME;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION; // empty string not allowed for questions"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER; // empty string not allowed for answers"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String INVALID_OPTION_DESC \u003d \" \" + PREFIX_OPTION; // empty string not allowed for options"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String INVALID_OPTION_SAME_AS_ANSWER_1 \u003d \" \" + PREFIX_OPTION + VALID_ANSWER_1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final String INVALID_HINT_DESC \u003d \" \" + PREFIX_HINT; // empty string not allowed for hints"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String INVALID_FOLDER_DESC \u003d \" \" + PREFIX_FOLDERNAME;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String INVALID_FILENAME_DESC \u003d \" \" + PREFIX_FILENAME;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        DESC_AMY \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_1)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .withAnswer(VALID_ANSWER_1).withOptions(VALID_OPTION_1).withHint(VALID_HINT_FRIEND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        DESC_BOB \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_2)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .withAnswer(VALID_ANSWER_2).withOptions(VALID_OPTION_1, VALID_OPTION_2)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .withHint(VALID_HINT_HUSBAND, VALID_HINT_FRIEND).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * - the card folder, filtered card list and selected card in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder expectedCardFolder \u003d new CardFolder(actualModel.getActiveCardFolder());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCards());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card expectedSelectedCard \u003d actualModel.getSelectedCard();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            assertEquals(expectedCardFolder, actualModel.getActiveCardFolder());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredCards());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            assertEquals(expectedSelectedCard, actualModel.getSelectedCard());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the card at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code model}\u0027s card folder."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void showCardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCards().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card card \u003d model.getFilteredCards().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        final String[] splitQuestion \u003d card.getQuestion().fullQuestion.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.updateFilteredCard(new QuestionContainsKeywordsPredicate(Arrays.asList(splitQuestion[0])));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(1, model.getFilteredCards().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Deletes the first card in {@code model}\u0027s filtered list from {@code model}\u0027s card folder."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void deleteFirstCard(Model model) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card firstCard \u003d model.getFilteredCards().get(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.deleteCard(firstCard);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.commitActiveCardFolder();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 24,
      "yichong96": 12,
      "dlqs": 15,
      "-": 87,
      "KerrynEer": 11,
      "mmdlow": 16
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCards().size() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showNoCard(expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of card folder list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getActiveCardFolder().getCardList().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // delete -\u003e first card deleted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // undo -\u003e reverts cardfolder back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.undoActiveCardFolder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // redo -\u003e same first card deleted again"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.redoActiveCardFolder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCards().size() + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // execution failed -\u003e card folder state not added into model"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // single card folder state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 1. Deletes a {@code Card} from a filtered list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted card in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the card object regardless of indexing."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameCardDeleted() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // delete -\u003e deletes second card in unfiltered card list / first card in filtered card list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // undo -\u003e reverts cardfolder back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.undoActiveCardFolder();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertNotEquals(cardToDelete, model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // redo -\u003e deletes same second card in unfiltered card list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.redoActiveCardFolder();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void showNoCard(Model model) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.updateFilteredCard(p -\u003e false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(model.getFilteredCards().isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 70,
      "dlqs": 14,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/EditCardDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_OPTION_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class EditCardDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCardDescriptor descriptorWithSameValues \u003d new EditCardDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand.EditCardDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                new EditCardDescriptorBuilder(DESC_AMY).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        editedAmy \u003d new EditCardDescriptorBuilder(DESC_AMY).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // different option -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        editedAmy \u003d new EditCardDescriptorBuilder(DESC_AMY).withOptions(VALID_OPTION_2).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // different hint -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        editedAmy \u003d new EditCardDescriptorBuilder(DESC_AMY).withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 5,
      "dlqs": 9,
      "-": 32,
      "KerrynEer": 2,
      "mmdlow": 6
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD, descriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(Collections.singletonList(new CardFolder(model.getActiveCardFolder())),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.setCard(model.getFilteredCards().get(0), editedCard);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCards().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card lastCard \u003d model.getFilteredCards().get(indexLastCard.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardBuilder cardInList \u003d new CardBuilder(lastCard);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card editedCard \u003d cardInList.withQuestion(VALID_QUESTION_2).withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_2)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                .withAnswer(VALID_ANSWER_2).withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastCard, descriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(Collections.singletonList(new CardFolder(model.getActiveCardFolder())),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.setCard(lastCard, editedCard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD, new EditCommand.EditCardDescriptor());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card editedCard \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(Collections.singletonList(new CardFolder(model.getActiveCardFolder())),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardInFilteredList \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card editedCard \u003d new CardBuilder(cardInFilteredList).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_2).build());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(Collections.singletonList(new CardFolder(model.getActiveCardFolder())),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.setCard(model.getFilteredCards().get(0), editedCard);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void execute_invalidEditedAnswerSameAsOption_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD, new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .withAnswer(VALID_ANSWER_1).withOptions(VALID_ANSWER_1).build());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_ILLEGAL_OPTION_CANNOT_BE_SAME_AS_ANSWER;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_duplicateCardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card firstCard \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstCard).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CARD, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_duplicateCardFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // edit card in filtered list into a duplicate in card folder"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardInList \u003d model.getActiveCardFolder().getCardList().get(INDEX_SECOND_CARD.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new EditCardDescriptorBuilder(cardInList).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_invalidCardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCards().size() + 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * but smaller than size of card folder"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_invalidCardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of card folder list"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getActiveCardFolder().getCardList().size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_2).build());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToEdit \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(Collections.singletonList(new CardFolder(model.getActiveCardFolder())),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.setCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // edit -\u003e first card edited"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // undo -\u003e reverts cardfolder back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.undoActiveCardFolder();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // redo -\u003e same first card edited again"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.redoActiveCardFolder();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCards().size() + 1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                .withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // execution failed -\u003e card folder state not added into model"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // single card folder state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 1. Edits a {@code Card} from a filtered list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited card in the"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the card object regardless of indexing."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameCardEdited() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD, descriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(Collections.singletonList(new CardFolder(model.getActiveCardFolder())),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(model.getActiveCardFolderIndex());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToEdit \u003d model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.setCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // edit -\u003e edits second card in unfiltered card list / first card in filtered card list"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // undo -\u003e reverts cardfolder back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.undoActiveCardFolder();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertNotEquals(model.getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased()), cardToEdit);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // redo -\u003e edits same second card in unfiltered card list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.redoActiveCardFolder();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CARD, DESC_AMY);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCardDescriptor copyDescriptor \u003d new EditCommand.EditCardDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CARD, copyDescriptor);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CARD, DESC_AMY)));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CARD, DESC_BOB)));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 111,
      "dlqs": 23,
      "-": 127,
      "mmdlow": 10,
      "KerrynEer": 9
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/EndCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.EndCommand.MESSAGE_END_TEST_SESSION_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Contains integration tests (interaction with the Model) and junit tests for {@code EndCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class EndCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_endTestSession_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.testCardFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.endTestSession();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_END_TEST_SESSION_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.END_TEST_SESSION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandSuccess(new EndCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_endTestSession_fail() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(new EndCommand(), model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "dlqs": 14,
      "KerrynEer": 27
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.IS_EXIT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "dlqs": 8,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import static seedu.knowitall.testutil.SampleBloodCards.getBloodFolder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvUtils;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private Model model \u003d new ModelManager(Arrays.asList(getTypicalCardFolder(), getBloodFolder()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        model.setTestCsvPath(CsvUtils.DEFAULT_EXPORT_TEST_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void execute_exportSingleMultipleFolderIndex_success() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cInteger\u003e singleList \u003d new ArrayList\u003c\u003e(Arrays.asList(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cInteger\u003e multipleList \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        execute_exportValidCardFolderIndexes_success(singleList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        execute_exportValidCardFolderIndexes_success(multipleList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        deleteExportFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private void execute_exportValidCardFolderIndexes_success(List\u003cInteger\u003e folderIndexes) throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(folderIndexes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        CommandResult commandResult \u003d exportCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertEquals(ExportCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Deletes files exported after testing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private void deleteExportFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        File[] files \u003d new File[] {new File(model.getDefaultPath() + \"/\" + \"Typical Cards.csv\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            new File(model.getDefaultPath() + \"/\" + \"Blood.csv\")};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (File file : files) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                boolean isDeleted \u003d file.delete();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                assert (isDeleted);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void execute_exportSingleInvalidCardFolderIndex_failure() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cInteger\u003e myList \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 3));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(myList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        thrown.expectMessage(ExportCommand.MESSAGE_MISSING_CARD_FOLDERS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        CommandResult commandResult \u003d exportCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 75,
      "dlqs": 6
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, CommandResult.Type.SHOW_HELP);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "dlqs": 7,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "dlqs": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import static org.junit.Assert.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import static seedu.knowitall.testutil.SampleBloodCards.getBloodFolder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvUtils;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.exceptions.CsvManagerNotInitialized;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String TYPICAL_CARD_FOLDER \u003d \"Typical Cards.csv\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String TYPICAL_CARD_FOLDER_TEST \u003d \"Typical Cards test.csv\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String INVALID_FILE_NAME \u003d \"Fake Cards.csv\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String BLOOD_CARD_FOLDER \u003d \"Blood.csv\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String BLOOD_CARD_FOLDER_TEST \u003d \"Blood test.csv\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private Model model \u003d new ModelManager(new ArrayList\u003cReadOnlyCardFolder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new ArrayList\u003cReadOnlyCardFolder\u003e(Arrays.asList("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            getTypicalCardFolder(), getBloodFolder())) , new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private File typicalCardsFile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private File typicalCardsFileTest;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private File bloodCardsFile;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private File bloodCardsTestFile;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // set test paths for model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        model.setTestCsvPath(CsvUtils.DEFAULT_IMPORT_TEST_PATH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        expectedModel.setTestCsvPath(CsvUtils.DEFAULT_IMPORT_TEST_PATH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // initialize respective files"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String testDefaultPath \u003d model.getDefaultPath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        typicalCardsFile \u003d new File(testDefaultPath + \"/\" + TYPICAL_CARD_FOLDER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        typicalCardsFileTest \u003d new File(testDefaultPath + \"/\" + TYPICAL_CARD_FOLDER_TEST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        bloodCardsFile \u003d new File(testDefaultPath + \"/\" + BLOOD_CARD_FOLDER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        bloodCardsTestFile \u003d new File(testDefaultPath + \"/\" + BLOOD_CARD_FOLDER_TEST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assert typicalCardsFile.exists();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assert bloodCardsFile.exists();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void execute_importTypicalCards_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        importCardFolderSuccess(TYPICAL_CARD_FOLDER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        importCardFolderSuccess(BLOOD_CARD_FOLDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertTrue(isSameCardFolders(model, expectedModel));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Test import command success message and add flashcards to model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private void importCardFolderSuccess(String foldername)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(new CsvFile(foldername));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        CommandResult commandResult \u003d importCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_SUCCESS, foldername);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void execute_importNonExistentCards_failure() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(new CsvFile(INVALID_FILE_NAME));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        thrown.expectMessage(ImportCommand.MESSAGE_FILE_OPS_FAILURE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        importCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * this method checks whether two models are equal. i.e have the same card folders and cards"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private boolean isSameCardFolders(Model model, Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e cardFolderModel \u003d model.getCardFolders();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e cardFolderExpectedModel \u003d expectedModel.getCardFolders();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertTrue(cardFolderExpectedModel.size() \u003d\u003d cardFolderModel.size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertTrue (isSameCardFolderList(cardFolderModel, cardFolderExpectedModel));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * this helper method checks whether the two models have the same card folders"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private boolean isSameCardFolderList(List\u003cReadOnlyCardFolder\u003e cardFolders,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                                         List\u003cReadOnlyCardFolder\u003e expectedCardFolders) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (int i \u003d 0; i \u003c cardFolders.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            if (!sameCardsInFolder(cardFolders.get(i), expectedCardFolders.get(i))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * this helper method checks whether the two card folders have the same cards"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private boolean sameCardsInFolder(ReadOnlyCardFolder folder, ReadOnlyCardFolder expected) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cCard\u003e folderCardList \u003d folder.getCardList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        List\u003cCard\u003e expectedCardList \u003d expected.getCardList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertTrue (folderCardList.size() \u003d\u003d expectedCardList.size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        int size \u003d folderCardList.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (int index \u003d 0; index \u003c size; index++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            if (!isSameCard(folderCardList.get(index), expectedCardList.get(index))) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * this helper method checks that the two cards are the same. Two cards are the same if they have the same question,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * answer, options and hint"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private boolean isSameCard(Card card, Card expected) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertTrue (card.getHints().equals(expected.getHints()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertTrue (card.getOptions().equals(expected.getOptions()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertTrue (card.getQuestion().equals(expected.getQuestion()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertTrue (card.getAnswer().equals(expected.getAnswer()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void execute_exportCsvFile_correctFile() throws IOException, CsvManagerNotInitialized {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        expectedModel.exportCardFolders(new ArrayList\u003c\u003e(Arrays.asList(1, 2)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        isSameFileContent(typicalCardsFile, typicalCardsFileTest);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        isSameFileContent(bloodCardsFile, bloodCardsTestFile);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Checks if two file contents are equal. Removes line endings for Unix files before comparison"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private void isSameFileContent(File actualFile, File testFile) throws IOException, CsvManagerNotInitialized {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // System.out.println(DEFAULT_IMPORT_TEST_PATH);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assert(actualFile.exists());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        byte[] rawByteF1 \u003d Files.readAllBytes(Paths.get(actualFile.toString()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        byte[] rawByteF2 \u003d Files.readAllBytes(Paths.get(testFile.toString()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // remove cr from file if any"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        byte[] processedF1 \u003d removeCarriageReturn(rawByteF1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        byte[] processedF2 \u003d removeCarriageReturn(rawByteF2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertArrayEquals (processedF1, processedF2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assert (testFile.delete());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Remove unix line ending from imported file"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private byte[] removeCarriageReturn(byte[] file) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (Byte b : file) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            if (b !\u003d 13) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                byteArrayOutputStream.write(b);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return byteArrayOutputStream.toByteArray();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void execute_importDuplicateCsvFile_exception() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(new CsvFile(TYPICAL_CARD_FOLDER));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        thrown.expectMessage(ImportCommand.MESSAGE_DUPLICATE_CARD_FOLDERS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        importCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 199,
      "dlqs": 10
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 6,
      "dlqs": 9,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/NextCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_NEXT_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.NextCommand.MESSAGE_NEXT_QUESTION_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Contains integration tests (interaction with the Model) and junit tests for {@code NextCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class NextCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_nextCommand_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.testCardFolder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.setCardAsAnswered();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.setCardAsAnswered();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.testNextCard();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_NEXT_QUESTION_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                CommandResult.Type.SHOW_NEXT_CARD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandSuccess(new NextCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_invalidNextCommandOutsideTestSession_fail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(new NextCommand(), model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_invalidNextCommandBeforeAnswerAttempt_fail() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_NEXT_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(new NextCommand(), model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 13,
      "KerrynEer": 39
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.deleteFirstCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteFirstCard(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteFirstCard(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.undoActiveCardFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.undoActiveCardFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteFirstCard(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteFirstCard(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.undoActiveCardFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.undoActiveCardFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.redoActiveCardFolder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.redoActiveCardFolder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 12,
      "dlqs": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/ReportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * Contains integration tests (interaction with the Model) and junit tests for {@code ReportCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "public class ReportCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void execute_validReportCommand_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        ReportCommand reportCommand \u003d new ReportCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        expectedModel.enterReportDisplay();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ReportCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.ENTERED_REPORT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertCommandSuccess(reportCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void execute_invalidReportCommandInsideReportSession_fail() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        ReportCommand reportCommand \u003d new ReportCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        expectedModel.enterReportDisplay();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(ReportCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlqs"
        },
        "content": "                CommandResult.Type.ENTERED_REPORT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertCommandSuccess(reportCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertCommandFailure(reportCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 43
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/RevealCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_REVEAL_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Contains integration tests (interaction with the Model) and junit tests for {@code RevealCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class RevealCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_validRevealCommand_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(RevealCommand.MESSAGE_REVEAL_SUCCESS,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                CommandResult.Type.ANSWER_WRONG);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.testCardFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card testedCard \u003d model.getCurrentTestedCard();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        RevealCommand revealCommand \u003d new RevealCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.setCardAsAnswered();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card scoredCard \u003d expectedModel.createScoredCard(testedCard, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.setCard(testedCard, scoredCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.commitActiveCardFolder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandSuccess(revealCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_invalidRevealOutsideTestSession_fail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_OUTSIDE_FULLSCREEN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        RevealCommand revealCommand \u003d new RevealCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(revealCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_invalidRevealAfterAnsweredAttempt_fail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_REVEAL_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.setCardAsAnswered();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        RevealCommand revealCommand \u003d new RevealCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(revealCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KerrynEer": 62
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/SearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SearchCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        SearchCommand findFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(searchFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_zeroKeywords_noCardFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.updateFilteredCard(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCards());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void execute_multipleKeywords_multipleCardsFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.updateFilteredCard(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredCards());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Parses {@code userInput} into a {@code QuestionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private QuestionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 31,
      "dlqs": 12,
      "-": 46,
      "KerrynEer": 7
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index lastCardIndex \u003d Index.fromOneBased(model.getFilteredCards().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_CARD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertExecutionSuccess(lastCardIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCards().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardAtIndex(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of card folder list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getActiveCardFolder().getCardList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * and checks that the model\u0027s selected card is set to the card at {@code index} in the filtered card list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_CARD_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.setSelectedCard(model.getFilteredCards().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 32,
      "dlqs": 14,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        expectedModel.sortFilteredCard(Model.COMPARATOR_ASC_SCORE_CARDS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void execute_sort() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertCommandSuccess(new SortCommand(), model, commandHistory, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 34
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/TestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " * Contains integration tests (interaction with the Model) and junit tests for {@code TestCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class TestCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_validTestCommand_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedModel.testCardFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(TestCommand.MESSAGE_ENTER_TEST_FOLDER_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                CommandResult.Type.START_TEST_SESSION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandSuccess(testCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_invalidTestCommandNotInFolder_fail() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.exitFolderToHome();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(testCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void execute_invalidTestCommandInsideTestSession_fail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        TestCommand testCommand \u003d new TestCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        model.testCardFolder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_OUTSIDE_FOLDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(testCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 4,
      "dlqs": 12,
      "KerrynEer": 35
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.deleteFirstCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolders;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalCardFolders(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteFirstCard(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteFirstCard(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.enterFolder(TypicalIndexes.INDEX_FIRST_CARD_FOLDER.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteFirstCard(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteFirstCard(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.undoActiveCardFolder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.undoActiveCardFolder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 11,
      "dlqs": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_ILLEGAL_OPTION_CANNOT_BE_SAME_AS_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.HINT_DESC_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_HINT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_OPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_OPTION_SAME_AS_ANSWER_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.OPTION_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.QUESTION_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.QUESTION_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card expectedCard \u003d new CardBuilder(CARD_2).withHint(VALID_HINT_FRIEND).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + HINT_DESC_FRIEND, new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_SAMPLE_1 + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + HINT_DESC_FRIEND, new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // multiple answers - last answer accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_1 + ANSWER_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + HINT_DESC_FRIEND, new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // multiple hints - last hint accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2 + HINT_DESC_HUSBAND"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + HINT_DESC_FRIEND, new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // zero hints"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card expectedCard \u003d new CardBuilder(CARD_1).withHint().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_SAMPLE_1 + ANSWER_DESC_SAMPLE_1, new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_2 + ANSWER_DESC_SAMPLE_2, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_SAMPLE_2 + VALID_ANSWER_2, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_2 + VALID_ANSWER_2, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_SAMPLE_2 + HINT_DESC_HUSBAND"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + HINT_DESC_FRIEND, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_SAMPLE_2 + INVALID_ANSWER_DESC + HINT_DESC_HUSBAND"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + HINT_DESC_FRIEND, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // invalid hint"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2 + INVALID_HINT_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                Hint.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // invalid option"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2 + INVALID_OPTION_DESC"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + OPTION_DESC_SAMPLE_2, Option.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_SAMPLE_2, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // same answer and option"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_1"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + INVALID_OPTION_SAME_AS_ANSWER_1, MESSAGE_ILLEGAL_OPTION_CANNOT_BE_SAME_AS_ANSWER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + HINT_DESC_HUSBAND + HINT_DESC_FRIEND,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 26,
      "-": 43,
      "mmdlow": 26,
      "KerrynEer": 14
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/AnswerCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AnswerCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class AnswerCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private AnswerCommandParser parser \u003d new AnswerCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                AnswerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand expectedAnswerCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                new AnswerCommand(new Answer(\"Golgi apparatus\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseSuccess(parser, \"Golgi apparatus \", expectedAnswerCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 6,
      "KerrynEer": 24
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String argsString \u003d \"  some random string /t hint with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + \" value -t\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 147,
      "mmdlow": 3
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/CommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AnswerCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EndCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import seedu.knowitall.logic.commands.RevealCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private final CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(CardUtil.getAddCommand(card));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(new AddCommand(card), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_CARD), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void parseCommand_test() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(parser.parseCommand(TestCommand.COMMAND_WORD) instanceof TestCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(parser.parseCommand(TestCommand.COMMAND_WORD + \" 3\") instanceof TestCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void parseCommand_next() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(parser.parseCommand(NextCommand.COMMAND_WORD) instanceof NextCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(parser.parseCommand(NextCommand.COMMAND_WORD + \" 3\") instanceof NextCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void parseCommand_answer() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String attemptedAnswerInput \u003d \"foo\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        AnswerCommand command \u003d (AnswerCommand) parser.parseCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                AnswerCommand.COMMAND_WORD + \" \" + attemptedAnswerInput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(new AnswerCommand(new Answer(attemptedAnswerInput)), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void parseCommand_reveal() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(parser.parseCommand(RevealCommand.COMMAND_WORD) instanceof RevealCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(parser.parseCommand(RevealCommand.COMMAND_WORD + \" 3\") instanceof RevealCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(card).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                + INDEX_FIRST_CARD.getOneBased() + \" \" + CardUtil.getEditCardDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_CARD, descriptor), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void parseCommand_end() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(parser.parseCommand(EndCommand.COMMAND_WORD) instanceof EndCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(parser.parseCommand(EndCommand.COMMAND_WORD + \" 3\") instanceof EndCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void parseCommand_search() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                SearchCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SearchCommand(new QuestionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_CARD), command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 11,
      "dlqs": 27,
      "-": 106,
      "KerrynEer": 37
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_CARD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.HINT_DESC_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_HINT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.QUESTION_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String HINT_EMPTY \u003d \" \" + PREFIX_HINT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_SAMPLE_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_SAMPLE_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertParseFailure(parser, \"1 j/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS); // invalid answer"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // valid answer followed by invalid answer. The test case for invalid answer followed by valid answer"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, \"1\" + ANSWER_DESC_SAMPLE_2 + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // while parsing {@code PREFIX_HINT} alone will reset the hints of the {@code Card} being edited,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // parsing valid hint followed by invalid hint will result in error"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertParseFailure(parser, \"1\" + HINT_DESC_FRIEND + HINT_DESC_HUSBAND + HINT_EMPTY,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                Hint.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                \"1\" + INVALID_QUESTION_DESC + INVALID_HINT_DESC + VALID_ANSWER_1,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_SAMPLE_2 + HINT_DESC_HUSBAND"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                + QUESTION_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_1)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                .withAnswer(VALID_ANSWER_2).withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_1).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // answer"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_1).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // hints"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + HINT_DESC_FRIEND;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withHint(VALID_HINT_FRIEND).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_SAMPLE_1 + HINT_DESC_FRIEND + ANSWER_DESC_SAMPLE_1"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                + HINT_DESC_FRIEND + ANSWER_DESC_SAMPLE_2 + HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                .withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ANSWER_DESC + ANSWER_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_ANSWER_DESC + ANSWER_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parse_resetHints_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + HINT_EMPTY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        EditCommand.EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withHint().build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 14,
      "dlqs": 28,
      "-": 98,
      "mmdlow": 13,
      "KerrynEer": 24
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ExportCommand(new ArrayList\u003cInteger\u003e(Arrays.asList(1))));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertParseSuccess(parser, \"1 3 5\", new ExportCommand(new ArrayList\u003cInteger\u003e(Arrays.asList(1, 3, 5))));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertParseFailure(parser, \"1 a 3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 28,
      "dlqs": 5
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.csvmanager.CsvFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String testFile \u003d \"myCsvFile.csv\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertParseSuccess(parser, testFile, new ImportCommand(new CsvFile(testFile)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        // assertParseSuccess(parser, \"1 3 5\", new ExportCommand(new ArrayList\u003cInteger\u003e(Arrays.asList(1,3,5))));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        String testFileIncorrect \u003d \"hello.exe\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertParseFailure(parser, EMPTY_STRING, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        assertParseFailure(parser, testFileIncorrect, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 33,
      "dlqs": 6
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String INVALID_HINT \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String VALID_ANSWER \u003d \"123456\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String VALID_HINT_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String VALID_HINT_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(INDEX_FIRST_CARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(INDEX_FIRST_CARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void parseQuestion_validValueWithoutWhitespace_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(nameWithWhitespace));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void parseAnswer_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAnswer((String) null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void parseAnswer_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void parseAnswer_validValueWithoutWhitespace_returnsAnswer() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(VALID_ANSWER));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void parseAnswer_validValueWithWhitespace_returnsTrimmedAnswer() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String answerWithWhitespace \u003d WHITESPACE + VALID_ANSWER + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Answer expectedAnswer \u003d new Answer(VALID_ANSWER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedAnswer, ParserUtil.parseAnswer(answerWithWhitespace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parseHint_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        ParserUtil.parseHint(null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parseHint_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        ParserUtil.parseHint(INVALID_HINT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parseHint_validValueWithoutWhitespace_returnsHint() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Hint expectedHint \u003d new Hint(VALID_HINT_1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertEquals(expectedHint, ParserUtil.parseHint(VALID_HINT_1));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parseHint_validValueWithWhitespace_returnsTrimmedHint() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String hintWithWhitespace \u003d WHITESPACE + VALID_HINT_1 + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Hint expectedHint \u003d new Hint(VALID_HINT_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertEquals(expectedHint, ParserUtil.parseHint(hintWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parseHints_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        ParserUtil.parseHints(null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parseHints_collectionWithInvalidHints_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        ParserUtil.parseHints(Arrays.asList(VALID_HINT_1, INVALID_HINT));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parseHints_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertTrue(ParserUtil.parseHints(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void parseHints_collectionWithValidHints_returnsHintSet() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Set\u003cHint\u003e actualHintSet \u003d ParserUtil.parseHints(Arrays.asList(VALID_HINT_1, VALID_HINT_2));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Set\u003cHint\u003e expectedHintSet \u003d new HashSet\u003cHint\u003e(Arrays.asList(new Hint(VALID_HINT_2)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertEquals(expectedHintSet, actualHintSet);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 26,
      "dlqs": 8,
      "-": 95,
      "mmdlow": 26
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/SearchCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new SearchCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedSearchCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedSearchCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_CARD));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 6,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/CardFolderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.TYPICAL_FOLDER_SCORES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardFolderTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final CardFolder cardFolder \u003d new CardFolder(this.getClass().getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(Collections.emptyList(), cardFolder.getCardList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.resetData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void resetData_withValidReadOnlyCardFolder_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder newData \u003d getTypicalCardFolder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(newData, cardFolder);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void resetData_withDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Two cards with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Card editedAlice \u003d new CardBuilder(ALICE).withHint(VALID_HINT_HUSBAND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e newCards \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolderStub newData \u003d new CardFolderStub(newCards);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.resetData(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void hasCard_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.hasCard(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void hasCard_cardNotInCardFolder_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(cardFolder.hasCard(ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void hasCard_cardInCardFolder_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.addCard(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(cardFolder.hasCard(ALICE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void hasCard_cardWithSameIdentityFieldsInCardFolder_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.addCard(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Card editedAlice \u003d new CardBuilder(ALICE).withHint(VALID_HINT_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(cardFolder.hasCard(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void getCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.getCardList().remove(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void setFolderScores_scoresSet() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        cardFolder.setFolderScores(TYPICAL_FOLDER_SCORES);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertEquals(TYPICAL_FOLDER_SCORES, cardFolder.getFolderScores());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void addFolderScore_scoreAdded() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        cardFolder.addFolderScore(0.5);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        List\u003cDouble\u003e newFolderScores \u003d new ArrayList\u003c\u003e(Arrays.asList(0.5));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertEquals(newFolderScores, cardFolder.getFolderScores());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.addListener(listener);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.addCard(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.addListener(listener);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.removeListener(listener);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.addCard(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * A stub ReadOnlyCardFolder whose cards list can violate interface constraints."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static class CardFolderStub implements ReadOnlyCardFolder {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        private final ObservableList\u003cCard\u003e cards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolderStub(Collection\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            this.cards.setAll(cards);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        public List\u003cDouble\u003e getFolderScores() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public String getFolderName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        public boolean hasSameCards(ObservableList\u003cCard\u003e otherCardList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 49,
      "dlqs": 27,
      "-": 93,
      "mmdlow": 2
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.COMPARATOR_ASC_SCORE_CARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.COMPARATOR_LEXICOGRAPHIC_CARDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.GEORGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardFolderBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager(this.getClass().getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(null, modelManager.getSelectedCard());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        userPrefs.setcardFolderFilesPath(Paths.get(\"knowitall/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        userPrefs.setcardFolderFilesPath(Paths.get(\"new/knowitall/book/file/path\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setcardFolderFilesPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.setcardFolderFilesPath(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setcardFolderFilesPath_validPath_setscardFolderFilesPath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Path path \u003d Paths.get(\"knowitall/book/file/path\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.setcardFolderFilesPath(path);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(path, modelManager.getcardFolderFilesPath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void hasCard_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.hasCard(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void hasCard_cardNotInCardFolder_returnsFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(modelManager.hasCard(ALICE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void hasCard_cardInCardFolder_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.addCard(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(modelManager.hasCard(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void deleteCard_cardIsSelectedAndFirstCardInFilteredCardList_selectionCleared() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.addCard(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.setSelectedCard(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.deleteCard(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(null, modelManager.getSelectedCard());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void deleteCard_cardIsSelectedAndSecondCardInFilteredCardList_firstCardSelected() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.addCard(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        modelManager.addCard(CARD_2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, CARD_2), modelManager.getFilteredCards());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        modelManager.setSelectedCard(CARD_2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        modelManager.deleteCard(CARD_2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedCard());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard_cardIsSelected_selectedCardUpdated() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.addCard(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.setSelectedCard(ALICE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card updatedAlice \u003d new CardBuilder(ALICE).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.setCard(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedCard());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void sortCards_byScore() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        modelManager.addCard(FIONA);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        modelManager.addCard(GEORGE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        modelManager.sortFilteredCard(COMPARATOR_ASC_SCORE_CARDS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // Fiona should be sorted after George because higher score"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Card lastCard \u003d modelManager.getFilteredCards().get(modelManager.getFilteredCards().size() - 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertEquals(FIONA, lastCard);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void sortCards_byQuestionLexicographic() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        modelManager.addCard(FIONA);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        modelManager.addCard(GEORGE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        modelManager.sortFilteredCard(COMPARATOR_LEXICOGRAPHIC_CARDS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // Fiona should be sorted after George because higher score"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Card lastCard \u003d modelManager.getFilteredCards().get(modelManager.getFilteredCards().size() - 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertEquals(GEORGE, lastCard);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void getFilteredCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.getFilteredCards().remove(0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setSelectedCard_cardNotInFilteredCardList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.setSelectedCard(ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setSelectedCard_cardInFilteredCardList_setsSelectedCard() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.addCard(ALICE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredCards());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.setSelectedCard(ALICE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedCard());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void setCurrentTestedCard_cardNotInFilteredCardList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        modelManager.setSelectedCard(ALICE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void setCurrentTestedCard_cardInFilteredCardList_setsSelectedCard() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        modelManager.addCard(ALICE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredCards());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        modelManager.setCurrentTestedCard(ALICE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(ALICE, modelManager.getCurrentTestedCard());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder cardFolder \u003d new CardFolderBuilder().withCard(ALICE).withCard(BENSON).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder differentCardFolder \u003d new CardFolder(this.getClass().getName());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager \u003d new ModelManager(Collections.singletonList(cardFolder), userPrefs);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(Collections.singletonList(cardFolder), userPrefs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different cardFolder -\u003e returns false"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(Collections.singletonList(differentCardFolder), userPrefs)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String[] keywords \u003d ALICE.getQuestion().fullQuestion.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.updateFilteredCard(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(Collections.singletonList(cardFolder), userPrefs)));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        modelManager.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        differentUserPrefs.setcardFolderFilesPath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(Collections.singletonList(cardFolder), differentUserPrefs)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // filteredList sorted differently -\u003e returns true"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        modelManager.sortFilteredCard(COMPARATOR_ASC_SCORE_CARDS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(Collections.singletonList(cardFolder), userPrefs)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 49,
      "dlqs": 44,
      "-": 120,
      "KerrynEer": 17
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setcardFolderFilesPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setcardFolderFilesPath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "dlqs": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/VersionedCardFolderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardFolderBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class VersionedCardFolderTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private final ReadOnlyCardFolder cardFolderWithAmy \u003d new CardFolderBuilder().withCard(CARD_1).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private final ReadOnlyCardFolder cardFolderWithBob \u003d new CardFolderBuilder().withCard(CARD_2).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final ReadOnlyCardFolder cardFolderWithCarl \u003d new CardFolderBuilder().withCard(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final ReadOnlyCardFolder emptyCardFolder \u003d new CardFolderBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void commit_singleCardFolder_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList(emptyCardFolder);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardFolderListStatus(versionedCardFolder,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.singletonList(emptyCardFolder),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void commit_multipleCardFolderPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardFolderListStatus(versionedCardFolder,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Arrays.asList(emptyCardFolder, cardFolderWithAmy, cardFolderWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardFolderWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void commit_multipleCardFolderPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardFolderListStatus(versionedCardFolder,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.singletonList(emptyCardFolder),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void canUndo_multipleCardFolderPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(versionedCardFolder.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void canUndo_multipleCardFolderPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(versionedCardFolder.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void canUndo_singleCardFolder_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList(emptyCardFolder);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void canUndo_multipleCardFolderPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void canRedo_multipleCardFolderPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(versionedCardFolder.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void canRedo_multipleCardFolderPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(versionedCardFolder.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void canRedo_singleCardFolder_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList(emptyCardFolder);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void canRedo_multipleCardFolderPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void undo_multipleCardFolderPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardFolderListStatus(versionedCardFolder,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.singletonList(emptyCardFolder),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardFolderWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.singletonList(cardFolderWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void undo_multipleCardFolderPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardFolderListStatus(versionedCardFolder,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Arrays.asList(cardFolderWithAmy, cardFolderWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void undo_singleCardFolder_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList(emptyCardFolder);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertThrows(VersionedCardFolder.NoUndoableStateException.class, versionedCardFolder::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void undo_multipleCardFolderPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertThrows(VersionedCardFolder.NoUndoableStateException.class, versionedCardFolder::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void redo_multipleCardFolderPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardFolderListStatus(versionedCardFolder,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Arrays.asList(emptyCardFolder, cardFolderWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardFolderWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void redo_multipleCardFolderPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        versionedCardFolder.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardFolderListStatus(versionedCardFolder,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.singletonList(emptyCardFolder),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardFolderWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Collections.singletonList(cardFolderWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void redo_singleCardFolder_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList(emptyCardFolder);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertThrows(VersionedCardFolder.NoRedoableStateException.class, versionedCardFolder::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void redo_multipleCardFolderPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                emptyCardFolder, cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertThrows(VersionedCardFolder.NoRedoableStateException.class, versionedCardFolder::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d prepareCardFolderList(cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder copy \u003d prepareCardFolderList(cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(versionedCardFolder.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(versionedCardFolder.equals(versionedCardFolder));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder differentCardFolderList \u003d prepareCardFolderList(cardFolderWithBob, cardFolderWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.equals(differentCardFolderList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder differentCurrentStatePointer \u003d prepareCardFolderList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                cardFolderWithAmy, cardFolderWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardFolder, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts that {@code versionedCardFolder} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * states before {@code versionedCardFolder#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * and states after {@code versionedCardFolder#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void assertCardFolderListStatus(VersionedCardFolder versionedCardFolder,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                                             List\u003cReadOnlyCardFolder\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                                             ReadOnlyCardFolder expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                                             List\u003cReadOnlyCardFolder\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(new CardFolder(versionedCardFolder), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        while (versionedCardFolder.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            versionedCardFolder.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (ReadOnlyCardFolder expectedCardFolder : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            assertEquals(expectedCardFolder, new CardFolder(versionedCardFolder));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            versionedCardFolder.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (ReadOnlyCardFolder expectedCardFolder : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            versionedCardFolder.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            assertEquals(expectedCardFolder, new CardFolder(versionedCardFolder));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(versionedCardFolder.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedCardFolder.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Creates and returns a {@code VersionedCardFolder} with the {@code cardFolderStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code VersionedCardFolder#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private VersionedCardFolder prepareCardFolderList(ReadOnlyCardFolder... cardFolderStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(cardFolderStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        VersionedCardFolder versionedCardFolder \u003d new VersionedCardFolder(cardFolderStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (int i \u003d 1; i \u003c cardFolderStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            versionedCardFolder.resetData(cardFolderStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            versionedCardFolder.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return versionedCardFolder;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Shifts the {@code versionedCardFolder#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedCardFolder versionedCardFolder, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            versionedCardFolder.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 291,
      "dlqs": 5,
      "KerrynEer": 2
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/card/AnswerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // null answer number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // invalid answer numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // valid answer numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"93121534\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"124293842033123\")); // long answer numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 35,
      "dlqs": 2
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/card/CardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        card.getHints().remove(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void isSameCard() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(ALICE.isSameCard(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(ALICE.isSameCard(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card editedAlice \u003d new CardBuilder(ALICE).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(ALICE.isSameCard(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        editedAlice \u003d new CardBuilder(ALICE).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(ALICE.isSameCard(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same question, same answer, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        editedAlice \u003d new CardBuilder(ALICE).withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(ALICE.isSameCard(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // same question, different answer, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        editedAlice \u003d new CardBuilder(ALICE).withAnswer(VALID_ANSWER_2).withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(ALICE.isSameCard(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // same question, same answer, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        editedAlice \u003d new CardBuilder(ALICE).withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(ALICE.isSameCard(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card aliceCopy \u003d new CardBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(ALICE.equals(CARD_2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card editedAlice \u003d new CardBuilder(ALICE).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        editedAlice \u003d new CardBuilder(ALICE).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 9,
      "dlqs": 14,
      "-": 49,
      "mmdlow": 6,
      "KerrynEer": 6
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/card/OptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "public class OptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Option(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void constructor_invalidOptionValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String invalidOptionValue \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Option(invalidOptionValue));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void isValidOptionValue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // null option value"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Option.isValidOption(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "mmdlow": 23
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/card/QuestionContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class QuestionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new QuestionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void test_questionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void test_questionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // Keywords match answer, but does not match question"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"Alice\").withAnswer(\"12345\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 73,
      "dlqs": 2,
      "mmdlow": 3
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/card/QuestionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // valid question"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"David Roger Jackson Ray Jr 2nd\")); // long questions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 37,
      "dlqs": 2
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/card/ScoreTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "public class ScoreTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Score(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void constructor_invalidScore_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        String invalidScore \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Score(invalidScore));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public void isValidScore() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // null knowitall"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Score.isValidScore(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // partial score strings"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"0/\")); // missing total attempts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"/0\")); // missing correct attempts"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"00\")); // missing separator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"//\")); // missing numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // invalid numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"0/1.0\")); // float in total"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"1.0/0\")); // float in correct"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"1.0/1.0\")); // float in both"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"-1/2\")); // negative in correct"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"1/-2\")); // negative in total"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // invalid correct and total"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"3/2\")); // correct more than total"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(\"10/0\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // tests for overloaded isValidScore"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(10, 5)); // correct more than total"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(-5, 10)); // negative correct"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertFalse(Score.isValidScore(5, -10)); // negative total"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // valid scores"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(Score.isValidScore(\"0/0\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(Score.isValidScore(\"0/10\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(Score.isValidScore(\"1/10\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(Score.isValidScore(\"10/10\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        // tests for overloaded isValidScore"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(Score.isValidScore(0, 0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(Score.isValidScore(0, 10));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(Score.isValidScore(1, 10));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        assertTrue(Score.isValidScore(10, 10));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlqs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 67
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/card/UniqueCardListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class UniqueCardListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void contains_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void contains_cardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(uniqueCardList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void contains_cardInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(uniqueCardList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void contains_cardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Card editedAlice \u003d new CardBuilder(ALICE).withHint(VALID_HINT_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(uniqueCardList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void add_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void add_duplicateCard_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard_nullTargetCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCard(null, ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard_nullEditedCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCard(ALICE, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard_targetCardNotInList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCard(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard_editedCardIsSameCard_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCard(ALICE, ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedUniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard_editedCardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Card editedAlice \u003d new CardBuilder(ALICE).withHint(VALID_HINT_HUSBAND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCard(ALICE, editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedUniqueCardList.add(editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard_editedCardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        uniqueCardList.setCard(ALICE, CARD_2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedUniqueCardList.add(CARD_2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCard_editedCardHasNonUniqueIdentity_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        uniqueCardList.add(CARD_2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        uniqueCardList.setCard(ALICE, CARD_2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void remove_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.remove(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void remove_cardDoesNotExist_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.remove(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void remove_existingCard_removesCard() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.remove(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCards_nullUniqueCardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCards((UniqueCardList) null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCards_uniqueCardList_replacesOwnListWithProvidedUniqueCardList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedUniqueCardList.add(CARD_2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCards(expectedUniqueCardList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCards((List\u003cCard\u003e) null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.add(ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        List\u003cCard\u003e cardList \u003d Collections.singletonList(CARD_2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCards(cardList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        expectedUniqueCardList.add(CARD_2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void setCards_listWithDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCard\u003e listWithDuplicateCards \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.setCards(listWithDuplicateCards);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uniqueCardList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 168,
      "dlqs": 7,
      "mmdlow": 2,
      "KerrynEer": 7
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/model/hint/HintTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.model.hint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "public class HintTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Hint(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void constructor_invalidHintValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String invalidHintValue \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Hint(invalidHintValue));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void isValidHintName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // null hint name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Hint.isValidHintName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 16,
      "mmdlow": 8
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/storage/JsonAdaptedCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.storage.JsonAdaptedCard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class JsonAdaptedCardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String INVALID_OPTION \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String INVALID_HINT \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final String VALID_QUESTION \u003d BENSON.getQuestion().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String VALID_ANSWER \u003d BENSON.getAnswer().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private static final String VALID_SCORE \u003d BENSON.getScore().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final List\u003cJsonAdaptedOption\u003e VALID_OPTION \u003d BENSON.getOptions().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .map(JsonAdaptedOption::new)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private static final List\u003cJsonAdaptedHint\u003e VALID_HINT \u003d BENSON.getHints().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .map(JsonAdaptedHint::new)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void toModelType_validCardDetails_returnsCard() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(BENSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(BENSON, card.toModelType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(INVALID_QUESTION, VALID_ANSWER, VALID_SCORE, VALID_OPTION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                VALID_HINT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(null, VALID_ANSWER, VALID_SCORE, VALID_OPTION, VALID_HINT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void toModelType_invalidAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(VALID_QUESTION, INVALID_ANSWER, VALID_SCORE, VALID_OPTION,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                VALID_HINT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d Answer.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(VALID_QUESTION, null, VALID_SCORE, VALID_OPTION, VALID_HINT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void toModelType_invalidHint_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        List\u003cJsonAdaptedHint\u003e invalidHint \u003d new ArrayList\u003c\u003e(VALID_HINT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        invalidHint.add(new JsonAdaptedHint(INVALID_HINT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(VALID_QUESTION, VALID_ANSWER,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                VALID_SCORE, VALID_OPTION, invalidHint);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, card::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public void toModelType_invalidOption_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        List\u003cJsonAdaptedOption\u003e invalidOption \u003d new ArrayList\u003c\u003e(VALID_OPTION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        invalidOption.add(new JsonAdaptedOption(INVALID_OPTION));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        JsonAdaptedCard card \u003d new JsonAdaptedCard(VALID_QUESTION, VALID_ANSWER, VALID_SCORE, invalidOption,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                VALID_HINT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, card::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 16,
      "dlqs": 8,
      "-": 34,
      "mmdlow": 30
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/storage/JsonCardFolderStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.HOON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class JsonCardFolderStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCardFolderStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void readCardFolder_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        readCardFolder(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCardFolder\u003e readCardFolder(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return new JsonCardFolderStorage(Paths.get(filePath)).readCardFolder(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void read_missingFile_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        readCardFolder(\"NonExistentFile.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        readCardFolder(\"notJsonFormatCardFolder.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void readCardFolder_invalidCardCardFolder_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        readCardFolder(\"invalidCardCardFolder.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void readCardFolder_invalidAndValidCardCardFolder_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        readCardFolder(\"invalidAndValidCardCardFolder.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void readAndSaveCardFolder_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempCardFolder.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder original \u003d getTypicalCardFolder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonCardFolderStorage jsonCardFolderStorage \u003d new JsonCardFolderStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        jsonCardFolderStorage.saveCardFolder(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ReadOnlyCardFolder readBack \u003d jsonCardFolderStorage.readCardFolder(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(original, new CardFolder(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        original.addCard(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        original.removeCard(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        jsonCardFolderStorage.saveCardFolder(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        readBack \u003d jsonCardFolderStorage.readCardFolder(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(original, new CardFolder(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        original.addCard(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        jsonCardFolderStorage.saveCardFolder(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        readBack \u003d jsonCardFolderStorage.readCardFolder().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(original, new CardFolder(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void saveCardFolder_nullCardFolder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        saveCardFolder(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Saves {@code cardFolder} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void saveCardFolder(ReadOnlyCardFolder cardFolder, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            new JsonCardFolderStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    .saveCardFolder(cardFolder, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void saveCardFolder_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        saveCardFolder(new CardFolder(this.getClass().getName()), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 117,
      "dlqs": 8
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/storage/JsonSerializableCardFolderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TypicalCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class JsonSerializableCardFolderTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCardFolderTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final Path TYPICAL_CARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalCardsCardFolder.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final Path INVALID_CARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCardCardFolder.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final Path DUPLICATE_CARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateThumbnailCardFolder.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void toModelType_typicalCardsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonSerializableCardFolder dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CARDS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                JsonSerializableCardFolder.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder cardFolderFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder typicalCardsCardFolder \u003d TypicalCards.getTypicalCardFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(cardFolderFromFile, typicalCardsCardFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void toModelType_invalidCardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonSerializableCardFolder dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CARD_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                JsonSerializableCardFolder.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void toModelType_duplicateCards_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonSerializableCardFolder dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CARD_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                JsonSerializableCardFolder.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        thrown.expectMessage(JsonSerializableCardFolder.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 18,
      "dlqs": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        userPrefs.setcardFolderFilesPath(Paths.get(\"cardfolder.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 4,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCardFolder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonCardFolderStorage cardFolderStorage \u003d new JsonCardFolderStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCardFolderStorage\u003e cardFolderStorageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolderStorageList.add(cardFolderStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        storageManager \u003d new StorageManager(cardFolderStorageList, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the Storage Manager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void cardFolderReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "         * {@link JsonCardFolderStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCardFolderStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder original \u003d getTypicalCardFolder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e savedFolders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        savedFolders.add(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        storageManager.saveCardFolders(savedFolders, testFolder.getRoot().toPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cReadOnlyCardFolder\u003e readFolders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        storageManager.readCardFolders(readFolders);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(savedFolders, readFolders);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        storageManager.saveCardFolder(original, savedFolders.size() - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        readFolders.clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        storageManager.readCardFolders(readFolders);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ReadOnlyCardFolder retrieved \u003d readFolders.get(savedFolders.size() - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 21,
      "dlqs": 6,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/CardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Score;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A utility class to help with building Card objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"What is the powerhouse of a cell?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"Mitochondrion\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final String DEFAULT_SCORE \u003d \"0/0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Set\u003cOption\u003e options;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    private Set\u003cHint\u003e hints;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        score \u003d new Score(DEFAULT_SCORE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        options \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        hints \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        question \u003d cardToCopy.getQuestion();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        answer \u003d cardToCopy.getAnswer();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        score \u003d cardToCopy.getScore();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        options \u003d new HashSet\u003c\u003e(cardToCopy.getOptions());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        hints \u003d new HashSet\u003c\u003e(cardToCopy.getHints());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the {@code Question} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses the {@code hints} into a {@code Set\u003cHint\u003e} and set it to the {@code Card} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public CardBuilder withHint(String ... hint) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.hints \u003d SampleDataUtil.getHintSet(hint);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses the {@code options} into a {@code Set\u003cOption\u003e} and set it to the {@code Card} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public CardBuilder withOptions(String ... options) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        this.options \u003d SampleDataUtil.getOptionSet(options);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the {@code Answer} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     * Sets the {@code Score} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlqs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public CardBuilder withScore(String score) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        this.score \u003d new Score(score);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return new Card(question, answer, score, options, hints);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 51,
      "dlqs": 20,
      "KerrynEer": 3,
      "mmdlow": 18
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/CardFolderBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " *     {@code CardFolder ab \u003d new CardFolderBuilder().withCard(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardFolderBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private CardFolder cardFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardFolderBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder \u003d new CardFolder(this.getClass().getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardFolderBuilder(CardFolder cardFolder) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.cardFolder \u003d cardFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Adds a new {@code Card} to the {@code CardFolder} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardFolderBuilder withCard(Card card) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardFolder.addCard(card);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardFolder build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return cardFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 31,
      "dlqs": 3
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/CardUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_OPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A utility class for Card."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns an add command string for adding the {@code card}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static String getAddCommand(Card card) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getCardDetails(card);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the part of command string for the given {@code card}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static String getCardDetails(Card card) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        sb.append(PREFIX_QUESTION + card.getQuestion().fullQuestion + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        sb.append(PREFIX_ANSWER + card.getAnswer().fullAnswer + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        card.getHints().stream().forEach(s -\u003e sb.append(PREFIX_HINT + s.hintName + \" \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the part of command string for the given {@code EditCardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static String getEditCardDescriptorDetails(EditCommand.EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        descriptor.getQuestion().ifPresent(question -\u003e sb.append(PREFIX_QUESTION)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                .append(question.fullQuestion).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        descriptor.getAnswer().ifPresent(answer -\u003e sb.append(PREFIX_ANSWER).append(answer.fullAnswer).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (descriptor.getHints().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            Set\u003cHint\u003e hints \u003d descriptor.getHints().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            if (hints.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                sb.append(PREFIX_HINT + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                hints.forEach(s -\u003e sb.append(PREFIX_HINT).append(s.hintName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        if (descriptor.getOptions().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            Set\u003cOption\u003e options \u003d descriptor.getOptions().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            if (options.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                sb.append(PREFIX_OPTION + \" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                options.forEach(s -\u003e sb.append(PREFIX_OPTION).append(s.optionValue).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 12,
      "dlqs": 10,
      "-": 27,
      "mmdlow": 16
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/EditCardDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Option;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A utility class to help with building EditCardDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class EditCardDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private EditCommand.EditCardDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditCardDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        descriptor \u003d new EditCardDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditCardDescriptorBuilder(EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        this.descriptor \u003d new EditCardDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns an {@code EditCardDescriptor} with fields containing {@code card}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditCardDescriptorBuilder(Card card) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        descriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        descriptor.setQuestion(card.getQuestion());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        descriptor.setAnswer(card.getAnswer());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        descriptor.setOptions(card.getOptions());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        descriptor.setHints(card.getHints());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the {@code Question} of the {@code EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditCardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Sets the {@code Answer} of the {@code EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditCardDescriptorBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        descriptor.setAnswer(new Answer(answer));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses the {@code options} into a {@code Set\u003cOption\u003e} and set it to the {@code EditCardDescriptor}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public EditCardDescriptorBuilder withOptions(String... options) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Set\u003cOption\u003e optionSet \u003d Stream.of(options).map(Option::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        descriptor.setOptions(optionSet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mmdlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * Parses the {@code hint} into a {@code Set\u003cHint\u003e} and set it to the {@code EditCardDescriptor}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public EditCardDescriptorBuilder withHint(String... hint) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Set\u003cHint\u003e hintSet \u003d Stream.of(hint).map(Hint::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        descriptor.setHints(hintSet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public EditCardDescriptor build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 56,
      "dlqs": 8,
      "mmdlow": 16
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/SampleBloodCards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yichong96"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yichong96"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yichong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yichong96"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in import command tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yichong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yichong96"
        },
        "content": "public class SampleBloodCards {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_1 \u003d new CardBuilder().withQuestion(\"Commonly used anti-fibrinolytic drug is _____, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"which prevent activation of plasminogen to plasmin\").withAnswer(\"tranexamic acid\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withHint(\"ph less than 7\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"0/0\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_2 \u003d new CardBuilder().withQuestion(\"Myelodysplasia often regresses \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"into what blood disorder?\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"Acute Leukaemia\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"0/0\").withHint(\"type of cancer\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_3 \u003d new CardBuilder().withQuestion(\"\u003csomething\u003ecytosis means too _____\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"many\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"0/0\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_4 \u003d new CardBuilder().withQuestion(\"Burkitt lymphoma is associated with what virus?\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"EBV\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"0/0\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_5 \u003d new CardBuilder().withQuestion(\"For _____, besides systemic chemo, \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"treatment includes chemo injections into scrotum and CSF\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"acute lymphoblastic leukemia\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"0/0\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_6 \u003d new CardBuilder().withQuestion(\"_____% of circulating neutrophils \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"are in marginating pool, hence not counted in full blood count\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"50\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"2/3\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withOptions(\"55\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_7 \u003d new CardBuilder().withQuestion(\"If patient has raised WBC count, \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"raised platelet and raised Hb count, he is likely to have _____\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"myeloproliferative neoplasm\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"1/2\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_8 \u003d new CardBuilder().withQuestion(\"Patients with Acute lymphoblastic leukaemia with \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"philadelphia chromosome cytogenic changes will require what special treatment?\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"Imatinib\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"0/0\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_9 \u003d new CardBuilder().withQuestion(\"\u003csomething\u003epenia means too _____\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"few\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"0/0\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withOptions(\"many\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final Card CARD_10 \u003d new CardBuilder().withQuestion(\"_____ is the iron-containing oxygen-transport \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            + \"metalloprotein in the red blood cells\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withAnswer(\"haemoglobin\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .withScore(\"0/0\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final String BLOOD_FOLDER_NAME \u003d \"Blood\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static final List\u003cDouble\u003e BLOOD_FOLDER_SCORES \u003d new ArrayList\u003c\u003e(Arrays.asList(0.9));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     * Returns an {@code CardFolder} with all the typical cards."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yichong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static CardFolder getBloodFolder() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        CardFolder folder \u003d new CardFolder(getTypicalFolderName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        folder.setFolderScores(BLOOD_FOLDER_SCORES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        for (Card card : getSampleBloodCards()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yichong96"
        },
        "content": "            folder.addCard(card);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return folder;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static List\u003cCard\u003e getSampleBloodCards() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CARD_1, CARD_2, CARD_3,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yichong96"
        },
        "content": "                CARD_4, CARD_5, CARD_6, CARD_7, CARD_8, CARD_9, CARD_10));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    public static String getTypicalFolderName() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yichong96"
        },
        "content": "        return BLOOD_FOLDER_NAME;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yichong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yichong96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yichong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yichong96": 101
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            + \"  \\\"question\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final String QUESTION_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static String getQuestionTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return QUESTION_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        question \u003d getQuestionTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 1,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the middle index of the card in the {@code model}\u0027s card list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCards().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the last index of the card in the {@code model}\u0027s card list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCards().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns the card in the {@code model}\u0027s card list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static Card getCard(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return model.getFilteredCards().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 7,
      "dlqs": 4,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/TypicalCards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_SCORE_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class TypicalCards {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Card ALICE \u003d new CardBuilder().withQuestion(\"Alice Pauline\").withAnswer(\"94351253\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .withScore(\"0/0\").withHint(\"friends\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Card BENSON \u003d new CardBuilder().withQuestion(\"Benson Meier\").withAnswer(\"98765432\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .withScore(\"0/0\").withHint(\"owesMoney\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Card CARL \u003d new CardBuilder().withQuestion(\"Carl Kurz\").withAnswer(\"95352563\").withScore(\"0/0\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final Card DANIEL \u003d new CardBuilder().withQuestion(\"Daniel Meier\").withAnswer(\"87652533\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .withScore(\"0/0\").withHint(\"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Card ELLE \u003d new CardBuilder().withQuestion(\"Elle Meyer\").withAnswer(\"9482224\").withScore(\"0/0\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final Card FIONA \u003d new CardBuilder().withQuestion(\"Fiona Kunz\").withAnswer(\"9482427\").withScore(\"2/3\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final Card GEORGE \u003d new CardBuilder().withQuestion(\"George Best\").withAnswer(\"9482442\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            .withScore(\"1/2\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Card HOON \u003d new CardBuilder().withQuestion(\"Hoon Meier\").withAnswer(\"8482424\").withScore(\"0/0\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "    public static final Card IDA \u003d new CardBuilder().withQuestion(\"Ida Mueller\").withAnswer(\"8482131\").withScore(\"0/0\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    // Manually added - Card\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final Card CARD_1 \u003d new CardBuilder().withQuestion(VALID_QUESTION_1).withAnswer(VALID_ANSWER_1)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "            .withScore(VALID_SCORE_1).withHint(VALID_HINT_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final Card CARD_2 \u003d new CardBuilder().withQuestion(VALID_QUESTION_2).withAnswer(VALID_ANSWER_2)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            .withScore(\"0/0\").withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final String TYPICAL_FOLDER_NAME \u003d \"Typical Cards\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlqs"
        },
        "content": "    public static final List\u003cDouble\u003e TYPICAL_FOLDER_SCORES \u003d new ArrayList\u003c\u003e(Arrays.asList(0.5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlqs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private TypicalCards() {} // prevents instantiation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    // TODO: Add more folders"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static List\u003cReadOnlyCardFolder\u003e getTypicalCardFolders() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return Collections.singletonList(getTypicalCardFolder());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns an {@code CardFolder} with all the typical cards."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static CardFolder getTypicalCardFolder() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardFolder folder \u003d new CardFolder(getTypicalFolderName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlqs"
        },
        "content": "        folder.setFolderScores(TYPICAL_FOLDER_SCORES);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (Card card : getTypicalCards()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            folder.addCard(card);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return folder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static List\u003cCard\u003e getTypicalCards() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static String getTypicalFolderName() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return TYPICAL_FOLDER_NAME;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 24,
      "dlqs": 16,
      "-": 26,
      "mmdlow": 15,
      "KerrynEer": 3
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final Index INDEX_FIRST_CARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final Index INDEX_SECOND_CARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static final Index INDEX_THIRD_CARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final Index INDEX_FIRST_CARD_FOLDER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public static final Index INDEX_SECOND_CARD_FOLDER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 2,
      "-": 7,
      "KerrynEer": 3
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private SimpleObjectProperty\u003cCard\u003e selectedCard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedCard));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // default (empty) card page"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertEquals(\"\", browserPanelHandle.getCurrentQuestion());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // associated web page of a card"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        guiRobot.interact(() -\u003e selectedCard.set(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String expectedCardQuestion \u003d ALICE.getQuestion().fullQuestion;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertEquals(expectedCardQuestion, browserPanelHandle.getCurrentQuestion());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 4,
      "dlqs": 3,
      "-": 26,
      "mmdlow": 4
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/CardListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.getTypicalCards;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.ui.testutil.GuiTestAssert.assertCardDisplaysCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import guitests.guihandles.CardListPanelHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import guitests.guihandles.CardThumbnailHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Score;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final ObservableList\u003cCard\u003e TYPICAL_CARDS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            FXCollections.observableList(getTypicalCards());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private final SimpleObjectProperty\u003cCard\u003e selectedCard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private CardListPanelHandle cardListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        initUi(TYPICAL_CARDS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CARDS.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            cardListPanelHandle.navigateToCard(TYPICAL_CARDS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Card expectedCard \u003d TYPICAL_CARDS.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            CardThumbnailHandle actualCard \u003d cardListPanelHandle.getCardCardHandle(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            assertCardDisplaysCard(expectedCard, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void selection_modelSelectedCardChanged_selectionChanges() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        initUi(TYPICAL_CARDS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card secondCard \u003d TYPICAL_CARDS.get(INDEX_SECOND_CARD.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        guiRobot.interact(() -\u003e selectedCard.set(secondCard));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardThumbnailHandle expectedCard \u003d cardListPanelHandle.getCardCardHandle(INDEX_SECOND_CARD.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardThumbnailHandle selectedCard \u003d cardListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardEquals(expectedCard, selectedCard);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Verifies that creating and deleting large number of cards in {@code CardListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ObservableList\u003cCard\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }, \"Creation and deletion of card cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns a list of cards containing {@code cardCount} cards that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private ObservableList\u003cCard\u003e createBackingList(int cardCount) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        ObservableList\u003cCard\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (int i \u003d 0; i \u003c cardCount; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Question question \u003d new Question(i + \"a\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            Answer answer \u003d new Answer(\"000\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlqs"
        },
        "content": "            Score score \u003d new Score(\"0/1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "            Card card \u003d new Card(question, answer, score, Collections.emptySet(), Collections.emptySet());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            backingList.add(card);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Initializes {@code cardListPanelHandle} with a {@code CardListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code CardListPanel}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void initUi(ObservableList\u003cCard\u003e backingList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardListPanel cardListPanel \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new CardListPanel(backingList, selectedCard, selectedCard::set);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uiPartRule.setUiPart(cardListPanel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardListPanelHandle \u003d new CardListPanelHandle(getChildNode(cardListPanel.getRoot(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                CardListPanelHandle.CARD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 95,
      "dlqs": 10,
      "mmdlow": 1
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/CardThumbnailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.ui.testutil.GuiTestAssert.assertCardDisplaysCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import guitests.guihandles.CardThumbnailHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class CardThumbnailTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // no hint"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Card cardWithNoHint \u003d new CardBuilder().withHint(new String[0]).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        CardThumbnail cardThumbnail \u003d new CardThumbnail(cardWithNoHint, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uiPartRule.setUiPart(cardThumbnail);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertCardDisplay(cardThumbnail, cardWithNoHint, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // with hint"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        Card cardWithHint \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        cardThumbnail \u003d new CardThumbnail(cardWithHint, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        uiPartRule.setUiPart(cardThumbnail);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertCardDisplay(cardThumbnail, cardWithHint, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardThumbnail cardThumbnail \u003d new CardThumbnail(card, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same card, same index -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardThumbnail copy \u003d new CardThumbnail(card, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(cardThumbnail.equals(copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(cardThumbnail.equals(cardThumbnail));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(cardThumbnail.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(cardThumbnail.equals(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // different card, same index -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card differentCard \u003d new CardBuilder().withQuestion(\"differentName\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(cardThumbnail.equals(new CardThumbnail(differentCard, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // same card, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(cardThumbnail.equals(new CardThumbnail(card, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts that {@code cardThumbnail} displays the details of {@code expectedCard} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void assertCardDisplay(CardThumbnail cardThumbnail, Card expectedCard, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        CardThumbnailHandle cardThumbnailHandle \u003d new CardThumbnailHandle(cardThumbnail.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", cardThumbnailHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // verify card details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCardDisplaysCard(expectedCard, cardThumbnailHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 61,
      "dlqs": 4,
      "mmdlow": 8
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 2,
      "dlqs": 4,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A GUI unit test class for CardFolder."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 3,
      "dlqs": 2,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.CardFolderStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.JsonCardFolderStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.storage.StorageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        JsonCardFolderStorage jsonCardFolderStorage \u003d new JsonCardFolderStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        List\u003cCardFolderStorage\u003e jsonCardFolderStorageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        jsonCardFolderStorageList.add(jsonCardFolderStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonCardFolderStorageList, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                    new ModelManager(this.getClass().getName()), storageManager));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 7,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.ui.StatusBarFooter.STATUS_IN_FOLDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.ui.StatusBarFooter.STATUS_IN_HOME_DIRECTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.ui.StatusBarFooter.STATUS_IN_REPORT_DISPLAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.ui.StatusBarFooter.STATUS_IN_TEST_SESSION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarContent(STATUS_IN_HOME_DIRECTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        // new status received"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        guiRobot.interact(() -\u003e statusBarFooter.updateStatusBarInFolder());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarContent(STATUS_IN_FOLDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        guiRobot.interact(() -\u003e statusBarFooter.updateStatusBarInTestSession());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarContent(STATUS_IN_TEST_SESSION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        guiRobot.interact(() -\u003e statusBarFooter.updateStatusBarInReportDisplay());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarContent(STATUS_IN_REPORT_DISPLAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getCurrentStatus());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 18,
      "KerrynEer": 32
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 3,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import guitests.guihandles.CardListPanelHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import guitests.guihandles.CardThumbnailHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void assertCardEquals(CardThumbnailHandle expectedCard, CardThumbnailHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedCard.getQuestion(), actualCard.getQuestion());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void assertCardDisplaysCard(Card expectedCard, CardThumbnailHandle actualCard) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedCard.getQuestion().fullQuestion, actualCard.getQuestion());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts that the list in {@code cardListPanelHandle} displays the details of {@code cards} correctly and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void assertListMatching(CardListPanelHandle cardListPanelHandle, Card... cards) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.length; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            cardListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            assertCardDisplaysCard(cards[i], cardListPanelHandle.getCardCardHandle(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts that the list in {@code cardListPanelHandle} displays the details of {@code cards} correctly and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void assertListMatching(CardListPanelHandle cardListPanelHandle, List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertListMatching(cardListPanelHandle, cards.toArray(new Card[0]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts the size of the list in {@code cardListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void assertListSize(CardListPanelHandle cardListPanelHandle, int size) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        int numberOfPeople \u003d cardListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 19,
      "dlqs": 2,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 1,
      "dlqs": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/knowitall/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlqs"
        },
        "content": "package seedu.knowitall.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlqs": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.HINT_DESC_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_HINT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.QUESTION_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.QUESTION_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.HOON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.IDA;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class AddCommandSystemTest extends CardFolderSystemTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add a card without hints to a non-empty card folder, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card toAdd \u003d CARD_1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + QUESTION_DESC_SAMPLE_1 + \"  \" + ANSWER_DESC_SAMPLE_1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                + \" \" + \"   \" + HINT_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add a card with all fields same as another card in the card folder except question -\u003e added */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        toAdd \u003d new CardBuilder(CARD_1).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_1 + HINT_DESC_FRIEND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add a card with all fields same as another card in the card folder except answer -\u003e added */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        toAdd \u003d new CardBuilder(CARD_1).withAnswer(VALID_ANSWER_2).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d CardUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add to empty card folder -\u003e added */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteAllCards();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add a card with hints, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        toAdd \u003d CARD_2;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + HINT_DESC_FRIEND + ANSWER_DESC_SAMPLE_2 + QUESTION_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add a card, missing hints -\u003e added */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: filters the card list before adding -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* ------------------------ Perform add operation while a card card is selected --------------------------- */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: selects first card in the card list, add a card -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectCard(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add a duplicate card -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d CardUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add a duplicate card except with different answer -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // Problem with this test due to comparison implementation for Card -\u003e to be fixed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // toAdd \u003d new CardBuilder(HOON).withAnswer(VALID_ANSWER_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        // command \u003d CardUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_FOLDER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: add a duplicate card except with different hints -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        command \u003d CardUtil.getAddCommand(HOON) + \" \" + PREFIX_HINT.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: missing question -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: missing answer -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d \"adds \" + CardUtil.getCardDetails(toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: invalid question -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_QUESTION_DESC + ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: invalid answer -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_SAMPLE_1 + INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        /* Case: invalid hint -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_SAMPLE_1 + ANSWER_DESC_SAMPLE_1"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                + INVALID_HINT_DESC;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertCommandFailure(command, Hint.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 4. {@code Storage} and {@code CardListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void assertCommandSuccess(Card toAdd) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(CardUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Card)}. Executes {@code command}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Card)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void assertCommandSuccess(String command, Card toAdd) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.addCard(toAdd);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Card)} except asserts that"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 2. {@code Storage} and {@code CardListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Card)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 4. {@code Storage} and {@code CardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 44,
      "dlqs": 32,
      "-": 110,
      "KerrynEer": 15,
      "mmdlow": 8
    }
  },
  {
    "path": "src/test/java/systemtests/CardFolderSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.TEST_FOLDER_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.ui.StatusBarFooter.STATUS_IN_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.ui.StatusBarFooter.STATUS_IN_HOME_DIRECTORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.ui.StatusBarFooter.STATUS_IN_REPORT_DISPLAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "import static seedu.knowitall.ui.StatusBarFooter.STATUS_IN_TEST_SESSION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import guitests.guihandles.CardListPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "import seedu.knowitall.logic.commands.ChangeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TypicalCards;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.ui.CommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": " * A system test class for CardFolder, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public abstract class CardFolderSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String command \u003d ChangeCommand.COMMAND_WORD + \" \" + TEST_FOLDER_INDEX.getOneBased();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String resultDisplayString \u003d String.format(ChangeCommand.MESSAGE_ENTER_FOLDER_SUCCESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                TEST_FOLDER_INDEX.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        setupHelper.initialiseCardListPanelHandle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertApplicationStartingStateIsCorrect(resultDisplayString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    protected CardFolder getInitialData() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return TypicalCards.getTypicalCardFolder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public CardListPanelHandle getCardListPanel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return mainWindowHandle.getCardListPanel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Displays all cards in the card folder."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    protected void showAllCards() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(getModel().getActiveCardFolder().getCardList().size(), getModel().getFilteredCards().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Displays all cards with any parts of their questions matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    protected void showCardsWithQuestion(String keyword) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SearchCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(getModel().getFilteredCards().size() \u003c getModel().getActiveCardFolder().getCardList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Selects the card at {@code index} of the displayed list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    protected void selectCard(Index index) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(index.getZeroBased(), getCardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Deletes all cards in the card folder."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    protected void deleteAllCards() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(0, getModel().getActiveCardFolder().getCardList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same card objects as {@code expectedModel}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * and the card list panel displays the cards in the model correctly."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(new CardFolder(expectedModel.getActiveCardFolder()), testApp.readFirstStorageCardFolder());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertListMatching(getCardListPanel(), expectedModel.getFilteredCards());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code CardListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        getBrowserPanel().rememberQuestion();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        getCardListPanel().rememberSelectedCardCard();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @see BrowserPanelHandle#isQuestionChanged()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertEquals(\"\", getBrowserPanel().getCurrentQuestion());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(getCardListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the card in the card list panel at"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @see BrowserPanelHandle#isQuestionChanged()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardListPanelHandle#isSelectedCardCardChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        getCardListPanel().navigateToCard(getCardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        String expectedCardQuestion \u003d getCardListPanel().getHandleToSelectedCard().getQuestion();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertEquals(expectedCardQuestion, getBrowserPanel().getCurrentQuestion());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getCardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the card list panel remain unchanged."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "     * @see BrowserPanelHandle#isQuestionChanged()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardListPanelHandle#isSelectedCardCardChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertFalse(getBrowserPanel().isQuestionChanged());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(getCardListPanel().isSelectedCardCardChanged());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Asserts that the status bar indicates that user is in home directory."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    protected void assertStatusBarIsInHomeDirectory() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(STATUS_IN_HOME_DIRECTORY, handle.getCurrentStatus());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Asserts that the status bar indicates that user is inside a folder."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    protected void assertStatusBarIsInFolder() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(STATUS_IN_FOLDER, handle.getCurrentStatus());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Asserts that the status bar indicates that user is in a test session."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    protected void assertStatusBarIsInTestSession() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(STATUS_IN_TEST_SESSION, handle.getCurrentStatus());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * Asserts that the status bar indicates that user is in a report display."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "    protected void assertStatusBarIsInReportDisplay() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertEquals(STATUS_IN_REPORT_DISPLAY, handle.getCurrentStatus());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @param resultDisplayString is the string that result display should show."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect(String resultDisplayString) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertEquals(resultDisplayString, getResultDisplay().getText());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertListMatching(getCardListPanel(), getModel().getFilteredCards());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertEquals(\"\", getBrowserPanel().getCurrentQuestion());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 49,
      "dlqs": 11,
      "-": 191,
      "KerrynEer": 27,
      "mmdlow": 9
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TypicalCards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class ClearCommandSystemTest extends CardFolderSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: clear non-empty card folder, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: undo clearing card folder -\u003e original card folder restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: redo clearing card folder -\u003e cleared */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new ModelManager(defaultModel.getActiveCardFolder().getFolderName()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: selects first card in card list and clears card folder -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original card folder"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectCard(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: filters the card list before clearing -\u003e entire card folder cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original card folder"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: clear empty card folder -\u003e cleared */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                new ModelManager(TypicalCards.getTypicalFolderName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 19,
      "dlqs": 9,
      "-": 74,
      "KerrynEer": 2
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TestUtil.getCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class DeleteCommandSystemTest extends CardFolderSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: delete the first card in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_CARD.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card deletedCard \u003d removeCard(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: delete the last card in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index lastCardIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(lastCardIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: undo deleting the last card in the list -\u003e last card restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: redo deleting the last card in the list -\u003e last card deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        removeCard(modelBeforeDeletingLast, lastCardIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: delete the middle card in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index middleCardIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(middleCardIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: filtered card list, delete index within bounds of card folder and card list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCards().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: filtered card list, delete index within bounds of card folder but out of bounds of card list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        int invalidIndex \u003d getModel().getActiveCardFolder().getCardList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* --------------------- Performing delete operation while a card card is selected ------------------------ */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: delete the selected card -\u003e card list panel selects the card before the deleted card */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showAllCards();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectCard(selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deletedCard \u003d removeCard(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                getModel().getActiveCardFolder().getCardList().size() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Removes the {@code Card} at the specified {@code index} in {@code model}\u0027s card folder."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @return the removed card"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private Card removeCard(Model model, Index index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card targetCard \u003d getCard(model, index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.deleteCard(targetCard);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return targetCard;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Deletes the card at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card deletedCard \u003d removeCard(expectedModel, toDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 45,
      "dlqs": 15,
      "-": 132,
      "KerrynEer": 2
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.ANSWER_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.HINT_DESC_FRIEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.QUESTION_DESC_SAMPLE_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.QUESTION_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_ANSWER_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_HINT_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.CommandTestUtil.VALID_QUESTION_2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.parser.CliSyntax.PREFIX_HINT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARD_2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Question;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.CardUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class EditCommandSystemTest extends CardFolderSystemTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + QUESTION_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                + \"  \" + ANSWER_DESC_SAMPLE_2 + \" \" + HINT_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        Card editedCard \u003d new CardBuilder(CARD_2).withHint(VALID_HINT_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: undo editing the last card in the list -\u003e last card restored */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: redo editing the last card in the list -\u003e last card edited again */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.setCard(getModel().getFilteredCards().get(INDEX_FIRST_CARD.getZeroBased()), editedCard);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: edit a card with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                       + HINT_DESC_FRIEND + HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandSuccess(command, index, CARD_2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values but with different question -\u003e edited */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(getModel().getActiveCardFolder().getCardList().contains(CARD_2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        index \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertNotEquals(getModel().getFilteredCards().get(index.getZeroBased()), CARD_2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_SAMPLE_1 + ANSWER_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                       + HINT_DESC_FRIEND + HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        editedCard \u003d new CardBuilder(CARD_2).withQuestion(VALID_QUESTION_1).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values but with different answer -\u003e edited */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        index \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_1"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                        + HINT_DESC_FRIEND + HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        editedCard \u003d new CardBuilder(CARD_2).withAnswer(VALID_ANSWER_1).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        /* Case: clear hints -\u003e cleared */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_HINT.getPrefix();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card cardToEdit \u003d getModel().getFilteredCards().get(index.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        editedCard \u003d new CardBuilder(cardToEdit).withHint().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: filtered card list, edit index within bounds of card folder and card list -\u003e edited */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCards().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + QUESTION_DESC_SAMPLE_2;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        cardToEdit \u003d getModel().getFilteredCards().get(index.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        editedCard \u003d new CardBuilder(cardToEdit).withQuestion(VALID_QUESTION_2).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: filtered card list, edit index within bounds of card folder but out of bounds of card list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        int invalidIndex \u003d getModel().getActiveCardFolder().getCardList().size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + QUESTION_DESC_SAMPLE_2,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* --------------------- Performing edit operation while a card card is selected -------------------------- */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: selects first card in the card list, edit a card -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showAllCards();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectCard(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_SAMPLE_1 + ANSWER_DESC_SAMPLE_1"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                       + HINT_DESC_FRIEND;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        // browser\u0027s url is updated to reflect the new card\u0027s question"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandSuccess(command, index, CARD_1, index);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + QUESTION_DESC_SAMPLE_2,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + QUESTION_DESC_SAMPLE_2,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredCards().size() + 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + QUESTION_DESC_SAMPLE_2,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + QUESTION_DESC_SAMPLE_2,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: invalid question -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: invalid answer -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                + INVALID_ANSWER_DESC, Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        executeCommand(CardUtil.getAddCommand(CARD_2));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertTrue(getModel().getActiveCardFolder().getCardList().contains(CARD_2));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertFalse(getModel().getFilteredCards().get(index.getZeroBased()).equals(CARD_2));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                       + HINT_DESC_FRIEND + HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values but with different hints -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_2"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                       + HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values but with different answer -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "                EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_SAMPLE_2 + ANSWER_DESC_SAMPLE_1"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "                       + HINT_DESC_FRIEND + HINT_DESC_HUSBAND;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Card, Index)} except that"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Card, Index)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Card editedCard) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedCard, null);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the card at index {@code toEdit} being"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * updated to values specified {@code editedCard}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Card editedCard,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.setCard(expectedModel.getFilteredCards().get(toEdit.getZeroBased()), editedCard);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "     * 4. Asserts that the status bar still indicates the user is in folder correctly.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        expectedModel.updateFilteredCard(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 74,
      "dlqs": 30,
      "-": 130,
      "KerrynEer": 29,
      "mmdlow": 12
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class HelpCommandSystemTest extends CardFolderSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        getCardListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_CARD_PAGE, getBrowserPanel().getCurrentQuestion());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertListMatching(getCardListPanel(), getModel().getFilteredCards());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 5,
      "dlqs": 6,
      "-": 91,
      "mmdlow": 2
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static final Predicate\u003cCard\u003e PREDICATE_MATCHING_NO_CARDS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cCard\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Optional\u003cPredicate\u003cCard\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        model.updateFilteredCard(predicate.orElse(PREDICATE_MATCHING_NO_CARDS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public static void setFilteredList(Model model, Card... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Card} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    private static Predicate\u003cCard\u003e getPredicateMatching(Card other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        return card -\u003e card.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 8,
      "dlqs": 2,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.CardFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class SampleDataTest extends CardFolderSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    protected CardFolder getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void cardFolder_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Card[] expectedList \u003d SampleDataUtil.getSampleCards();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertListMatching(getCardListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 5,
      "dlqs": 5,
      "-": 41
    }
  },
  {
    "path": "src/test/java/systemtests/SearchCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.hint.Hint;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandSystemTest extends CardFolderSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find multiple cards in card folder, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "         * -\u003e 2 cards found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: repeat previous find command where card list is displaying the cards we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "         * -\u003e 2 cards found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find card where card list is not displaying the card we are finding -\u003e 1 card found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find multiple cards in card folder, 2 keywords -\u003e 2 cards found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find multiple cards in card folder, 2 keywords in reversed order -\u003e 2 cards found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find multiple cards in card folder, 2 keywords with 1 repeat -\u003e 2 cards found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find multiple cards in card folder, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "         * -\u003e 2 cards found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find same cards in card folder after deleting 1 of them -\u003e 1 card found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse(getModel().getActiveCardFolder().getCardList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find card in card folder, keyword is same as question but of different case -\u003e 1 card found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find card in card folder, keyword is substring of question -\u003e 0 cards found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find card in card folder, question is substring of keyword -\u003e 0 cards found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find card not in card folder -\u003e 0 cards found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find answer number of card in card folder -\u003e 0 cards found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + DANIEL.getAnswer().fullAnswer;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        /* Case: find hints of card in card folder -\u003e 0 cards found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mmdlow"
        },
        "content": "        List\u003cHint\u003e hints \u003d new ArrayList\u003c\u003e(DANIEL.getHints());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + hints.get(0).hintName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find while a card is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showAllCards();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        selectCard(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                getCardListPanel().getHandleToSelectedCard().getQuestion().equals(DANIEL.getQuestion().fullQuestion));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: find card in empty card folder -\u003e 0 cards found */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteAllCards();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * box displays {@code Messages#MESSAGE_CARDS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                MESSAGE_CARDS_LISTED_OVERVIEW, expectedModel.getFilteredCards().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 29,
      "dlqs": 13,
      "-": 141,
      "mmdlow": 2,
      "KerrynEer": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.logic.commands.SelectCommand.MESSAGE_SELECT_CARD_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalCards.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import static seedu.knowitall.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "public class SelectCommandSystemTest extends CardFolderSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: select the first card in the card list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: select the last card in the card list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        Index cardCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + cardCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandSuccess(command, cardCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: select the middle card in the card list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: filtered card list, select index within bounds of card folder but out of bounds of card list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        int invalidIndex \u003d getModel().getActiveCardFolder().getCardList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: filtered card list, select index within bounds of card folder and card list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredCards().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredCards().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        /* Case: select from empty card folder -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        deleteAllCards();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected card.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 4. {@code Storage} and {@code CardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "                MESSAGE_SELECT_CARD_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getCardListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * 4. {@code Storage} and {@code CardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * {@code CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * @see CardFolderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KerrynEer"
        },
        "content": "        assertStatusBarIsInFolder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 31,
      "dlqs": 13,
      "-": 108,
      "KerrynEer": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlqs"
        },
        "content": "import seedu.knowitall.model.ReadOnlyCardFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyCardFolder\u003e cardFolder, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(cardFolder, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     * Initialises the {@code CardListPanelHandle} in the {@code mainWindowHandle}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    public void initialiseCardListPanelHandle() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "        mainWindowHandle.initialiseCardListPanelHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "afterdusk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "afterdusk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "afterdusk": 9,
      "dlqs": 2,
      "-": 70
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003c?import seedu.knowitall.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlqs"
        },
        "content": "\u003cfx:root type\u003d\"seedu.knowitall.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dlqs": 1,
      "-": 5
    }
  }
]
