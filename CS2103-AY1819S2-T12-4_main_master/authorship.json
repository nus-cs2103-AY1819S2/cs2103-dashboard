[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d PDF++"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-T12-4/main[image:https://travis-ci.org/CS2103-AY1819S2-T12-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://ci.appveyor.com/project/WeiTangLau/main[image:https://ci.appveyor.com/api/projects/status/ehoaix51okkaq3r0?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-T12-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-T12-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://www.codacy.com/p/210656?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dcs2103-ay1819s2-t12-4/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/ee2bd70ba94d406ebec24148ecfd4c6c?svg\u003dtrue[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* This is a desktop PDF++ application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* It is a Java application that allows users to store and manage all their PDF files."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Users can perform multiple functions to customise their experience in manging their PDF files."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** More test cases, including automated GUI testing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* The source code is based on link:https://github.com/nus-cs2103-AY1819S2/addressbook-level4[AddressBook-Level4] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "link:https://github.com/se-edu/[SE-EDU initiative]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], https://github.com/apache/pdfbox[Apache PDFBox]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 12,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"githubId\": \"lormee94\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"displayName\": \"JER...LOW\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"authorNames\": [\"lormee94\", \"Jeremy\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"githubId\": \"jetkan-yk\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"displayName\": \"KAN...ENG\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"authorNames\": [\"jetkan-yk\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"githubId\": \"WeiTangLau\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"displayName\": \"LAU...ANG\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"authorNames\": [\"WeiTangLau\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"githubId\": \"ptvrajsk\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"displayName\": \"PRI...MAR\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"authorNames\": [\"ptvrajsk\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    implementation group: \u0027org.apache.pdfbox\u0027, name: \u0027pdfbox\u0027, version: \u00272.0.14\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    archiveName \u003d \u0027pdfplusplus.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            //Initially Included"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            //Initially Included"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u0027site-name\u0027: \u0027PDF++\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-T12-4/main\u0027,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 3,
      "-": 228
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "PDF++ was developed by the https://cs2103-ay1819s2-t12-4.github.io/main/[T12-4] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lau Wei Tang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::weitanglau.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::github-icon.png[width\u003d30, link\u003dhttps://github.com/WeiTangLau]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image:portfolio-icon.jpg[width\u003d30, link\u003dteam/LauWeiTang_PPP.html]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prithivi Raj"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "image::ptvrajsk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::github-icon.png[width\u003d30, link\u003dhttps://github.com/ptvrajsk]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image:portfolio-icon.jpg[width\u003d30, link\u003d\"team/ptvrajsk_PPP.html\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jet Kan Yip Keng"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::jetkan-yk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::github-icon.png[width\u003d30, link\u003dhttp://github.com/jetkan-yk]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:portfolio-icon.jpg[width\u003d30, link\u003dteam/KanYipKeng_PPP.adoc]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jeremy Yiren Low"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image::lormee94.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::github-icon.png[width\u003d30, link\u003dhttp://github.com/lormee94]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image:portfolio-icon.jpg[width\u003d30, link\u003dteam/JeremyYirenLow_PPP.html]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 4,
      "WeiTangLau": 6,
      "-": 43
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d PDF++ - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":toc: preamble"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":toclevels: 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "By: `Team T12-4`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/pdf/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/pdf/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Run the `seedu.pdf.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/pdf/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::SDforDeletePdf.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/pdf/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PdfListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/pdf/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "link:{repoURL}/src/main/java/seedu/pdf/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".  `Logic` uses the `PdfBookParser` class to parse the user command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a pdf)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::DeletePdfSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/pdf/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* stores the Pdf Book data."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPdf\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Pdf Book`, which `Pdf` can reference. This would allow `Pdf Book` to only require one `Tag` object per unique `Tag`, instead of each `Pdf` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/pdf/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* can save the Pdf Book data in json format and read it back."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Classes used by multiple components are in the `seedu.pdfbook.commons` package."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `TAG...` can be used as `{nbsp}` (i.e. 0 times), `MyTag`, `TagA TagB TagC` etc."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Add feature"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The add feature is facilitated by both the *AddCommandParser* and *AddCommand*."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature adds the PDF file to the app using the path specified by your users."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Your users can then perform multiple operations supported by PDF++ on the added files."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Some examples of features supported include \u003c\u003cEdit feature\u003e\u003e and \u003c\u003cOpen feature\u003e\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Currently PDF++ only supports PDF files, any other types of files will not be accepted."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The Add feature has the following syntax:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`add`#"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`add f/\u003cPATH_TO_FILE\u003e t/\u003cTAG\u003e...`#"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `f/` refers to the command immediately following after this prefix is a file"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `\u003cPATH_TO_FILE\u003e` refers to the path to the `Pdf` you wish to add"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `\u003cTAG\u003e...` refers to the new `Tag` you wish to add. Leave this portion empty if you"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "do not wish to tag this file."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* Entering `add` without `\u003cINDEX\u003e` or  `\u003cNEWDIRECTORY\u003e` will open the default file"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lormee94"
        },
        "content": "selection GUI for the user to add the file directly."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please ensure that you have entered the full `PATH_TO_FILE`. Please refer to"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`Step-by-Step Guide -- add` below for detailed explanation."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature breakdown"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "workings of the Add feature."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1: The user launches the application with either an existing set of `Pdf` or a new"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "sample set of `Pdf` stored within as shown below."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::AddFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2: The user navigates to the folder with the file and copy the directory."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* __For Windows__"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Once the user has navigated to the folder, click on the address bar and copy"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::AddFeatureStep2CopyDirectory.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* __For Mac__"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: The user enters the `add` command into the CLI interface, following the"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "outlined syntax as illustrated below."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Your users must type the file name **after** the directory copied at __Step 2__"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::AddFeatureStep3UserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE] you can enter `add` and hit enter, to open up a GUI for you to select the file you"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "wish to add."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 4: Upon hitting enter to execute the command, the *AddCommandParser* parses the input"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lormee94"
        },
        "content": "into several components that are required to be executed by the *AddCommand*."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Upon parsing, the parser then creates a new *AddCommand* that will be executed according to"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the your input."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 5: Upon receiving the necessary information from the parser, the `AddCommand` first"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "begins by checking for validity as shown below."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Duplicate `Pdf` found in PDF++"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::AddFeatureStep5DuplicateFound.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `Pdf` does not exist in directory"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::AddFeatureStep5PdfNotFound.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `Pdf` found and no duplication in PDF++"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::AddFeatureStep5Sucess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 6: If the validity check and the individual property check passes, the file is then"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "added to PDF++"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "As of v1.2, the Add feature is only capable of adding 1 `Pdf` file at a time. By v1.4,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the feature will support adding multiple files."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::AddCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::open[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Open feature"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `open` feature is facilitated by both the *OpenCommandParser* and *OpenCommand*."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Essentially upon opening a Pdf that is tracked by the application, the user will be able to"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lormee94"
        },
        "content": "execute the PDF with the operating system\u0027s default PDF reader application."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The Open feature has the following syntax:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`open \u003cINDEX\u003e`#"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the `Pdf` that you wish to edit."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the Open feature."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: The user launches an application with either an existing set of `Pdf` or a"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lormee94"
        },
        "content": "new sample set of `Pdf` stored within as shown below."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::OpenFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 2: The user chooses a `Pdf` that they wish to open, in this case `a.pdf`, and"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lormee94"
        },
        "content": "enters the `open` command into the CLI Interface, following the outlined Syntax as"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lormee94"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::OpenFeatureStep2UserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: Upon hitting enter to execute the command, the *OpenCommandParser* parses"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the input into relevant objects that are required to be executed by the *OpenCommand*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lormee94"
        },
        "content": "object. Upon parsing, the parser then creates a new *OpenCommand* that will execute the"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lormee94"
        },
        "content": "user\u0027s input."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 4: Upon receiving the necessary information from the parser, the *OpenCommand*"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lormee94"
        },
        "content": "retrieves the directory of the Pdf listed in the Pdf Book. It then launches the Pdf"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lormee94"
        },
        "content": "with the user-default Pdf reader."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::OpenCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lormee94"
        },
        "content": "For more information about the behavior of launching the Pdf, please refer to Java SE 9 class Desktop."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::open[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Edit feature"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `edit` feature is facilitated by both the *EditCommandParser* and *EditCommand*."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Essentially upon adding a Pdf to be tracked by the application, the user will be able to"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "change certain attributes tied to the PDF such as the `Name` and `Tag` tied to a particular Pdf."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The Edit feature has the following syntax:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`edit \u003cINDEX\u003e n/\u003cNEWNAME\u003e t/\u003cNEWTAG1\u003e...`#"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `n/` indicates that you are editing the name of the file"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cNEWNAME\u003e` refers to the new value that you would like to set the file _Name_ to."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cNEWTAG...\u003e` refers to the new _Tag_ you wish to add. Leave this portion empty if you"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "do not wish to tag this file."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "workings of the Edit feature."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1: The user launches an application with either an existing set of `Pdf` or a"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "new sample set of `Pdf` stored within as shown below."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EdiFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 2: The user chooses a `Pdf` that they wish to edit, in this case `g.pdf`, and"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "enters the `edit` command into the CLI Interface, following the outlined Syntax as"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::EditFeatureUserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: Upon hitting enter to execute the command, the *EditCommandParser* parses"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the input into relevant objects that are required to be executed by the *EditCommand*"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lormee94"
        },
        "content": "object. Upon parsing, the parser then creates a new *EditCommand* that will execute the"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "user\u0027s input."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 4: Upon receiving the necessary information from the parser, the *EditCommand* first"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "begins by checking for validity as shown below."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::EditFeatureNoDuplicate.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::EditFeatureDuplicate.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 5: If the validity check and the individual property check passes, the file is then"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "effectively renamed within PDF++ and in the actual directory, thus resulting in an output"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "as shown below."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::EditFeatureFinalOutput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As of V1.2, the Edit Feature removes any existing `Tag` s and replaces them with those"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "input by the user (If any). By `V1.4` The user will be able to select tags he wishes"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to remove or add."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::EditCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::move[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Move feature"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `move` feature is facilitated by both *MoveCommand* and *MoveCommandParser*."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature functions as a simplified version of \u003c\u003cEdit feature\u003e\u003e, as in nature"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lormee94"
        },
        "content": "it is making an edit to the directory of the file. However, in addition to making changes"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lormee94"
        },
        "content": "to the directory in the application storage, it also ensures that the directory changes"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lormee94"
        },
        "content": "are reflected in the local filesystem."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The design consideration into separating move as a new command from edit factored in the"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lormee94"
        },
        "content": "purpose of the application; as a document manager, the term \"edit\" is synonymous with"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lormee94"
        },
        "content": "making content or characteristic changes when it is applied in the context of documents."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The Move feature has the following syntax:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`move`#"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`move \u003cINDEX\u003e \u003cNEWDIRECTORY\u003e`#"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the file that you wish to move."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cNEWDIRECTORY\u003e` refers to the address of the new location the file is to be moved."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* Entering `move` without `\u003cINDEX\u003e` or  `\u003cNEWDIRECTORY\u003e` will open the default file"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lormee94"
        },
        "content": "selection GUI for the user to select the file directly."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lormee94"
        },
        "content": "All parts of the syntax are required."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature breakdown"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the `move` feature."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: From the main interface of the application, the user chooses a `Pdf` that"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lormee94"
        },
        "content": "they wish to move, and enters the `move` command into the CLI Interface, following"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the outlined Syntax as illustrated below."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MoveFeatureStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lormee94"
        },
        "content": "In this scenario, there is a file *document.pdf* in the windows _Desktop_ directory, and"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the `move` command entered is intended for the file to be moved to the windows _Documents_"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lormee94"
        },
        "content": "directory."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 2: After executing the command, the `MoveCommandParser` parses the input into"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lormee94"
        },
        "content": "relevant objects that are required to be executed by the `MoveCommand` object. In"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lormee94"
        },
        "content": "particular, it ensures that there are correctly two arguments passed as described in the"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lormee94"
        },
        "content": "above Syntax. Upon parsing, the parser then creates a new `MoveCommand` that will execute"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the user\u0027s input."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: The `MoveCommand` is then executed. Successful execution of the command would return"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lormee94"
        },
        "content": "a *CommandResult* object, while unsuccessful execution due to validation failure will throw"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lormee94"
        },
        "content": "a *CommandException*."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MoveCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::move[]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::merge[]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Merge feature"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `merge` feature is facilitated by both *MergeCommand* and *MergeCommandParser*."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature utilises the"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_], specifically the"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lormee94"
        },
        "content": "API to append two or more PDFs and create a new file with the merged content. As there will be one"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lormee94"
        },
        "content": "additional file added to the application, this feature also implicitly performs an `Add` feature to add the new"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lormee94"
        },
        "content": "PDF to the application."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The Merge feature has the following syntax:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`merge \u003cINDEX1\u003e \u003cINDEX2\u003e ...`#"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the `Pdf` that you wish to merge."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* Minimum of two indices have to be provided for the merge to be performed, up to as many"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lormee94"
        },
        "content": "indices as desired."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* It is possible to repeat an index; the PDF would simply merge with a copy of itself."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature breakdown"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the `merge` feature."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: From the main interface of the application, the user chooses the file(s) that"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lormee94"
        },
        "content": "they wish to merge, and enters the `merge` command into the CLI Interface, following"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the outlined Syntax as illustrated below."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MergeFeatureStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 2: After executing the command, the *MergeCommandParser* parses the input into"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lormee94"
        },
        "content": "relevant objects that are required to be executed by the *MergeCommand* object. In"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lormee94"
        },
        "content": "particular, it ensures that there are two or more arguments passed as described in the"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lormee94"
        },
        "content": "above Syntax. Upon parsing, the parser then creates a new *MergeCommand* that will execute"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the user\u0027s input."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lormee94"
        },
        "content": "In this case, the above two files will be merged, with the _\"CS2103T_PDF++_UG_Intro.pdf\"_"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lormee94"
        },
        "content": "file appended behind the other file."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: The *MergeCommand* is then executed. During the execution, there are several levels"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lormee94"
        },
        "content": "of validation that, failing which would stop the execution and throw an exception."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Here are the different cases:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lormee94"
        },
        "content": "In these cases, all exceptions encountered will be handled as a  *CommandException*. This design"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lormee94"
        },
        "content": "consideration was made to add convenience to error handling."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* One or more of the indices provided are invalid i.e. the index is negative or does not reference"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lormee94"
        },
        "content": "any of the Pdfs listed. A *ParseException* is thrown."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* When loading the PDDocument of the file, the file cannot be accessed for various reasons:-"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** If the document cannot be found, a *FileNotFoundException* is thrown."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** If the document is encrypted, an *InvalidPasswordException* is thrown."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** If the document cannot be opened for any other reason, an *IOException* is thrown."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* When any of the files to the fail to be added to the PDFMergerUtility, an *IOException* is thrown."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* After merging the files, if any of the PDDocuments are unable to be closed, an *IOException* is thrown."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 4: Successful execution of the command would return a *CommandResult* object and create the"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lormee94"
        },
        "content": "a new file with the merged content. The new name of the merged file follows the format: \"merged[hashcode].pdf\". This is to ensure"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lormee94"
        },
        "content": "unique file name. The hashcode in the name will be modified if name already exists."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The following Activity Diagram is a summary of the entire execution process."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MergeCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::merge[]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Delete feature"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `delete` feature is facilitated by both *DeleteCommand* and *DeleteCommandParser*."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature performs either a _soft_ or _hard_ remove operation on a file in the application"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lormee94"
        },
        "content": "based on the index provided."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* _Soft_ delete is defined as removing a file from the application but not from the local filesystem;"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the physical file is left intact within the user\u0027s operating system, but the user will not be able to access or"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lormee94"
        },
        "content": "use the features of the application on said file - unless it is added back to the application."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* _Hard_ delete is defined as removing a file both from the application and the local filesystem;"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the physical file will be deleted and the user will not be able to access or perform any operations"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lormee94"
        },
        "content": "on the file, either through the application or through the user\u0027s operating system."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lormee94"
        },
        "content": "As of v1.4 there is no way to completely undo the _hard_ delete operation. When the file is deleted from the"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lormee94"
        },
        "content": "filesystem, it is permanently erased. Even the \u003c\u003cUndo/Redo feature\u003e\u003e cannot help with this..."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `delete` feature has the following syntax:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`delete \u003cINDEX\u003e`#"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`delete \u003cINDEX\u003e hard`#"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the file in the list that you wish to perform the `action` on."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* If the keyword `hard` is not specified, the _soft_ delete operation will be performed. Otherwise, the _hard_"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lormee94"
        },
        "content": "delete operation will be performed."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature breakdown"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the `delete` feature."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: From the main interface, the user chooses a file that they wish to delete, and"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lormee94"
        },
        "content": "enters the `delete` command into the CLI Interface, following the outlined Syntax mentioned."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 2: Upon hitting enter to execute the command, the *DeleteCommandParser* parses"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the input into relevant objects that are required to be executed by the *DeleteCommand*"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lormee94"
        },
        "content": "object. Upon parsing, the parser then creates a new *DeleteCommand* that will execute the"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "user\u0027s input."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: The *DeleteCommand* is then executed. Successful execution will return a"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*CommandResult* indicating that the deadline has been set."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::DeleteCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::clear[]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Clear feature"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `clear` feature is facilitated by both *ClearCommand* and *ClearCommandParser*."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This features removes all the PDF files that were previously stored in PDF++. It is similar to"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the \u003c\u003cDelete feature\u003e\u003e in that it removes files from the application, with multiple files instead of"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lormee94"
        },
        "content": "one at a time. However, it differs that it does not have the option to delete the file from the local"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "lormee94"
        },
        "content": "filesystem."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `Clear` feature has to following syntax:"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`clear`#"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* The `clear` command will be executed regardless if there is any invalid text that comes after the command"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* All files will be removed from the application, but not from the local filesystem."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Since the `clear` feature is very easily executed, if you have accidentally entered the `clear` command and"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lormee94"
        },
        "content": "wish to revert the action, please refer to \u003c\u003cUndo/Redo feature\u003e\u003e for more information."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::ClearCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::clear[]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::deadline[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Deadline feature"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `deadline` feature is facilitated by both *DeadlineCommand* and *DeadlineCommandParser*"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature allows you to set or remove deadlines of the file specified by you from PDF++."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The deadlines will be recorded and displayed both in the list of files as well as in the information panel"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lormee94"
        },
        "content": "for each individual file."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `deadline` feature has the following syntax:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`deadline \u003cINDEX\u003e \u003cACTION\u003e`#"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the file in the list that you wish to perform the `action` on."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cACTION\u003e` refers to the type of action that you wish to perform. There are 3 actions that you can perform"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** `date/\u003cDATE\u003e`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*** `date/` refers to command immediately following after this prefix is a date"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** `\u003cDATE\u003e` must be of `dd-mm-yyyy` format (E.g. 15-03-2019)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** `done` assigns the file a *_DONE_* status"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** `remove` assigns the file a *_REMOVE_* status"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the `deadline` feature."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: From the main interface, the user chooses a file that they wish to set a deadline,"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lormee94"
        },
        "content": "enters the `deadline` command into the CLI Interface, following the outlined Syntax mentioned."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 2: Upon hitting enter to execute the command, the *DeadlineCommandParser* parses"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the input into relevant objects that are required to be executed by the *DeadlineCommand*"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lormee94"
        },
        "content": "object. Upon parsing, the parser then creates a new *DeadlineCommand* that will execute the"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lormee94"
        },
        "content": "user\u0027s input."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: The *DeadlineCommand* is then executed. Successful execution will return a"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*CommandResult* indicating that the deadline has been set."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::DeadlineCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "lormee94"
        },
        "content": "After a deadline has been added to the PDF file specified, the date will be color coded according to days"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "lormee94"
        },
        "content": "remaining from the current day until the deadline date."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::deadline[]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::help[]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Help feature"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `help` feature brings up the UserGuide in a browser window as a html file. Following other"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lormee94"
        },
        "content": "features, the command is parsed and a *HelpCommand* object is created to be executed."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `help` feature has to following syntax:"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`help`#"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "lormee94"
        },
        "content": "After execution, the user will be directed to the start of the _UserGuide.adoc_ as shown."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Users can reference from the UserGuide directly on how to navigate the guide."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::UserGuide.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::help[]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::exit[]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Exit feature"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `exit` feature is facilitated by *ExitCommand*. This feature allows you to exit from _PDF++_."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `exit` feature has to following syntax:"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`exit`...#"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* The `exit` command will be executed regardless if there is any invalid text that comes after the command"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Your files and commands are immediately stored after execution, and can be retrieved on"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lormee94"
        },
        "content": "reopening the application."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::exit[]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d List feature"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The list feature is facilitated by *ListCommand*."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature will display all of the files currently stored within the application at the"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lormee94"
        },
        "content": "main interface. By default, all of the files will be displayed when the application is"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lormee94"
        },
        "content": "started. However, the display of the interface can be changed to reflect the results of"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003c\u003cFind feature\u003e\u003e or \u003c\u003cFilter feature\u003e\u003e."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Certain features such as \u003c\u003cMerge feature\u003e\u003e rely on the index of the file(s) displayed on"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the main interface. Since the `find` or `filter` feature would list a sample of all"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the files at the main interface, no commands can be executed on the files not included in"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the results. Hence, the `list` feature is added to allow for a \"reset\" of the view of the files."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `List` feature has to following syntax:"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`list`#"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `find` feature is facilitated by *FindCommand* and *FindCommandParser*."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature lists a subset of all the files in the application based on the keyword(s)"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "lormee94"
        },
        "content": "provided. Using the keyword(s), the application will check the names of all files, as"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lormee94"
        },
        "content": "well as the content of the text within the files."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `find` feature has to following syntax:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`find \u003cKEYWORD\u003e ...`#"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cKEYWORD\u003e` refers to the word that the application will use as reference to find"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "lormee94"
        },
        "content": "files. There must be at least one provided."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::FindCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Filter feature"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `filter` feature is facilitated by *FilterCommand* and *FilterCommandParser*."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature is similar to \u003c\u003cFind feature\u003e\u003e in that it lists a subset of all the files"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "lormee94"
        },
        "content": "in the application, except that it will list the files based on the tag of the file."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `filter` feature has to following syntax:"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`filter t/\u003cTAG\u003e ...`#"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cTAG\u003e` refers to a tag that is valid, i.e. a tag that was previously set on a file."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* All tags need to have the prefix #/t# to differentiate between each tag."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::FilterCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::select[]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Select feature"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The select feature is facilitated by `SelectCommand`. `Enter functionality here`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `Select` feature has to following syntax: `select`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Enter here"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Enter note here"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::select[]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The sort feature is facilitated by `SortCommand`. `Enter functionality here`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `Sort` feature has to following syntax: `sort`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Enter here"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Enter note here"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::tag[]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Tag feature"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The tag feature is facilitated by `TagCommand`. `Enter functionality here`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `Tag` feature has to following syntax: `tag t/`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Enter here"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Enter note here"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::tag[]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::History[]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d History feature"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The history feature is facilitated by `HistoryCommand`."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature displays the previous commands entered since the start of the current session"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "lormee94"
        },
        "content": "of the application; each time the application is closed, the command history will be erased."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `history` feature has to following syntax:"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`history`#"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* When there is no command history, a message will be shown to notify the user."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::History[]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedPdfBook`."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "It extends `PdfBook` with an undo/redo history, stored internally as an `pdfBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `VersionedPdfBook#commit()` -- Saves the current pdf book state in its history."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `VersionedPdfBook#undo()` -- Restores the previous pdf book state from its history."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `VersionedPdfBook#redo()` -- Restores a previously undone pdf book state from its history."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitPdfBook()`, `Model#undoPdfBook()` and `Model#redoPdfBook()` respectively."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedPdfBook` will be initialized with the initial pdf book state, and the `currentStatePointer` pointing to that single pdf book state."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th pdf in the pdf book. The `delete` command calls `Model#commitPdfBook()`, causing the modified state of the pdf book after the `delete 5` command executes to be saved in the `pdfBookStateList`, and the `currentStatePointer` is shifted to the newly inserted pdf book state."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new pdf. The `add` command also calls `Model#commitPdfBook()`, causing another modified pdf book state to be saved into the `pdfBookStateList`."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "If a command fails its execution, it will not call `Model#commitPdfBook()`, so the pdf book state will not be saved into the `pdfBookStateList`."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 4. The user now decides that adding the pdf was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoPdfBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous pdf book state, and restores the pdf book to that state."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial pdf book state, then there are no previous pdf book states to restore. The `undo` command uses `Model#canUndoPdfBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoPdfBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the pdf book to that state."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "If the `currentStatePointer` is at index `pdfBookStateList.size() - 1`, pointing to the latest pdf book state, then there are no undone pdf book states to restore. The `redo` command uses `Model#canRedoPdfBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the pdf book, such as `list`, will usually not call `Model#commitPdfBook()`, `Model#undoPdfBook()` or `Model#redoPdfBook()`. Thus, the `pdfBookStateList` remains unchanged."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitPdfBook()`. Since the `currentStatePointer` is not pointing at the end of the `pdfBookStateList`, all pdf book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire pdf book."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the pdf being deleted)."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of pdf book states."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedPdfBook`."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::fileprotection[]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d File Protection"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF++ has a robust in-built file protection system which allows you to encrypt or decrypt any"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF files you want. Both encrypt and decrypt feature are facilitated by both `EncryptCommand /"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "DecryptCommand` and `EncryptCommandParser / DecryptCommandParser`."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "For encryption, you can"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "select the file on the list that you wish to encrypt with a password you specified. Likewise,"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "for decryption, you have to enter the password of the encrypted file that you wish to decrypt."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The Encrypt and Decrypt feature has the following syntax:"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Encryption: `encrypt INDEX password/PASSWORD`"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Decryption: `decrypt INDEX password/PASSWORD`"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `INDEX` refers to the index of the file on the list that you wish to encrypt/decrypt"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `password/` refers to the command immediately following after this prefix is the password"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "of the file"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `PASSWORD` refers to the password you wish to encrypt your file with / of the encrypted file"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "you want to decrypt."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please ensure that you have entered the correct password as undo \u0026 redo functions do not work"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "with encrypt \u0026 decrypt."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please refer to `Step-by-Step Guide -- encrypt` for encryption guide and `Step-by-Step Guide --"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "decrypt` for decryption guide."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-Step Guide -- encrypt"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrate below is a sample usage scenario that provides a clear view to the inner workings"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "of the Encrypt feature."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1: The user launches the application with either an existing set of `Pdf` or a new"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "sample set of `Pdf` stored within as shown below. Please refer to \u003c\u003cAdd feature\u003e\u003e for guide"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "in how you can add your files into PDF++."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2: You select the file that you wish to encrypt via the INDEX on the list."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep2Index.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: Enter the `encrypt` command into the CLI interface, following the outlined syntax as"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep3UserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 4: Upon hitting enter to execute the command, the `EncryptCommandParser` parses the input"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "into several components that are required to be executed by the `EncryptCommand`."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Upon parsing, the parser then creates a new `EncryptCommand` that will be executed according"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "to your input."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 5: Upon receiving the necessary information from the parser, which includes the INDEX and"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PASSWORD, the `EncryptCommand` first checks if the INDEX is valid."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `INDEX` is invalid or out of bound."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep5InvalidIndex.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `INDEX` and `PASSWORD` are both valid. The file you selected will be encrypted with the"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "password you specified."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep5Sucess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 6: If the command passes the validity check, the file you have selected is encrypted."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "You can open your file to see the result. Please refer to \u003c\u003cOpen feature\u003e\u003e for the `open` feature."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::EncryptCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-Step Guide -- decrypt"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrate below is a sample usage scenario that provides a clear view to the inner workings"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "of the Decrypt feature."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`decrypt` feature is very similar to `encrypt` feature."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1: The user launches the application with either an existing set of `Pdf` or a new"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "sample set of `Pdf` stored within as shown below. Please refer to \u003c\u003cAdd feature\u003e\u003e for guide"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "in how you can add your files into PDF++."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2: You select the file that you wish to decrypt via the INDEX on the list."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep2Index.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: Enter the `decrypt` command into the CLI interface, following the outlined syntax as"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "illustrate below."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep3UserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 4: Upon hitting enter to execute the command, the `DecryptCommandParser` parses the input"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "into several components that are required to be executed by the `DecryptCommand`."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Upon parsing, the parser then creates a new `DecryptCommand` that will be executed according"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "to your input."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 5: Upon receiving the necessary information from the parser, which includes the INDEX and"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PASSWORD, the `DecryptCommand` first checks if the INDEX is valid."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `INDEX` is invalid or out of bound."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep5InvalidIndex.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `PASSWORD` is invalid"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please enter the password of the encrypted file. You will not be able to decrypt the file"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "without the password."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep5InvalidPassword.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `INDEX` and `PASSWORD` are both valid. The file you selected will be decrypted with the"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "password you specified."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep5Sucess.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 6: If the command passes the validity check, the file you have selected is decrypted."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "You can open your file to see the result. Please refer to \u003c\u003cOpen feature\u003e\u003e for the `open` feature."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::DecryptCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// end::fileprotection[]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file directory, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.pdf.ui` package."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `seedu.pdf.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `seedu.pdf.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `seedu.pdf.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/pdf/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "A project often depends on third-party libraries. For example, Pdf Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all pdfs in the list."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/pdf/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu.pdf/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/pdf/logic/parser/PdfBookParser.java[`PdfBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/pdf/logic/parser/PdfBookParser.java[`PdfBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the pdf book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the pdf book."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/pdf/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu.pdf/model/PdfBook.java[`PdfBook`] API need to be updated."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/pdf/model/PdfBook.java[`PdfBook`] and link:{repoURL}/src/main/java/seedu.pdf/model/pdf/Pdf.java[`Pdf`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/pdf/model/PdfBook.java[`PdfBook`] allows you to update a pdf, and link:{repoURL}/src/main/java/seedu/pdf/model/pdf/Pdf.java[`Pdf`] allows you to update the tags."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/pdf/model/PdfBook.java[`PdfBook`]. Loop through each pdf, and remove the `tag` from each pdf."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/pdf/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu.pdf/model/ModelManager.java[`ModelManager`] should call `PdfBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your pdf book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last pdf in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside pdf cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/pdf/ui/PdfCard.java[the `PdfCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** You can modify the existing test methods for `PdfCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/pdf/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu.pdf/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/pdf/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu.pdf/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/pdf/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/pdf/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/pdf/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/pdf/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/PdfBookSystemTest.java[`PdfBookSystemTest#assertCommandBoxShowsDefaultStyle() and PdfBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/pdf/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the pdf book."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/pdf/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the pdf book is updated."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/pdf/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of pdfs when the application just started."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/pdf/ui/StatusBarFooter.java[`StatusBarFooter#handlePdfBookChangedEvent(PdfBookChangedEvent)`] to update the number of pdfs whenever there are new changes to the pdfbook."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save directory and sync status."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/PdfBookSystemTest.java[`PdfBookSystemTest`] to also verify the new total number of pdfs status bar."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the pdf book to the cloud. However, the current implementation of the application constantly saves the pdf book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the pdf book storage."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add a new method `backupPdfBook(ReadOnlyPdfBook)`, so that the pdf book can be saved in a fixed temporary directory."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/pdf/storage/PdfBookStorage.java[`PdfBookStorage`] interface."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/pdf/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu.pdf/storage/JsonPdfBookStorage.java[`JsonPdfBookStorage`] class."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Scenario:* You are a software maintainer for `pdfbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a pdf specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first pdf to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first pdf."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/pdf/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/pdf/logic/parser/PdfBookParser.java[`PdfBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/pdf/logic/parser/PdfBookParserTest.java[`PdfBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/pdf/logic/parser/PdfBookParser.java[`PdfBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/pdf/logic/parser/PdfBookParserTest.java[`PdfBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PdfCard`"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/pdf/ui/PdfCard.java[`PdfCard`] s to display a remark for each pdf later."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PdfListCard.fxml[`PdfListCard.fxml`]."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/pdf/ui/PdfCard.java[`PdfCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PdfCardHandle.java[`PdfCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/pdf/model/pdf/Pdf.java[`Pdf`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/pdf/model/pdf/Directory.java[`Directory`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Pdf` to support a `Remark` field"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/pdf/model/pdf/Pdf.java[`Pdf`]."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/pdf/model/pdf/Pdf.java[`Pdf`]."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the pdf will be created without a remark)."
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/pdf/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/pdfbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPdf` class"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "We now have `Remark` s for `Pdf` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/pdf/storage/JsonAdaptedPdf.java[`JsonAdaptedPdf`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Fix `invalidAndValidPdfPdfBook.json`, `typicalPdfsPdfBook.json`, `validPdfBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PdfBuilder`"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Since `Pdf` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/pdf/testutil/PdfBuilder.java[`PdfBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu.pdf/model/pdf/Pdf.java[`Pdf`]."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/pdf/testutil/PdfBuilder.java[`PdfBuilder`]. This method will create a new `Remark` for the pdf that it is currently building."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Try and use the method on any sample `Pdf` in link:{repoURL}/src/test/java/seedu/pdf/testutil/TypicalPdfs.java[`TypicalPdfs`]."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PdfCard`"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/pdf/ui/PdfCard.java[`PdfCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/pdf/ui/PdfCard.java[`PdfCard`]\u0027s constructor to bind the `Remark` field to the `Pdf` \u0027s remark."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/pdf/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPdf(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a pdf."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* prefers desktop app over other types"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* * *` |organized student |rename the PDFs to any valid name supported by the operating system |keep my PDFs organized"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* * *` |lazy user |filter my PDFs based on the tags |so that I can see all the files with the same tag in the app"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a pdf |remove entries that I no longer need"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* * *` |user |find a pdf by name |locate details of PDFs without having to go through the entire list"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* * *` |user with different tasks and deadlines |set due dates for my PDFs |be notified of upcoming deadlines and know the files required for that task"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* *` |student |view my productivity analysis and estimate time to get work done |allocate sufficient time to finish my homework \u0026 assignments before deadlines"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`*` |user |view clashing tasks/appointments |be notified and make changes"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`*` |class tutor |obtain the statistics of the exam |evaluate the performance of the exam"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`*` |teacher |create new exam paper |create formatted online exam paper easily"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`*` |NUS student |submit my files to LumiNUS with command lines |submit files without using an internet browsers"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "lormee94"
        },
        "content": "(For all use cases below, the *System* is the `PDF++` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Use case: Add new PDF file"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "lormee94"
        },
        "content": "1.  User clicks on `Import PDF` button [top-left corner of the UI]."
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "lormee94"
        },
        "content": "2.  User navigates to directory of the PDF file to be added."
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "lormee94"
        },
        "content": "3.  User clicks desired PDF file followed by `Add` button."
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "lormee94"
        },
        "content": "4.  PDF++ makes a record of the relevant attributes of the selected PDF."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "lormee94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Use case: Sort files within PDF++"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "lormee94"
        },
        "content": "1.  User clicks on `Sort` dropdown box."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "lormee94"
        },
        "content": "2.  User clicks on sorting criteria based on dropdown box options."
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "lormee94"
        },
        "content": "3.  User clicks on `Sort` button."
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "lormee94"
        },
        "content": "4.  PDF++ sorts the list of files and displays sorted list to user."
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "lormee94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete pdf"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list pdfs"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "2.  PdfBook shows a list of pdfs"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific pdf in the list"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "4.  PdfBook deletes the pdf"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** 3a1. PdfBook shows an error message."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Technical requirements**"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Platform compatibility**"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should work on Windows, Linux and OS-X platforms."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Response time**"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should respond within two seconds."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Cost**"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The software is free of charge. However, we do appreciate any contributions to our coffee fund."
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Privacy**"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should work entirely offline and should not collect user personal data for any purposes."
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Licensing**"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software is free, open-source does not require installation."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Portability**"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The software should not require any installer; it should be able to run without installing any additional software."
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Extensibility**"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should take future growth into consideration e.g. adding features, carry-forward of customizations at next major version upgrade."
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Testability**"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should not have features that are hard to test both manual and automated testing."
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Data requirements**"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The data that is stored locally should be editable by user. In other words, expert users can open the file without using the application and edit it for his or her liking."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different directory. Close the window."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "   Expected: The most recent window size and directory is retained."
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a pdf"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a pdf while all pdfs are listed"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all pdfs using the `list` command. Multiple pdfs in the list."
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No pdf is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      }
    ],
    "authorContributionMap": {
      "lormee94": 417,
      "ptvrajsk": 140,
      "WeiTangLau": 285,
      "-": 818,
      "jetkan-yk": 64
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d PDF++ User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":toc: left"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-4/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team T12-4`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d PDF++ ?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ is a desktop application that is meant for anyone who wants or needs a convenient tool that helps you manage all the documents in your computer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This application can be used by both *Text Input (TI)* and a Graphical *User Interface (GUI)*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "hence, both technical users and casual users can enjoy a comfortable experience using our program. All features provided by our application can be used via the *TI* and relevant feedback, based on your command, will be displayed in the Response Area of the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This file management system plans to enhance your typical experience managing your documents and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "it strives to be the last document manager you will ever need. It includes a multitude of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "functions in elevating your PDF reading and management experience. There are many features offered by our application that you can refer to in the table of contents on the left side of this screen with many more to come! Are you fascinated by PDF++? What are you waiting for?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `pdfplusplus.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your PDF++."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGAppOverview.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGPdfCard.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".  Type any commands in the Input Area, also known as the Command Box, highlighted by the Orange area and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. typing *`help`* in the command box and pressing kbd:[Enter] will open this PDF++ User Guide."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* *`list`* : lists all files in PDF++"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* **`add`**`f/C:\\Users\\Raj\\Documents\\myfile.pdf` : adds a PDF file named `myfile`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "from the mentioned directory to the PDF++ list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* **`delete`**`index` : deletes the file indexed at `index` of the list and all relevant information from PDF++."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "CAUTION: Please ensure that you have the permissions to Read, Write and Execute the files that you wish to manage through our application. Please use a web search, like Google, to assist you in identifying if you possess the permissions. If you are lacking these permissions our application may not be able to carry out the actions specified by you."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Words in `UPPER_CASE` are the additional information that you need to input e.g. in `add f/FILENAME`, `FILENAME` is a parameter which can be used as `add f/myfile`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Items with `…`​ after them can be used multiple times or zero times e.g. `t/TAG...` can be left blank or used multiple times, `t/TagA t/TagB t/TagC` etc."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* ALL Commands are to be entered in the Input Area that is highlighted in Orange."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* ALL Responses to your input Commands will be displayed in the Output area that is highlighted in blue."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `help` +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The help command displays this current page for any references you may need or questions that you may require answers to."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Importing a file: `add`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The add command allows you to add a file through TI into to the application, or through the GUI. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The added file will appear in the Files Section, highlighted in green, shown above. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `add f/PATH_TO_FILE` [Text Input] +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `add` [GUI]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The file must be a PDF file (with .pdf extension)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `add f/C:\\Users\\Raj\\Documents\\Tutorial3.pdf` [Windows Operating System]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `add f//Users/raj/Desktop/CS2101 Lecture.pdf` [Mac / Linux Operating System]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `add` [Any Operating System]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all files : `list`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The list command shows you a list of all files that are tracked by the application. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The files will be displayed in the Files Section of the application, highlighted in green. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d Sorting all files : `sort`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The sort command allows you to sort all the files in the application based on the input criteria. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Hence you may be able to, for example, sort the files by their name in ascending or descending order. +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `sort CRITERIA ORDER`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* CRITERIA: `name`, `deadline`, `size`. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* ORDER: `up` or `down` corresponding to an ascending or descending order"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `sort name up` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `sort deadline down` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Opening a file : `open`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The open command allows you to open an existing file, specified by the index of the file that is next to the name of the file in the Files Section, highlighted in green. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The selected file will then be opened with any application that you have set as the default for +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "your computer. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Format: `open INDEX`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `open 3` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Renaming a file : `rename`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The rename command allows you to change the name of a file, specified by thr index of the file that is next to the name of the file in the Files Section, highlighted in green. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `rename INDEX n/NAME` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `rename 1 n/newname.pdf`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* NAME: Must end with `.pdf` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* NAME: Must be a name that your Operating System deems valid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* OUTPUT: If the rename is invalid, our application will notify you in the output area, +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "highlighted in blue."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d Tagging a file : `tag`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The tag command allows you to add or remove a tag to a file, specified by the index of the file that is next to the name of the file in the Files Section, highlighted in green. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The prefixes `-a` refers to \"add\" and `-r` refers to \"remove\". +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `tag INDEX -a [t/TAG]...` [To add a tag] +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `tag INDEX -r [t/TAG]...` [To remove a tag]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `tag 1 -a t/CS2103T t/SE`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `tag 2 -r t/tutorials`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* TAG: Tags must be a continuous word without spaces"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* TAG: You can only remove a tag that you have previously added."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a file : `delete`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The delete command lets you to delete a file from the application and your computer. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The file that is to be deleted must be specified by the index of the file that is next to the name of the file in the Files Section, highlighted in green. +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `delete 4` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Moving a file : `move`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The move command allows you to move a file, specified by the index of the file that is next to the name of the file in the Files Section, highlighted in green. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The file can be moved from its current directory on your computer to another directory on your computer. +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The move file also has a User Interface Option to allow for an easier file moving experience. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `move INDEX d/DIRECTORY`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `move 1 d/C:\\User\\Jeremy\\Downloads` [Windows Operating System]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `move 1 d//Users/jet/Documents/Important` [Mac / Linux Operating System]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `move` [Any Operating System]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This command lets you exit the program. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Retrieving information about a file:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "In order to see a little more information on a file, clicking the file in the Files Section, highlighted in green, allows you to view more information pertaining to that file. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This information will be displayed in the Upcoming Deadlines Area, highlighted in red. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Setting a deadline for the file : `deadline`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Set or remove a deadline for the a file, specified by the index of the file that is next to the name of the file in the Files Section, highlighted in green. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "A file\u0027s deadline is located under its name and has 4 colours to indicate the amount of time you have before it is due. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Green, indicates that there is more `7` days till the deadline is due, as shown below. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineFar.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Orange, indicates that you have less than `7` days till it is due. As shown below. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineNear.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Red, indicates that you have reached or failed to complete the task by the due date, as shown below +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineDue.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Blue indicates that you have completed the set task. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineDone.png[width\u003d\u0027300\u0027]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "All deadlines are also displayed in the Deadlines Section of the application highlighted by Red. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `deadline INDEX date/DATE` [To Set a Deadline] +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `deadline INDEX done` [To Complete a Deadline] +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `deadline INDEX remove` [To remove a Deadline] +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `deadline 1 date/20-02-2019` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `deadline 1 done` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `deadline 1 remove` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "WARNING: The date must be in the format of dd-mm-yyyy. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Filter files by tags: `filter`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The filter command shows you only the files that contain the tags specified in the `filter` command. +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `filter t/TAG...`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `filter t/JobApplication` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `filter t/Lecture t/Week10`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "****"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The search is case insensitive. e.g `lecture` will match `LECTURE`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The order of the tags does not matter. e.g. `Lecture Week_1` will match `Week_1 Lecture`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Only full words will be matched e.g. `Urgent` will not match `UrgentFiles`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* File matching at least one keyword will be returned"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "****"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Undo \u0026 redo command: `undo` \u0026 `redo`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `undo` and `redo` commands allow you to reverse an action that was previously done on our application. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "WARNING: You *CANNOT* Undo or Redo an encrpytion command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This functionality has been disabled for security reasons. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `undo` [To Undo an Action] +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `redo` [To Redo an Action]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Encrypting \u0026 Decryption: `encrypt` \u0026 `decrypt`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The command `encrypt` allow you to lock your files such that they cannot be accessed without a password that you had specified. Similarly, the command `decrypt` will let you remove the password that you had set for the file."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `encrypt INDEX password/PASSWORD` [To Encrypt a file] +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `decrypt INDEX password/PASSWORD` [To Decrypt a file] +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `encrypt 2 password/ThisIsNotASecurePassword`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `decrypt 2 password/ThisIsNotASecurePassword`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Merging Files: `merge`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "With the `merge` command , you can merge two or more files into a new single file."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `merge INDEX INDEX...`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `merge 1 2 3` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `merge 1 2 1` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `merge 1 1`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "****"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* A minimum of 2 files must be specified by their indexes"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The same file can be merged with itself, hence creating a new file that is composed of the same file twice."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The newly created file will be stored in the directory of the `INDEX` that was first specified."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* *Add* `add f/PATH_TO_FILE` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `add f/C:\\Users\\Raj\\Documents\\Tutorial3.pdf`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Rename* `rename INDEX n/NEW_NAME` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `rename 2 n/Resume.pdf`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* *Open* : `open INDEX`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "e.g. `open 3`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "e.g. `delete 4`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Move* : `move INDEX d/LOCATION`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `move 3 d/C:\\User\\Jeremy\\Downloads`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Tag* : `tag INDEX t/TAG…` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `tag 3 t/DijkstraGraph t/Tutorial t/CS2040`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Filter* : `filter tx/KEYWORD...` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `filter tx/GraphsDFS`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Deadline* : `deadline INDEX DATE` or `deadline INDEX` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "e.g. `deadline 3 20-02-2019` , `deadline 2`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Encrypt* : `encrypt INDEX password/PASSWORD` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `encrypt 2 password/superPASSWORD`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Decrypt* : `decrypt INDEX password/PASSWORD` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `decrypt 2 password/superPASSWORD`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Merge* : `merge INDEX INDEX...` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g `merge 1 2 1`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *INDEX* : The number that references a file managed by the application."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Command* : Keyword that tells the application what to do."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *GUI* : Graphical User Interface"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *TI* : Text Input"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "ptvrajsk": 176,
      "WeiTangLau": 13,
      "-": 124,
      "jetkan-yk": 11
    }
  },
  {
    "path": "docs/diagrams/AddCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-02T08:12:46.900Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" etag\u003d\"DW67yyAQ2XS2JuezhJi2\" version\u003d\"10.6.0\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e3Vlbk5sgFP41edyOV4yPay7b6bQznaaX3UcSidqiOAQ3SX99D4q3mGztRLtp8xI4HODw8Z3DASfmLD48cJyGH5hP6MTQ/MPEnE8MQzdsDf6k5FhIbE0vBAGPfKVUC1bRT6KEql+QRT7ZtRQFY1REaVu4YUlCNqIlw5yzfVtty2h71hQHpCNYbTDtSr9FvgiVVEdu3fCWREGopp4aqGhY482PgLMsUfNNDHOb/4rmGJdjqYXuQuyzfUNkLibmjDMmilJ8mBEqsS1hK/otL7RWdnOSiD4dZs+ru+/pg7v+St99xQ/3WWqEd7ZTDPOMaUbKdeTWimOJEAwDmwEVD5aQSiFJ/JXAQoq2EaUzRhnPdU2kYVd3pKrg7AdptBhzB2ma7MES0ZArzExPGUK4IIeLS9Qr4ICQhMVE8COoqA4I2UUXxUXDVdjv6501lShs7Gkpw4pLQTVyjScUFKR/AK+DesDrAx9VlXERsoAlmC5qqZeTjMh5dKjVOu8ZS5XwOxHiqJwLZ4KBKBQxVa2dzdDyXwW6NOFlyMFilvENeYlKU+W9mAdEvKCInPObyAnFInpuWzL4lpRm9mN8E0RF/h0sUFygP4SNqXsBcbS4X45Lfx1pbfrrxuvSH1nDRhdi61ZO2w68nqEI/Tejy2vDO9VuPLqQQyQelZYsP0FZe2Or2lziWqrNj6oyYEQCb+wbkqwrQ5Lq+pFFYGTFGFs7cUjDaQ9RLEH1OmFDZcYVx4956wRJYIGPJQ1kpUERWa05kteODcY8tsj01KDZ6MRCTk9e6RYahViGc0Is9yTGFJaNR6w+aeO/SKxXIYk+DknM6W+iz8gkQT1IwkMWrzOwx9uHkSCrFOeY7uGu2d7qk0zAdWez5XKYc726wpY4aU7nXLfOnOvWaLeGM2mT7REKWZI970AICxdtrDjZRT/xOleQpE7lDudG2p4cwfSkK+0Kr5IdMI2CBMqUbOVQEs0Ibsj3SiykO3o72JsoCT7nvnlnDYR9udYSe9S9sZ3D3hgL+ypnaID/OeRwcTcQjiUOyXqX5otHVIK15lAKZGnG4hgn/uKwIamIWNIleyve/Rnhl8u5i9AwoFuu81vC68bfZLxuuTd+oAx4MKikoFf6ML3yZLhyV849XxS0T0vWf0l9eVeD6dOUQtQomK/FxUNhoQyzV/o36xWmcXIMTO3X9gr7f83fB/Wmvu9O9rXvThcuebr1pv0wYJ4yYuREq4LgJT/9RETGpWeqY+oT2WWg8S95aOfcugEPPRMhbe9sKNRCmB5wxbGMlh/97f+XzLknydy5vMIdJpuDav3ppHCk+vuUufgF\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/ClearCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-02T08:17:48.253Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" etag\u003d\"z4Fo7wEgEbe1Sp2BBgn_\" version\u003d\"10.6.0\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e5VjbjpswEP2aPG7F1YTHhiRbVa1UbdRt++gNXmDXYMsxm6Rf33E8QMhNafeu8hLmeMYen5kDJgM/KVeXisr8q0gZH3hOuhr444HnuV7owI9B1hYJHdcCmSpSdOqAWfGbIYhxWV2kbNFz1EJwXcg+OBdVxea6h1GlxLLvdit4f1VJM7YHzOaU76M/ilTniLok7gY+sSLLcemhR+zADZ3fZ0rUFa438PzbzWWHS9rMhRtd5DQVyy3Inwz8RAmh7V25Shg33Da02bjpkdE2b8UqfU5A8jC7uJOX8c01/3xNLz/W0ssvwshO80B5zZp9bLLV64YhmAaKAcYItiANyKp0pqk20G3BeSK4UBtfnzg0diPjqpW4Z1sj3jgijmMiRKW3cOTMH2EiTGm2OrpFtyUOGpKJkmm1BhcMiNzgQ2iDsBuhQa297GrrY0Hyrao2GMVuytq5O0bhBkn9C4IjcgbBKXQkmkLpXGSionzSoaNNmzGzjgtW5/NFCIngHdN6jfKitRYA5brkOLpXDmdzwQhQq9Y/AWyNX8YAHtEcr7YHx2u07C5M6qeLBTsVtZqzU004RN1TlTF9wtENyOH6K8apLh76qRyqJYZ+EwUk2fZN+xBrusaL+lPYzDBqpyPaNP69SRoCzlPhdllRkAtIUB+RJDzKhvGRHiCTj9PnlaRLdqh9bUG2Cb1ZRT6hslAw50grjB8prcdVJTj0nCQcUh5JuMnMTaKY6XDPqdjSMFRKbTKkUvJiDkmKyrx37QnFhkIubfRekfslXOaFZjNJN3wu4azTL9eOqKbTcUzI00jEC3Yk4kR7EnG9AxoJnk8j7n+kkTA++/UzfFWNNIme0sh3mVqNvHdV+LG/e5Z7fV2E/hvXxRs4zaFKztCT/fh48tNcSIJ+3xDvRU9zLQGndHrFdK2MMhNRlrRKr9iiBo/3pNAwIC+oUDC7b2Vbqu4PCX/yBw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/DecryptCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-02T08:37:50.681Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" etag\u003d\"-mvf_gpj_r22N-7KnjLP\" version\u003d\"10.6.0\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e3Vtdd6I4GP41XnYOnwEuR63ds2f3nJ5xdnZ6GSVqOkA4MbQ6v34TCCAfbdMVBO2FJS9JTN48z/uRxIk5Cw8PFMa7v4mPgomh+YeJOZ8Yhm7YGv8nJMdMYmt6JthS7MtKpWCJfyMplO22CfbRvlKRERIwHFeFaxJFaM0qMkgpea1W25Cg+q0x3KKGYLmGQVP6L/bZTkp14JUv/kB4u5Nf7Roge7GC619bSpJIft/EMDfpX/Y6hHlfcqL7HfTJ64nIvJ+YM0oIy57CwwwFQre52rJ2izfeFuOmKGIqDWYvy7vn+MFb/Qj+/AEfviaxsbuznaybFxgkKJ9HOlp2zDXEu+GLwQtTPoVYCFHkLxlkQrTBQTAjAaFpXRNo0NMdUZVR8gudvDHmDtA00YJE7EQudWZO5UAQZejw5hT1QnEckIiEiNEjryIbuJrUdY5F187Kr+XKmrLK7mRNcxmUWNoWPZf65A9SpZ9QrwMU1OtzPMoioWxHtiSCwX0pnaYgQ+J7dF4q6/xFSCyFz4ixoyQXTBjhoh0LA/m2sRha+lcoXQzhfZXzEZOErtF7UHIleyHdIvZOReC0LyJFAWT4pTqSzpckH6Ya4k+VKMG/5xNkb8Cfmw3Xe0Pj4P7rol/467ZZgT+3zsPCH1jdWhdk61YK24Z6p4YE9AWty+DqdbWRWxd0wOynrCWen/iz9sWWpbnQa15tfpSFDi0SZ6OqSbLONEmy6SPBfJAFYuw6Ygyn2kU2BdmqhoZiGGe4H/NKAFKC4ukELu0A4TCgx5NGovh0+q5slpZ6ABZwFHGlA7MXYBlOFVimXrMx2cj6A5ZK2DgosAqQVCBSImZMIMnMVOcgMd0PrE/PIAEKIKE7Eq4SPp7p6w4ztIxhqtNXnmtWl7oWCXjebLZYdOPXixQ215PmNPy61eLXrd6yhpawyZ6igEdJ9ryhQj5xVtUVRXv8G67SCgLUsVjhdJD2VPRgTgWV9hmrRAMY4G3EnwO0EV0JbWKeIX+VYiboON3ztcHR9nvKzTurI93nc811b1tKujf60n0RM5wo//uO8sTdADAUeohW+zidPAiEslaUP23F04yEIYz8+8MaxQyTqAn2ir37HOAXi7kHQDdKtxz7Q8DrxiURr+eJ+mgdSoeOQbdUw1LdPTcuPW9VrLbtiwz2cY76bygkfCB83midUMzE8DaUhPzfAvNVkfX5AIomoyWGaVQ9gZUDfkBijD3S6pIYrqVMjHNDpjNXpW1jo0aMJUxpwT0C/1wHZI9ugRK2PjglvLH7ihEkH5IgSlRyz6SSWvbhaJdNUQsNvMfRGUVio9HQIsQDPO3R35Tey0dreowZ8m+Ctu7gtB39nkGX9AOmKv2cYT0ZaNsibIR4jGKUerOMISu4T2khchwN8/U4XBU5irPnPP/xhieHN3JyjMGnOco+Ddi9+LT6tquVx4GX8mmt58lv+bTMaWlk9SzuTYirEbRgMJWU9q+auCZo7hZdmLj26I9YRkBcS/VqgH3u1YB23gLN+lLd8rIt+8LR6K0a+KHPeF1VbEkUdg8u16mBq5Hq9HzMW/DrgyAuoSJek9vU39A+4TWuyfwDc3RJjaug+X9iP3PIMI4DvIbZ2YAWZlcpr0j/llNH+ghWwG4JiewpjngZ+0V6cnPnZl7t3KzlCMdrWYf+zs1c42oc3OfujfyfOypdOjhgKzu4fu4R1LMeG1x4Jw8obPiO4SKBCT5OTy56kUDPV268pOwuelTYPzBUmeSor/2Z5LLyCCLfUqiTq+/YMZ/qbd7RNfOfcQx1R7cA3Q3fJ6nH5SPYlhn/zdfh020FM2icHbd0f65YY7iqwWx25H3QUe+bua3X/JIozUDEr+D4R0CgSGIe53OyTkKUjv/0ds2t5TVWw36bDVNitJmSHhObFlNyo7cxTbeaVVqa29B+R7cxebH86WNGqfL3peb9fw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/EncryptCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-02T08:45:12.670Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" etag\u003d\"zvNa7ElqASSoOXqH9mfj\" version\u003d\"10.6.0\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e3Vtdc6o4GP41vWwHAglwWbV2Z2d3pnM8e/b0MkpUepAwMbZ6fv0mEFA+rOkKiPbCkpCE5M3zvB/h5c4arrbPDMfLv6lPwjtg+Ns7a3QHgAmgIf7Jml1aAw0zrViwwFeN9hWT4DdRlarfYhP4ZF1oyCkNeRAXK2c0isiMF+owY/Sj2GxOw+JTY7wglYrJDIfV2n8Dny9VrYm8/Y0/SLBYqke7AKU3pnj2a8HoJlLPuwPWPPlLb69wNpZa6HqJffpxUGU93VlDRilPr1bbIQmlbDOxpf3GR+7m82Yk4jodhu+T+7f42Zv+CP/8gZ8fNzFY3kMnHeYdhxuSrSOZLd9lEhLDiM0QhYFYQiwrSeRPOOayah6E4ZCGlCVtLWRgz3RkU87oL3JwB4wcZBiyB434Qb2SmTVQEyGMk+3RJZq54AQgCV0RznaiiergGkrWCosIwrT8sd9ZSzVZHuxpVocVlhb5yHt5igsl0i+I10Ea4vUFHlWRMr6kCxrh8GlfO0hARuRzTFHat/mL0lhVvhHOd4pceMOpqFryVajuVjbDSP5yocspfC5yMWO6YTPyGZRcxV7MFoR/0hA59ZvISIh58F6cSeNbkk1TD/GHQlTgX4sF8iPwF2rD9Y5IHD09jtuFvwmtAvyFdr4s/JHdrHYh0LQT2FbEOwAK0B1ql4uL1zV6rl3INuA/VSt5/SqujQeoSiMp16zZaKcKDWokwUZdlWSfqZJU1xcaiEnmiIFlxACnOES6BNWrhIZ8GmeYH+tKALIHxesBXOoBImDAdgedZPH18N6+W1JqAVjI0cSViaxWgAWcIrAss6Rj0pm1Bywdt/GiwMpBUoDIHjF9AkmqphoHieWe0D4tgwRpgIQt6Wq6EfMZfCwDTiYxTmT6IWLN4laXPAHPGw7H42bseh7CZnIynIpdt2vsut1a1FDjNsEBCYWXBEcVEYqF86KsGFkHv/E0aSBBHcsdTiYJB3IEayCptE5ZJTvgMFhE4jokczmUlGYgIuRHVc0lHQdrsTdBtPiecPPebkj22Voz2UNbS/agLdnnPsOB8L8vmQjcAcIrKYdouo6TxaNQCmvKxNVCXg3paoUj/2k7IzEPaFQFe0HffQ3w4/HIQ6gZodsOPAl4E3SJeGCAnhuUBg2Daeu6pcA4spHdhMr5RAu7ksI+zlHPiIzVgCFitsjHzH9hlJOZJMALDYPZLsGVgJWQjJC90CBrcemTeRCJnVKjienlA/aWNrmTpWhjZ3Q4pE2dsoLt0UYnwO6HH3YxZx1kB9KnHTG3nTCw7Ighq1tHLJfAZzx+jONQrpVEM7ZT9ssQGw2McSBQclVEBUV5Q/PS9s10ex8wXWckriirRe5GoqxHxvDuoIHyrb/A/dJbmq+1FxfpDBpVELkUP1MQE/wuzbww8uJ3FtI1uQnd4FoP1ZdEHWsHD/ZdO1z+OEXxV4vpbidm3HG6PXTLJaDljkdEhKzGiz8Xv3NGV4nTnZh26XZfP3ERrPG+u6Vt709Bm6QfsnTp55xraM/bFVT30qPEkm/iUQFJ7FnKkCleJ7RIvN5A7Mf2qsgBSqEp8C5PDq/n5OiDTXO0bRqCrdi08oskO/MEu7JptRkyx2xaarQMOn2TmWAy2YvlDGaK0td1plQmroWq598dExf2/qVxD4hr6yY7wXOTnep5iwz7oXiIj0zYsTd6qwr+0lkrri62FAqbB5frlMBVCXVaTlzJ+XXCidsw6a+pF2/fyHojWlyT+s9Od3oU1Lgakv8n9lODjOM4DGZYnRav0uTwK5K/7ZSR3oMdgDUuERwEkSgHfh6e3FwmgFfKBKh5Ke3V7EN7mQAuuBoD97Xz9/9z1t+kgUNQ28C1kxlVjnog6vgkD2kc+PYhNcpCp8OTTlOjzGzn+kvK5rxHjfMDoMskR3/vzySXnXkQ2ZFCmVxt+47ZUm/zqwMr+zDtUl8d5KC74Qy5sl/eg2OZ/ufyXz7c1lCD4Gy/pfn3iiWG6yrM6kDeiYFaP8ytTVzeREkEorKJQoplEPMyGtHZZkWS+av3k8nx7q3FNXZFf1sVVQLqVEmLgU2NKrnR/HLLLUaVtuFWpN9Qfrko7j/mTim1/2LeevoP\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/FindCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-02T08:49:30.291Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" etag\u003d\"nPg--dXyD-UHxPsOi27-\" version\u003d\"10.6.0\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e1VfbbtswDP2aPLaw5dhJHptbh2EDigbotkc1Vmy1smnIcpPs60dZ8i23pms7ZH6JeUhJFA9PJPe8SbK5lTSLv0PIRI844abnTXuEuMR38EcjW4P4jmuASPLQBjXAgv9mFrTjooKHLO8EKgCheNYFl5CmbKk6GJUS1t2wFYjuqhmN2B6wWFKxj/7goYot6gajxvGF8Si2Sw9JYByPdPkcSShSu16PeKvyMe6EVnPZjeYxDWHdgrxZz5tIAGXeks2ECV3bqmxm3PyIt85bslSdM2Dysrh6ym5Hjw/i6wO9vSkyEl/5AzPNCxUFq/ZRZqu2VYVwGiQDjTFuIdMgS8OFokpDKy7EBATIMtYLHDpyBzpUSXhmLQ+ZDgLH0SMgVS3c1swb20SYVGxzdItuXThsSAYJU3KLIXZA4PpmiO1FbE9jrxtmPUtH3OK0wqjtpaieuaknvtiSvqG8xDmnviE2pDVBqhgiSKmYNei47DKmF3LRamK+AWQWfGJKba26aKEAoVglwnr32HDKBz1YWbn9iWBt/NLGtV+Z003bOd1ay+xCp36aK9wpFHLJTvXg0MqeyoipE4Fu4B2mXzJBFX/ppnKITDv0DjgmWbdNzX/VNmTQncJkZkfttESdxt93SVWA80TYptXqMccE1RFF4j/ZcHSkB4LZzfxzFUmc4aUp0r9wRX6gsqxgzpFWf/hOab2LlTrRDiuBwJTHGb5E+uUel+IMU8FTngvFJNafOILnWsqAx65zF67y8mTOSxekum4YxpdaGnY+TLCeco/5Lq/rmCu2yGhZ5DXef7oc7ihtPp+OguCDdDPY0Y2zrxv3kHD8zxKO6x+i6JKEcwFHmZXRGYIzF68PP8r67ui6ewdyB+SfHmZ1CV6RciG1OieQJDQN71leYMT/pNB+f+euWV312golBxTaf7tC0Wy+EwxRzceYN/sD\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/MergeCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-02T08:03:52.348Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" etag\u003d\"kVxEk2WZINB526HAhfUl\" version\u003d\"10.6.0\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e5Vxbd5s4EP41fmwPSEKGx9iOs2fP9pyepu02j7KRbVKMWJDruL9+JSSwuTgmtbnY8UMCQhJi5pvRzCfBAI7XLw8RCVefmEv9ATDclwGcDAAwgWWIf7Jkp0osw1QFy8hzdaV9waP3m+pC3W658Vwa5ypyxnzuhfnCOQsCOue5MhJFbJuvtmB+/q4hWdJSweOc+OXSfz2Xr3SpiZ39hb+ot1zpW9sAqwszMv+5jNgm0PcbALhIfurymqR96QeNV8Rl24MieD+A44gxro7WL2PqS9mmYlPtpkeuZuOOaMDrNBj/evzwHD44s+/+39/Jw90mBKsP1lB184v4G5o+RzJavkslJLoRyhAnI/EIoSykgfvICZdFC8/3x8xnUVIXYoM45lBW5RH7SQ+ugMkQG4ZswQJ+UK5lBkd6IDTi9OXoI5qZ4AQgKVtTHu1EFd3AtqBqorGIEVLn271moVbH6kCnaRnRWFpmPe/lKQ60SN8g3iGuIV5X4FGfsoiv2JIFxL/fl44SkFF5H1Oc7ev8w1ioC58p5zttXGTDmSha8bWvr5aUYSS/TOhyCK+LXIyYbaI5fQ1KtrZeEi0pf6UiHlYrMaI+4d6v/EgurpJ0mPUQfyhEDf5YPCA/An/hNmzniMTx/d20WfibKY41/IV37hb+GF3Wu1DLRAlsS+IdAQ3oFr1L5+K1jZ57F/ri8R+6ljx+EsfGR0ufTaRc02qTnT65oEcS1ljXJaEzXZJu+pl5YpAZYiyjYJBgmO9CPYJuVUBDNowzph/Yd4AE4gF/7FEhT59SVMiTPUaSswZAgoc1MWKDRjACnDxGICpgRA2sOYzUiQD7gZEcQvaA6RFGtMe5OEigfcKRNAwSXAMk0YqtZxsxntF25XH6GJJEpluRNuZVXZjUHWc8nk4vM0Vn2WgqJ2NYmqJRxRSNGksAKiIga0R9EfBYk5IIxYPzvKwiGnu/ySypIEEdSg0ng7RGsgc4kqYUK6uSDYjvLQNx7NOF7EpK0xPJ7p0u5tIcR7HQjRcsvya2+QFdSPbps+4Kujghe9BYePSOki8b1J3FrDMd1HkqASWVfBEde1TcGBif3UWcECuxkDcwWCC7C1xvTuOyt8mp5W0eZzqdOBhfCPVmweM4ZdSboE2Xk0W9B0L+uorYdgAwWUvJBLM4TJ4e+9JHzCJxtJRHY7Zek8C9f5nTkHtS/j2VOrKck36+XanbdWiFW3E2Vl1n0ynTkw7zQCWPJHE0U8+X/9jsWTLKkjSOpGzIfJUMTjkkV3mk3tpA0fPA1Ca68zyoLPHbNYLaOQEyqvXYkhWUQ/dxRCW9JuA9mX6iYvjRN+75Ht9dDdYR6Nrfm6gOt9mPvLkzbsVMxX96pnDOtJEj5MowjxuM282bMwEczkFUDnATeP9tpA0GZE2zKSig22x6uhJTzDjOzkzRuR6W820MVsf0ue3UNF7nCGLONF5URJpp1TLeuygiu4NqmjM5eh+IC/dx0GF3J+tDM7fwLg7UCC7qSZy+kxkpWPcAfTqAbuNgddK9IyfB2ikBYoK+h8g9CBtq69IE54bWR9btULWFtxU2pALoO92OwGnyq1W63UyX5K/AvDpbzXLq0jeNmVdhWRwb7ZqXad5q7tb1JFwfWc2EjBjafxQyXsxx15jd++i44bDMHbbquJ3KddJNkCx9yh3B4o/PiJuQVhM236xpone2kKMJdmnWfGuLqggX9pxVzLCVm84aW1V1KrYC3OiKNjLyK9ow9S5drWibRplOEmKbkyBg0hqI62b0kbKZEsN7czoqGEiVJ8soq3aUZFYoqafRxVXxURmreDq8MOxmAtfCBmtc3Np7ZD9nuSP7REdNR8DGm3bBX9vObGh3/N6HaVYEgu9klqxam2t3lgRlB3xrG2Dw0Do57bW8IAr6vgOmB8ymCepTm83sJEYFatNy7HZnHlDmNpMIVQ4haS7D11gFs8kenOo4tq+GWdypjYaga8OENdjkXhqm2aZh1n1VqK01Byt9Abk1w6yxwthH7spCHXNXJnCqgr08eTX3Way2XL1j9qpKVS3HhhD03Rn+AYXfi8imtgOF567AH4lsLJwDGy6CqG5yXgyRMETtemJYsaHpnSSP6d6b7pJH1Pf3IS9ptLD2gh06Nx05021XLayp7D3Mkvd0W7PaRZns3VeTb0RDYRNqzl3LNELmFYuEJld9iEFl3ZSDnp6mFhh2nvOjisjnZo0F1Z7h0Ln085laqYrkC8byLXSVsZAw9IWzV2yXsVbfd7oiq7AA/pjnwnpgF9atbkm+qD3V/WCQde5rZNVxnl1czbFazrhRFWNasNMvlG8iaZmamv5C442ocU0WioeFr3J1bp921bRVEHxaIMLeIC1Tr264NOZekHrMUH7nTafyB2o5bFbVVZnQfLXpVSi69GpIqvgOHXHFVGiNiFSjT0mckDCBnAa9QFTx3OTIFRK4tUQLOPlEq/KNaesymZY43X/WUHnL/bcj4f3/\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/team/JeremyYirenLow_PPP.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":plus: \u0026#43;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-4/main"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d Jeremy Low - Portfolio for *_PDF++_*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d The Project"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Our team was tasked with enhancing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://github.com/se-edu/addressbook-level4[this addressbook]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "for our Software Engineering Project. We made the decision to morph it into a personalized file manager,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*_PDF{plus}{plus}_*. Inspired by applications that bring an upgrade to the atypical solution like"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*_Notepad{plus}{plus}_*, we wanting to make an application relevant for students."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This application allows you to set datelines and tags for files, with managing PDFs as"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "its main specialty. It is mainly a CLI (Command Line Interface) application i.e. commands are executed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "through typing the desired command in the input line provided. However, several commands also allow for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "input through a GUI (Graphical User Interface), where the user is able to click on the desired input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#`Grey highlights`# (called mark-ups) indicate that this is a command that"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "can be executed by the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The following section details a summarised overview of my contributions to the team"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "project in the areas of coding, documentation and design."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Enhancements added:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* [.big]#`merge`# command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Description: I added the ability to append two of more PDF files within the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "application to so that a new file is created with the merged content."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Justification: Merging PDF files is highly utilised, especially by students or"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "users handling numerous documentations. However, merging of PDF files is usually a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "service provided by paid versions of PDF managers."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Highlight: Merging can be done quickly through the application, without the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "inconvenience of relying on other software and third-party online services to do it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Credits: https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "( https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_] )"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* [.big]#`find`# command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Description: I added the ability to find files based on"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Highlight:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Credits: https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "( https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.7/javadocs/org/apache/pdfbox/text/PDFTextStripper.html[_PDFTextStripper_] )"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* [.big]#`move`# command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Description: I added the ability to move files within the application to any permissible directory"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "within the user\u0027s local device."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Justification: *_PDF{plus}{plus}_* is intended to be complete replacement for managing files. The user"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "should be able to perform all the desired actions regarding file management through the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Highlight: When moving a file to a deeply nested directory, it is much more convenient as compared to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "manually navigating to the directory to move the file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* [.big]#`delete`# command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Description:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Highlight:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* [.big]#`sort`# command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Description:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Highlight:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Code contributions:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please click these links to see samples of my code: TO ADD"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Documentation / Design contributions:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d Contributions to Developer Guide"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The following section are excerpts from my additions to the *_PDF{plus}{plus}_ Developer Guide*:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".Merge Feature"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#*Current Implementation*#"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The merge function utilises the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_], specifically the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "API to append two or more PDFs and create a new file with the merged content. As there will be one"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "additional file added to the application, this feature also implicitly performs an `Add` feature to add the new"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF to the application."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The Merge feature has the following syntax:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`merge` \u003cINDEX1\u003e \u003cINDEX2\u003e ..."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the `Pdf` that you wish to merge."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Minimum of two indices have to be provided for the merge to be performed, up to as many"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "indices as desired."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* It is possible to repeat an index; the PDF would simply merge with a copy of itself."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#*Feature breakdown*#"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "workings of the `merge` feature."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1: From the main interface of the application, the user chooses the file(s) that"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "they wish to merge, and enters the `merge` command into the CLI Interface, following"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the outlined Syntax as illustrated below."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::MergeFeatureStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2: After executing the command, the `MergeCommandParser` parses the input into"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "relevant objects that are required to be executed by the `MergeCommand` object. In"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "particular, it ensures that there are two or more arguments passed as described in the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "above Syntax. Upon parsing, the parser then creates a new `MergeCommand` that will execute"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the user\u0027s input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "In this case, the above two files will be merged, with the _\"CS2103T_PDF++_UG_Intro.pdf\"_"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "file appended behind the other file."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: The `MergeCommand` is then executed. Successful execution"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "of the command would return a *CommandResult* object and create the a new file with the merged"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "content, while unsuccessful execution due to validation failure will throw a *CommandException*."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::MergeCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The new name of the merged file follows the format: \"merged[hashcode].pdf\". This is to ensure"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "unique file name. The hashcode in the name will be modified if name already exists."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".Move Feature"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#*Current Implementation*#"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The move feature functions as a simplified version of the `Edit` feature, as in nature"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "it is making an edit to the directory of the file. However, in addition to making changes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "to the directory in the application storage, it also ensures that the directory changes"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "are reflected in the local filesystem."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The design consideration into separating move as a new command from edit factored in the"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "purpose of the application; as a document manager, the term \"edit\" is synonymous with"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "making content or characteristic changes when it is applied in the context of documents."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The Move feature has the following syntax:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`move`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`move \u003cINDEX\u003e \u003cNEWDIRECTORY\u003e`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the `Pdf` that you wish to move."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `\u003cNEWDIRECTORY\u003e` refers to the address of the new location the file is to be moved."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Entering `move` without `\u003cINDEX\u003e` or  `\u003cNEWDIRECTORY\u003e` will open the default file"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "selection GUI for the user to select the file directly."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "All parts of the syntax are required."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#*Feature breakdown*#"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "workings of the `move` feature."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1: From the main interface of the application, the user chooses a `Pdf` that"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "they wish to move, and enters the `move` command into the CLI Interface, following"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the outlined Syntax as illustrated below."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::MoveFeatureStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "In this scenario, there is a file *document.pdf* in the windows _Desktop_ directory, and"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the `move` command entered is intended for the file to be moved to the windows _Documents_"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "directory."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2: After executing the command, the `MoveCommandParser` parses the input into"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "relevant objects that are required to be executed by the `MoveCommand` object. In"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "particular, it ensures that there are correctly two arguments passed as described in the"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "above Syntax. Upon parsing, the parser then creates a new `MoveCommand` that will execute"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the user\u0027s input."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: The `MoveCommand` is then executed. Successful execution of the command would return"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "a *CommandResult* object, while unsuccessful execution due to validation failure will throw"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "a *CommandException*."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::MoveCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 4,
      "WeiTangLau": 196
    }
  },
  {
    "path": "docs/team/LauWeiTang_PPP.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Lau Wei Tang;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "National University of Singapore"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":doctype: book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// Settings:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ifdef::backend-pdf[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":title-logo-image: image:../images/github-icon.png[width\u003d45, link\u003dhttps://github.com/WeiTangLau, top\u003d\"70%\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":source-highlighter: rouge"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//:rouge-style: github"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//:source-highlighter: pygments"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//:pygments-style: tango"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// URIs:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-devoxx: https://devoxx.be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-devoxx-top-talks: https://www.youtube.com/watch?v\u003d1OpAgZvYXLQ\u0026list\u003dPLRsbF2sD7JVq7fv1GZGORShSUIae1ZAPy\u0026index\u003d\u0026#49;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-stbernardusabt12: http://www.sintbernardus.be/stbernardusabt12.php?l\u003den"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-wolpertinger: http://en.wikipedia.org/wiki/Wolpertinger"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-pdfplusplus: http://github.com/CS2103-AY1819S2-T12-4/main"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d [underline]#1. About me#"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "I am a second year undergraduate student, pursuing a bachelor\u0027s degree in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Computer Science from National University of Singapore. During the course of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "my education, I worked on a Software Engineering Project. We were required to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "implement several key features to enhance on the basic command line interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "application. My team and I decided to morph the project into a file management"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "system that manages all our files. However, given the limitation of the project,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "we decided to work on supporting PDF files, and the application is called"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "see"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "{uri-pdfplusplus}[((PDF++))]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "__Additional stuff to include in this portion__"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Portfolio purpose: document my role and contributions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Project name and description - what were my tasks, what I did do to meet task requirements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Background info about the project scope"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "A legend to the icons and formatting used in the document"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d [underline]#2. Summary of contributions#"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d [underline]#Robust File Protection System#"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Encrypt"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Decrypt"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d [underline]#Test Cases for Commands and Command Parsers#"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The challenges faced and how I contributed in reviewing the code and suggested"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "fixes to bugs found in code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d [underline]#Technical Leadership#"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Show examples of code for team to reuse"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Enhancements"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "code contributed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "other contributions"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d [underline]#3. Contributions to the User Guide#"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Insert description as well as abstract from the User Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Include some enhancement made using abstract from the Developer Guide"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Proposed enhancement for v2.0"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d [underline]#4. Contributions to the Developer Guide#"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Insert description as well as abstract from the Developer Guide"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Include some enhancement made using abstract from the Developer Guide"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Proposed enhancement for v2.0"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Main things to include:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "1. Links to collated code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "2. features I purpose to implement in the future (from DG and UG if possible)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "3. Other significant contributions"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 98
    }
  },
  {
    "path": "docs/team/ptvrajsk_PPP.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":imagesdir: ../images"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d Projects Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Prithivi Raj"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This document provides a detailed description to my contributions to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the several projects that I have been a part of over the years. +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "My contributions will be substantiated with relevant technical application"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "and sources, if possible. +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d Project: PDF++"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ is an application built on Java that acts as a document management system"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "that provides some advanced features that improves the quality of life of its"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "users. +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The application has a working Graphical User Interface (GUI), built upon the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "JavaFX framework, that is supplemented with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to accept more specific requests by the User. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Although not built to its final form, it boasts a large feature set such as:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Adding, Moving and Deleting Documents."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Assigning Custom Tags to Documents."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Filtering Documents by Custom Tags."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Assigning Deadlines to Documents that provide a Visual Response to the User."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Permanent Encryption and Decryption of Documents such that they require"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "set passwords to open even if accessed outside the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Merging multiple documents into a single document."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "My Enhancements to the Project Consists of: +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *User Interface (UI) Transformations*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *What*: The UI is the main layer of PDF++ that interacts with the End-User"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "of our platform."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *Justification*: The initial UI was insufficient in realising my vision"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "for our application. Hence through the use of the `FXML` Scripting Language and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`JavaFX` Library, I had reinvented the UI such that it would more accurately"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "support the application and all the additional features we had planned to add"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to it."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *Highlights*: The UI is fully compatible with the additional features of"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ and would require minimal to no overhauls should any new aspects of the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "application require upgrading."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Introduction of Deadline Feature*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *What*: The Deadline feature is one of the core features that we had planned"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to introduce in our application. It is a means for the target audience to"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "manage their documents along with their current schedules."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *Justification*: Although the application was working well as a Document"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Management System, analysis of the needs and wants of our target audience"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "was necessary. Following several informal discussions, a key feature that"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "many took interest in was the ability to set Deadlines to documents thus"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "allowing the application to assist in \u0027reminding\u0027 the User."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *Highlights* The deadline feature required drastic changes to the existing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`storage` and `model` components as they were a key feature tied to each and"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "every document managed by our application. As such there was key attention"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to the the parsing of the Deadline between components in out application. An"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "example of which would be the translation of the Deadline between the `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "and `Json` frameworks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d User Guide Contributions"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d User Interface"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The UI had to include labels that displayed the Deadlines keyed in by the User"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "which had to reflect the duration to the due date by changing colours. The UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "also needed to have a default _Welcome Screen_ that served as a central"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "dashboard to the User. +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Furthermore, the dashboard had to be replaced with a details screen when the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "User interacted with one of the Files in our application. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "These requirements meant that the UI had to heavily communicate with the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`logic` and `model` systems in the backend to produce the required behaviours. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The relevant pull requests pertaining to this feature can be"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "referenced in the following _Github_ issue"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-4/main/issues/152[#152]. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The scripted UI is attached below:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::Ui.png[width\u003d\"500\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "To illustrate to a new User, the UI also had to be broken down into digestible"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "chunks that could be easily comprehended by the user. As such the following"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "diagrams were also added to the Introductory paragraphs of the User Guide."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGAppOverview.png[width\u003d\"600\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGPdfCard.png[width\u003d\"300\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The information was further colour coded to ensure the simplicity of the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "diagrammatical explanations."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deadline"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As for the Deadline, there were several aspects that had to be communicated to"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the end user namely, the usage style of the feature, additional requirements,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "definitions to the colour coded labels and so on. Hence the following excerpt"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "was inserted into the User Guide. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The relevant pull requests pertaining to this feature can be"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "referenced in the following _Github_ issue"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-4/main/issues/124[#124]. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Setting a deadline for the file : `deadline`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Set or remove a deadline for the a file, specified by the index of the file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "that is next to the name of the file in the Files Section, highlighted"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "in green. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "A file\u0027s deadline is located under its name and has 4 colours to indicate the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "amount of time you have before it is due. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Green, indicates that there is more `7` days till the deadline"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "is due, as shown below. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineFar.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Orange, indicates that you have less than `7` days till it is due."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As shown below. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineNear.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Red, indicates that you have reached or failed to complete the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "task by the due date, as shown below +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineDue.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Blue indicates that you have completed the set task. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineDone.png[width\u003d\u0027300\u0027]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "All deadlines are also displayed in the Deadlines Section of the application"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "highlighted by Red. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `deadline INDEX date/DATE` [To Set a Deadline] +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `deadline INDEX done` [To Complete a Deadline] +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `deadline INDEX remove` [To remove a Deadline] +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `deadline 1 date/20-02-2019` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `deadline 1 done` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `deadline 1 remove` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Developer Guide Contributions"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Deadline feature"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "For the deadline feature the following excerpt was inserted into the Developer"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Guide."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Deadline Feature"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The deadline feature is facilitated by both `DeadlineCommand` and"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`DeadlineCommandParser`. This feature"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "allows you to set or remove deadlines of the PDF file specified"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "by you from PDF++."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `Deadline` feature has the following syntax: `deadline \u003cINDEX\u003e \u003cACTION\u003e`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the file in the list that you wish to perform"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the `action` on."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `ACTION` refers to the type of action that you wish to perform."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "There are 3 actions that you can perform"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** `date/\u003cDATE\u003e`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*** `date/` refers to command immediately following after this prefix is a date"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*** `\u003cDATE\u003e` must be of `dd-mm-yyyy` format"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*** Example of a valid date format: 15-03-2019"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** `done` assigns the PDF file a `DONE` status"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** `remove` assigns the PDF file a `REMOVE` status"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "After a deadline has been added to the PDF file you specified, the date will be"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "colour coded according to a fixed criteria"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "When designing the UI, there were several considerations that I had keep in"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "mind. These include ensuring that the there is sufficient but not a suffocating"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "amount of information presented to the User to ensure an optimal experience. +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As for the Deadline feature there were several considerations regarding the"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "input allowances to provide the user. For instance the need to ensure that"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "dates are valid, and no illegal characters are inserted such that a security"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "flaw is introduced into the system."
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            logger.warning(\"Invalid config value \" + configPathParameter + \". Using default config value.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.storage.JsonPdfBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.storage.PdfBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PDF Book ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfBookStorage pdfBookStorage \u003d new JsonPdfBookStorage(userPrefs.getPdfBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        storage \u003d new StorageManager(pdfBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Optional\u003cReadOnlyPdfBook\u003e pdfBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ReadOnlyPdfBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            pdfBookOptional \u003d storage.readPdfBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (!pdfBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PdfBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            initialData \u003d pdfBookOptional.orElseGet(SampleDataUtil::getSamplePdfBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PDF Book\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            initialData \u003d new PdfBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PDF Book\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            initialData \u003d new PdfBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * The default file value {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file value,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PDF Book\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        logger.info(\"Starting PDF Book \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PDF Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 8,
      "WeiTangLau": 8,
      "-": 164,
      "jetkan-yk": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sb.append(\"\\nPreference file Directory : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_INVALID_PDF_DISPLAYED_INDEX \u003d \"The pdf index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_PDFS_LISTED_OVERVIEW \u003d \"%1$d pdfs listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_PDF_OPEN_FAIL \u003d \"This pdf file could not be accessed: %1$s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_MISSING_PREFIX \u003d \"One or more parameters has missing prefix \u0027$1$s\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "ptvrajsk": 1,
      "WeiTangLau": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true if {@code value} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param path A string representing the file value. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.text.PDFTextStripper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   Ignores case, and a partial word match is sufficient."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsPartialWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsPartialWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsPartialWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsPartialWordIgnoreCase(\"ABc def\", \"g\") \u003d\u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static boolean containsPartialWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .anyMatch(w-\u003e w.contains(preppedWord));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   Check is case-sensitive, and a full word match is necessary."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsFullWordSameCase(\"ABc def\", \"abc\") \u003d\u003d false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsFullWordSameCase(\"ABc def\", \"abc def\") \u003d\u003d false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsFullWordSameCase(\"ABc def\", \"ABc def\") \u003d\u003d true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static boolean containsFullWordSameCase(String sentence, String word) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .anyMatch(preppedWord::equals);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Returns true if the {@code pdf} contains the {@code word}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   Uses apache.pdfbox to access the contents of pdf and"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   extract as a String."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param pdf cannot be null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static boolean containsWordInContent(Pdf pdf, String word) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(pdf);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            PDDocument document \u003d PDDocument.load("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    Paths.get(pdf.getDirectory().getDirectory(), pdf.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String preppedContent \u003d new PDFTextStripper().getText(document).trim().toLowerCase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            document.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return preppedContent.contains(preppedWord);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            // Unable to open document or other parser error"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 52,
      "ptvrajsk": 2,
      "WeiTangLau": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Returns the last command entered {@code userInputHistory}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public String getLastCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return unmodifiableUserInputHistory.get(unmodifiableUserInputHistory.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 7,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the PdfBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @see seedu.address.model.Model#getPdfBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    ReadOnlyPdfBook getPdfBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPdf\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the user prefs\u0027 address book file value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no pdf is selected."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @see seedu.address.model.Model#selectedPdfProperty()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cPdf\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedPdf(Pdf)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedPerson(Pdf pdf);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Provides a list of Pdfs that are about to hit their deadines."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return list of pdfs that are due soon."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public List\u003cPdf\u003e getDuePdfs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 10,
      "WeiTangLau": 7,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.parser.PdfBookParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final PdfBookParser pdfBookParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private boolean pdfBookModified;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBookParser \u003d new PdfBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // Set pdfBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        model.getPdfBook().addListener(observable -\u003e pdfBookModified \u003d true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBookModified \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Command command \u003d pdfBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (pdfBookModified) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Address book modified, saving to file.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                storage.savePdfBook(model.getPdfBook());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public ReadOnlyPdfBook getPdfBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.getPdfBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPdf\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.getFilteredPdfList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.getPdfBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cPdf\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.selectedPdfProperty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson(Pdf pdf) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setSelectedPdf(pdf);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public List\u003cPdf\u003e getDuePdfs() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArrayList\u003cPdf\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PriorityQueue\u003cPdf\u003e pq \u003d new PriorityQueue\u003c\u003e(new Comparator\u003cPdf\u003e() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            public int compare(Pdf o1, Pdf o2) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                return Long.compare(o1.getDeadline().getDaysToDeadline(), o2.getDeadline().getDaysToDeadline());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        for (Pdf pdf : this.model.getPdfBook().getPdfList()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (pdf.getDeadline().exists() \u0026\u0026 !pdf.getDeadline().isDone()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                pq.add(pdf);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        while (list.size() \u003c 4 \u0026\u0026 pq.size() \u003e 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            list.add(pq.poll());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 37,
      "WeiTangLau": 7,
      "-": 90,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Adds a PDF to the PDF book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a pdf to the PDF book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_FILE + \"FILEPATH \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_FILE + \"Desktop\\\\main\\\\target.pdf\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New PDF added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PDF \u003d \"This pdf already exists in the PDF book\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_INVALID_SELECTION \u003d \"Selected file is not supported by PDF++\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_LOADABLE \u003d \"Selected file is corrupted and cannot be\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        + \" loaded into PDF++.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Pdf toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Pdf}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Pdf pdf) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(pdf);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d pdf;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (model.hasPdf(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PDF, new DuplicatePdfException());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        loadFile(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.addPdf(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Tries to load {@code toAdd}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void loadFile(Pdf toAdd) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(Paths.get(toAdd.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    toAdd.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_LOADABLE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return \"\" + toAdd;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "WeiTangLau": 33,
      "-": 46,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Clears the PDF book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"PDF book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdfBook(new PdfBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 3,
      "-": 19,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeadlineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_EDIT_PDF_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_REMOVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Edits the deadline of an existing pdf in the pdf book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \": Edits the deadline of the selected pdf indicated \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) ACTION\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"There are 3 types of ACTION:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"1. date/\u003cDATE\u003e\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      sets/replaces the existing deadline of the selected pdf\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DEADLINE_NEW + \"13-02-2020\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"2. done\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      marks the existing deadline of the selected pdf as DONE\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"      Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_DEADLINE_DONE + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"3. remove\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      removes the existing deadline of the selected pdf\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_DEADLINE_REMOVE + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final DeadlineAction action;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Represents a Pdf deadline\u0027s  status in the pdf book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Guarantees: immutable;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public enum DeadlineAction {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        NEW(\"NEW\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DONE(\"DONE\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        REMOVE(\"REMOVE\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        private String status;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineAction(String status) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        public String getStatus() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return this.status;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return status;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public DeadlineCommand(Index index, Deadline deadline, DeadlineAction action) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(action);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf oPdf \u003d lastShownList.get(this.index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf nPdf;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Deadline oDeadline \u003d oPdf.getDeadline();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (action \u003d\u003d DeadlineAction.NEW) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            nPdf \u003d getPdfWithNewDeadline(oPdf, deadline);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (action \u003d\u003d DeadlineAction.DONE) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            nPdf \u003d getPdfWithNewDeadline(oPdf, Deadline.setDone(oDeadline));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            nPdf \u003d getPdfWithNewDeadline(oPdf, Deadline.setRemove(oDeadline));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        model.setPdf(oPdf, nPdf);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PDF_SUCCESS, nPdf));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Pdf getPdfWithNewDeadline(Pdf old, Deadline deadline) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new Pdf(old.getName(), old.getDirectory(), old.getSize(), old.getTags(), deadline);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof DeadlineCommand)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeadlineCommand e \u003d (DeadlineCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 deadline.equals(e.deadline)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 action.equals(e.action);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 59,
      "WeiTangLau": 20,
      "jetkan-yk": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DecryptCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Encrypts the an existing pdf in the pdfBook."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DecryptCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"decrypt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Decrypts the the pdf identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"by the index number used in the displayed pdf list. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_PASSWORD + \"NewSecuredPassword\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_DECRYPT_PDF_SUCCESS \u003d \"Decrypted PDF: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_DECRYPT_PDF_FAILURE \u003d \"%1$s did not get decrypted successfully.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Please check your if the file exists and the password is correct.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_DECRYPT_PDFALREADYDECRYPTED_FAILURE \u003d \"%1$s is already decrypted.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to decrypt"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param password of the pdf"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public DecryptCommand(Index index, String password) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToDecrypt \u003d lastShownList.get(this.index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf decryptedPdf \u003d decryptPdf(pdfToDecrypt);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdf(pdfToDecrypt, decryptedPdf);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        //model.commitPdfBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DECRYPT_PDF_SUCCESS, decryptedPdf));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Encrypts and returns the decrypted {@code pdfToDecrypt}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf decryptPdf(Pdf pdfToDecrypt) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(new File(pdfToDecrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToDecrypt.getName().getFullName()), this.password);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (!file.isEncrypted()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_DECRYPT_PDFALREADYDECRYPTED_FAILURE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                        pdfToDecrypt.getName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.setAllSecurityToBeRemoved(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.save(Paths.get(pdfToDecrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToDecrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return getDecryptedPdf(pdfToDecrypt);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DECRYPT_PDF_FAILURE, pdfToDecrypt.getName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Decrypts and returns the decrypted {@code pdfToDecrypt}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf getDecryptedPdf(Pdf pdfToDecrypt) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new Pdf(pdfToDecrypt, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof DecryptCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand e \u003d (DecryptCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 password.equals(e.password);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Deletes a pdf identified using it\u0027s displayed index from the pdf book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * By default it performs a \u0027soft\u0027 delete where the file is merely deleted from PDF++"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * but not the file system. Option for \u0027hard\u0027 delete is also possible."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Enum that represents the different types of delete operation performed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Soft: File is deleted from PDF++."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Hard: File is deleted from PDF++ and from local file system."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public enum DeleteType {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Hard, Soft"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \": Deletes the PDF identified by the index number used in the displayed PDF list.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Soft delete selected by default, hard delete can be selected by additional keyword \u0027hard\u0027.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters(Soft Delete): INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters(Hard Delete): INDEX (must be a positive integer) hard\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 OR \" + COMMAND_WORD + \" 1 hard\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_DELETE_PDF_SUCCESS \u003d \"Deleted PDF: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_DELETE_HARD_FAIL \u003d \"PDF unable to be deleted at filesystem.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final DeleteType deleteType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.deleteType \u003d DeleteType.Soft;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public DeleteCommand(Index targetIndex, DeleteType type) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.deleteType \u003d type;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Pdf pdfToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (deleteType \u003d\u003d DeleteType.Hard) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            File dFile \u003d Paths.get(pdfToDelete.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    pdfToDelete.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            if (!dFile.delete()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new CommandException(MESSAGE_DELETE_HARD_FAIL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 deleteType.equals((((DeleteCommand) other).deleteType))); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 36,
      "WeiTangLau": 6,
      "-": 46,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Size;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Edits the details of an existing pdf in the pdfBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rename\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Renames the  pdf identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed pdf list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Existing name will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + PREFIX_NAME + \"Tutorial3.pdf\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_EDIT_PDF_SUCCESS \u003d \"Renamed Pdf: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PDF \u003d \"This pdf already exists in the pdf book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PDF_DIRECTORY \u003d \"There exists another %s with in %s.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_EDIT_PDF_FAILURE \u003d \"Unable to Edit PDF.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final EditPdfDescriptor editPdfDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param editPdfDescriptor details to edit the pdf with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EditCommand(Index index, EditPdfDescriptor editPdfDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(editPdfDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.editPdfDescriptor \u003d new EditPdfDescriptor(editPdfDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Pdf pdfToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d createEditedPdf(pdfToEdit, editPdfDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!pdfToEdit.getName().getFullName().equals(editedPdf.getName().getFullName())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 Paths.get(pdfToEdit.getDirectory().getDirectory(), editedPdf.getName().getFullName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .toAbsolutePath().toFile().exists()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PDF_DIRECTORY,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    editedPdf.getName().getFullName(), pdfToEdit.getDirectory().getDirectory()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else if (!pdfToEdit.isSamePdf(editedPdf) \u0026\u0026 model.hasPdf(editedPdf)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        File oldFile \u003d Paths.get(pdfToEdit.getDirectory().getDirectory(), pdfToEdit.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        File newFile \u003d Paths.get(editedPdf.getDirectory().getDirectory(), editedPdf.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!oldFile.renameTo(newFile)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_EDIT_PDF_FAILURE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdf(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PDF_SUCCESS, editedPdf));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Pdf} with the details of {@code pdfToEdit}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * edited with {@code editPdfDescriptor}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static Pdf createEditedPdf(Pdf pdfToEdit, EditPdfDescriptor editPdfDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assert pdfToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Name updatedName \u003d editPdfDescriptor.getName().orElse(pdfToEdit.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Size updatedSize \u003d new Size(Long.toString(Paths.get(pdfToEdit.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                pdfToEdit.getName().getFullName()).toFile().length()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPdfDescriptor.getTags().orElse(pdfToEdit.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Deadline updatedDeadline \u003d pdfToEdit.getDeadline();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new Pdf(updatedName, pdfToEdit.getDirectory(), updatedSize, updatedTags, updatedDeadline);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 editPdfDescriptor.equals(e.editPdfDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the pdf with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the pdf."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static class EditPdfDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        private Size size;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public EditPdfDescriptor() {}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public EditPdfDescriptor(EditPdfDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            setSize(toCopy.size);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setSize(Size size) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            this.size \u003d size;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (!(other instanceof EditPdfDescriptor)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            EditPdfDescriptor e \u003d (EditPdfDescriptor) other;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 7,
      "ptvrajsk": 28,
      "WeiTangLau": 29,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EncryptCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Encrypts the an existing pdf in the pdfBook."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class EncryptCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"encrypt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Encrypts the the pdf identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"by the index number used in the displayed pdf list. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Please ensure that the file is not encrypted.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_PASSWORD + \"NewSecuredPassword\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_ENCRYPT_PDF_SUCCESS \u003d \"Encrypted PDF: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_ENCRYPT_PDF_FAILURE \u003d \"%1$sdid not get encrypted successfully.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Please check if the file is not already encrypted and it exists.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final int ENCRYPTION_KEY_LENGTH \u003d 128;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to encrypt"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param password of the pdf"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EncryptCommand(Index index, String password) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToEncrypt \u003d lastShownList.get(this.index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfEncrypted \u003d encryptPdf(pdfToEncrypt);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdf(pdfToEncrypt, pdfEncrypted);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENCRYPT_PDF_SUCCESS, pdfEncrypted));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Encrypts and returns the encrypted {@code pdfToEncrypt}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf encryptPdf(Pdf pdfToEncrypt) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(Paths.get(pdfToEncrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToEncrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            AccessPermission ap \u003d new AccessPermission();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            StandardProtectionPolicy spp \u003d new StandardProtectionPolicy(password, password, ap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            spp.setEncryptionKeyLength(ENCRYPTION_KEY_LENGTH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            spp.setPermissions(ap);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.protect(spp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.save(Paths.get(pdfToEncrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToEncrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return getEncryptedPdf(pdfToEncrypt);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ENCRYPT_PDF_FAILURE, pdfToEncrypt.getName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Encrypts and returns the encrypted {@code pdfToEncrypt}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf getEncryptedPdf(Pdf pdfToEncrypt) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new Pdf(pdfToEncrypt, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof EncryptCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand e \u003d (EncryptCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 password.equals(e.password);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PDF Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Filters and lists all persons in address book which has matching tag(s) specified."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Tag matching is case sensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters and displays all persons whose \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"names contain any of the specified keywords (case-sensitive) and displays them as a \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters: t/TAG [t/MORE_TAGS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" t/2103 t/project\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final TagContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public FilterCommand(TagContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.updateFilteredPdfList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                String.format(Messages.MESSAGE_PDFS_LISTED_OVERVIEW, model.getFilteredPdfList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                String.format(Messages.MESSAGE_PDFS_LISTED_OVERVIEW, model.getFilteredPdfList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LabelCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Label a PDF file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class LabelCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"label\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Label success!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Lists all PDFs in the PDF book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all PDFs.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "WeiTangLau": 1,
      "-": 21,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MergeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.multipdf.PDFMergerUtility;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.Size;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Merge 2 or more pdf files identified using it\u0027s displayed index from the pdf book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * The content of the files will be directly appended to each other into a single"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * file, which will be placed in the same directory as the first file index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class MergeCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"merge\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \": Merges the PDF identified by the index number used in the displayed PDF list.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"The pdfs will be merged into one file and placed into the same directory as\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"the first file specified.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters: INDEX1 (must be a positive integer) INDEX2 ...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 9 7 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final String MESSAGE_MERGE_PDF_SUCCESS \u003d \"Merged PDFs into new PDF: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final String MESSAGE_MERGE_PDF_ENCRYPT \u003d \"One or more of selected PDFs is encrypted.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final String MESSAGE_MERGE_PDF_FAIL \u003d \"Merging of PDFs encountered an error and stopped.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final int FIRST_INDEX \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final String PDF_SUFFIX \u003d \".pdf\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final ArrayList\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public MergeCommand(Index... args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.targetIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        for (Index i : args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            targetIndexes.add(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (targetIndexes.stream().anyMatch(index -\u003e index.getZeroBased() \u003e\u003d lastShownList.size())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        ArrayList\u003cFile\u003e pdfsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        targetIndexes.forEach(index -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            Pdf pdf \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            pdfsToMerge.add(Paths.get(pdf.getDirectory().getDirectory(), pdf.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        PDFMergerUtility pdfMerger \u003d new PDFMergerUtility();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String mergedPdfDirectory \u003d lastShownList.get(targetIndexes.get(FIRST_INDEX)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .getZeroBased()).getDirectory().getDirectory();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String mergedPdfName \u003d \"merged\" + hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        //Check that no duplicate file name (how on earth would it happen though)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        while (Paths.get(mergedPdfDirectory, mergedPdfName).toAbsolutePath().toFile().exists()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            //Just throwing zeros at the back of the name until it is unique"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            mergedPdfName +\u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        mergedPdfName +\u003d PDF_SUFFIX;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        pdfMerger.setDestinationFileName(new File(mergedPdfDirectory, mergedPdfName).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            ArrayList\u003cPDDocument\u003e pdfSources \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            for (File file : pdfsToMerge) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                pdfSources.add(PDDocument.load(file));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                pdfMerger.addSource(file);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            pdfMerger.mergeDocuments(org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            for (PDDocument doc : pdfSources) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                doc.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (InvalidPasswordException p) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_MERGE_PDF_ENCRYPT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_MERGE_PDF_FAIL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        //Add merged pdf to application"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assert Paths.get(mergedPdfDirectory, mergedPdfName).toAbsolutePath().toFile().exists();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        File mergedFile \u003d Paths.get(mergedPdfDirectory, mergedPdfName).toAbsolutePath().toFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf mergedPdf \u003d new Pdf("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                new Name(mergedFile.getName()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                new Directory(mergedFile.getParent()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                new Size(String.valueOf(mergedFile.length())),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.addPdf(mergedPdf);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MERGE_PDF_SUCCESS, mergedPdf));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                || (other instanceof MergeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 targetIndexes.equals(((MergeCommand) other).targetIndexes));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MoveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Moves a PDF listed in PDF++ to another specified location."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class MoveCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"move\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Moves one specified pdf identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"[NEW_DIRECTORY]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 C:\\\\Users\\\\[username]\\\\Desktop\\\\[target]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_MOVE_PDF_SUCCESS \u003d \"Moved PDF: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_NOT_MOVED_SAME \u003d \"Why are you moving the PDF to the same place?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_NOT_MOVED_DUPLICATE \u003d \"File with same name at location.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_MOVE_PDF_FAIL \u003d \"PDF failed to be moved.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final Directory movePdfDirectory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to move"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param movePdfDirectory details to move the pdf with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public MoveCommand(Index index, Directory movePdfDirectory) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(movePdfDirectory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.movePdfDirectory \u003d movePdfDirectory;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (movePdfDirectory.equals(pdfToEdit.getDirectory())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_MOVED_SAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf editedPdf \u003d new Pdf(pdfToEdit.getName(), movePdfDirectory, pdfToEdit.getSize(), pdfToEdit.getTags());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (editedPdf.isValidPdf()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_MOVED_DUPLICATE, new DuplicatePdfException());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            File oFile \u003d Paths.get(pdfToEdit.getDirectory().getDirectory(), pdfToEdit.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            File nFile \u003d Paths.get(editedPdf.getDirectory().getDirectory(), editedPdf.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            boolean editSuccess \u003d oFile.renameTo(nFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            if (!editSuccess) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new CommandException(MESSAGE_MOVE_PDF_FAIL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.setPdf(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MOVE_PDF_SUCCESS, editedPdf));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (!(other instanceof MoveCommand)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        MoveCommand e \u003d (MoveCommand) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 movePdfDirectory.equals(e.movePdfDirectory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 105,
      "WeiTangLau": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Opens a pdf specified by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens the pdf identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_OPEN_PDF_SUCCESS \u003d \"Opened PDF: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_OPEN_PDF_FAILIUE \u003d \"Unable to Open PDF.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to edit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public OpenCommand(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdfToOpen \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Desktop.getDesktop().open(Paths.get(pdfToOpen.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    pdfToOpen.getName().getFullName()).toAbsolutePath().toFile());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new CommandException(MESSAGE_OPEN_PDF_FAILIUE, e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OPEN_PDF_SUCCESS, pdfToOpen));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 63,
      "WeiTangLau": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!model.canRedoPdfBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.redoPdfBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "WeiTangLau": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Selects a pdf identified using it\u0027s displayed index from the PDF book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the pdf identified by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected PDF: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e filteredPdfList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPdfList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setSelectedPdf(filteredPdfList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 4,
      "-": 49,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Sorts all PDF files in alphabetical or deadline order."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \": Sorts all the PDFs based on certain criteria.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Parameters: CRITERIA (name/date) ORDER (up/down)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"CRITERIA can only be either name or date corresponding to alphabetical or deadline order\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"ORDER can only be either up or down corresponding to ascending or descending order\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" name up\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" date down\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sort success!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final Comparator\u003cPdf\u003e pdfComparator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public SortCommand(Comparator\u003cPdf\u003e cm) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.pdfComparator \u003d cm;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook newBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        newBook.setPdfs(model.getPdfBook().getPdfList().sorted(pdfComparator));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdfBook(newBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 11,
      "WeiTangLau": 23,
      "jetkan-yk": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_EDIT_PDF_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_REMOVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Tags a pdf identified using it\u0027s displayed index from the PDF book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \": Sets or removes tag(s) related to a selected pdf indicated \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"by the index number used in the displayed pdf list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_TAG_ADD + \"/\" + PREFIX_TAG_REMOVE + \" \" + PREFIX_TAG_NAME + \"[TAG]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG_ADD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + PREFIX_TAG_NAME + \"CS2103T \" + PREFIX_TAG_NAME + \"SE\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_TAG_REMOVE + \" \" + PREFIX_TAG_NAME + \"School\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Boolean isAddTag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public TagCommand(Index index, Set\u003cTag\u003e tags, Boolean isAddTag) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(isAddTag);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isAddTag \u003d isAddTag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf oPdf \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf nPdf;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (isAddTag) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            nPdf \u003d TagCommand.getPdfWithNewTag(oPdf, tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            nPdf \u003d TagCommand.getPdfWithRemovedTag(oPdf, tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.setPdf(oPdf, nPdf);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PDF_SUCCESS, nPdf));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static Pdf getPdfWithNewTag(Pdf old, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e oTags \u003d old.getTags();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e nTags \u003d new HashSet\u003c\u003e(oTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        nTags.addAll(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Pdf(old.getName(), old.getDirectory(), old.getSize(), nTags, old.getDeadline());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static Pdf getPdfWithRemovedTag(Pdf old, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e oTags \u003d old.getTags();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e nTags \u003d new HashSet\u003c\u003e(oTags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        nTags.removeAll(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Pdf(old.getName(), old.getDirectory(), old.getSize(), nTags, old.getDeadline());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 25,
      "jetkan-yk": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!model.canUndoPdfBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.undoPdfBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "WeiTangLau": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Represents an error which occurs during execution of a {@link CommandException}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Size;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String MESSAGE_NO_FILE_SELECTED \u003d \"No file selected\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        File file \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, CliSyntax.getInvalidPrefixesForCommand(PREFIX_FILE))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, PREFIX_FILE) \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_FILE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                file \u003d ParserUtil.parseFile(argMultimap.getValue(PREFIX_FILE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } else if (!CliSyntax.arePrefixesPresent(argMultimap, PREFIX_FILE) \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Optional\u003cFile\u003e fileContainer \u003d new AddGuiParser().selectPdf();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (!fileContainer.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(AddCommandParser.MESSAGE_NO_FILE_SELECTED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                file \u003d fileContainer.get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } else if (!CliSyntax.arePrefixesPresent(argMultimap, PREFIX_FILE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Name name \u003d new Name(file.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Directory directory \u003d new Directory(file.getParent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Size size \u003d new Size(Long.toString(file.length()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Pdf pdf \u003d new Pdf(name, directory, size, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(pdf);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(AddCommand.MESSAGE_INVALID_SELECTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 29,
      "WeiTangLau": 14,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGuiParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Parses parses user selection and returns the corresponding file object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "class AddGuiParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FILECHOOSER_TITLE \u003d \"Select PDF\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FILECHOOSER_FILTER_DESCRIPTION \u003d \"PDF Files\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FILECHOOSER_FILTER_VALUE \u003d \"*.pdf\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private FileChooser fileChooser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Default Constructor, initializes file chooser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    AddGuiParser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.fileChooser.setTitle(AddGuiParser.FILECHOOSER_TITLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.fileChooser.getExtensionFilters()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .add(new FileChooser.ExtensionFilter(AddGuiParser.FILECHOOSER_FILTER_DESCRIPTION,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        AddGuiParser.FILECHOOSER_FILTER_VALUE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Opens the FileChooser UI to allow the user to select"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * a Pdf file of choice."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return File Object corresponding to chosen PDF file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cFile\u003e selectPdf() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return Optional.ofNullable(fileChooser.showOpenDialog(new Stage()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_DIRECTORY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Prefix PREFIX_TAG_NAME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_TAG_ADD \u003d new Prefix(\"-a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Prefix PREFIX_TAG_REMOVE \u003d new Prefix(\"-r\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_NEW \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_DONE \u003d new Prefix(\"done\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_REMOVE \u003d new Prefix(\"remove\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"password/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final int PREFIX_COUNT \u003d 10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns all prefixes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static Prefix[] getAllPrefixes() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Stream.of(PREFIX_NAME, PREFIX_DIRECTORY, PREFIX_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                PREFIX_TAG_NAME, PREFIX_TAG_ADD, PREFIX_TAG_REMOVE, PREFIX_DEADLINE_NEW,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                PREFIX_DEADLINE_DONE, PREFIX_DEADLINE_REMOVE, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .toArray(new Prefix[PREFIX_COUNT]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns all the invalid prefixes for the command given {@code validPrefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static Prefix[] getInvalidPrefixesForCommand(Prefix validPrefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Stream.of(getAllPrefixes())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .filter(x -\u003e x !\u003d validPrefix)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .toArray(new Prefix[PREFIX_COUNT]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 37,
      "-": 11,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeadlineCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_REMOVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class DeadlineCommandParser implements Parser\u003cDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeadlineCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * and returns an DeadlineCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public DeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DEADLINE_NEW, PREFIX_DEADLINE_DONE, PREFIX_DEADLINE_REMOVE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Deadline deadline \u003d new Deadline();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand.DeadlineAction action;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        //If both Remove \u0026 Done are present or none of the prefixes are present."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if ((argMultimap.getValue(PREFIX_DEADLINE_DONE).isPresent()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_DEADLINE_REMOVE).isPresent())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                || (!argMultimap.getValue(PREFIX_DEADLINE_NEW).isPresent()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \u0026\u0026 !argMultimap.getValue(PREFIX_DEADLINE_REMOVE).isPresent()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \u0026\u0026 !argMultimap.getValue(PREFIX_DEADLINE_DONE).isPresent())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                || (argMultimap.getValue(PREFIX_DEADLINE_NEW).isPresent()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \u0026\u0026 (argMultimap.getValue(PREFIX_DEADLINE_DONE).isPresent()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    || argMultimap.getValue(PREFIX_DEADLINE_REMOVE).isPresent()))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE_NEW).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE_NEW).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            action \u003d DeadlineCommand.DeadlineAction.NEW;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DEADLINE_DONE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            action \u003d DeadlineCommand.DeadlineAction.DONE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DEADLINE_REMOVE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            action \u003d DeadlineCommand.DeadlineAction.REMOVE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new DeadlineCommand(index, deadline, action);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 50,
      "WeiTangLau": 2,
      "jetkan-yk": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DecryptCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses input arguments and creates a new DecryptCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DecryptCommandParser implements Parser\u003cDecryptCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DecryptCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * and returns an DecryptCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public DecryptCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, CliSyntax.getInvalidPrefixesForCommand(PREFIX_PASSWORD))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new DecryptCommand(index, password);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String DELETE_COMMAND_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String[] parseArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            if (parseArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            } else if (parseArgs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                index \u003d ParserUtil.parseIndex(parseArgs[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                if (parseArgs[1].toLowerCase().equals(DELETE_COMMAND_HARD)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    return new DeleteCommand(index, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    throw new ParseException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new ParseException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 15,
      "WeiTangLau": 2,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPdfDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.getAllPrefixes());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, CliSyntax.getInvalidPrefixesForCommand(PREFIX_NAME))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor editPdfDescriptor \u003d new EditCommand.EditPdfDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            editPdfDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } else if (!editPdfDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        /*if (argMultimap.getValue(PREFIX_DIRECTORY).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            editPdfDescriptor.setDirectory(ParserUtil.parseDirectory(argMultimap.getValue(PREFIX_DIRECTORY).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        /*parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG_ADD)).ifPresent(editPdfDescriptor::setTags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!editPdfDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new EditCommand(index, editPdfDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "ptvrajsk": 3,
      "WeiTangLau": 13,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EncryptCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class EncryptCommandParser implements Parser\u003cEncryptCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EncryptCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * and returns an EncryptCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EncryptCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, CliSyntax.getInvalidPrefixesForCommand(PREFIX_PASSWORD))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new EncryptCommand(index, password);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Filter command is actually a modified version of find command,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * albeit using tag as the find \u0027keyword\u0027."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (trimmedArgs.isEmpty() || argMultiMap.getAllValues(PREFIX_TAG_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d argMultiMap.getAllValues(PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new FilterCommand(new TagContainsKeywordsPredicate(tagKeywords));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 35,
      "ptvrajsk": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "WeiTangLau": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MergeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Parses input arguments and creates a new MergeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class MergeCommandParser implements Parser\u003cMergeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public MergeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String[] parseArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            Index[] indices \u003d new Index[parseArgs.length];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            for (int i \u003d 0; i \u003c parseArgs.length; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                indices[i] \u003d ParserUtil.parseIndex(parseArgs[i]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new MergeCommand(indices);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MergeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MoveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIRECTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.MoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class MoveCommandParser implements Parser\u003cMoveCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String MESSAGE_NO_DIR_SELECTED \u003d \"No Directory Selected\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public MoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Directory directory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DIRECTORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DIRECTORY)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DIRECTORY).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                directory \u003d ParserUtil.parseDirectory(argMultimap.getValue(PREFIX_DIRECTORY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Optional\u003cFile\u003e selectedDirContainer \u003d new MoveGuiParser().selectDirectory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (!selectedDirContainer.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(MoveCommandParser.MESSAGE_NO_DIR_SELECTED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            directory \u003d ParserUtil.parseDirectory(selectedDirContainer.get().getAbsolutePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String[] parseArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            if (parseArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new ParseException(MoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            index \u003d ParserUtil.parseIndex(parseArgs[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            directory \u003d ParserUtil.parseDirectory(parseArgs[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new MoveCommand(index, directory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 38,
      "ptvrajsk": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MoveGuiParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.stage.DirectoryChooser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Parses parses users directory selection and returns the corresponding file object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "class MoveGuiParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String DIRCHOOSER_TITLE \u003d \"Select Directory\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private DirectoryChooser directoryChooser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Default Constructor, initializes directory chooser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    MoveGuiParser() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.directoryChooser \u003d new DirectoryChooser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.directoryChooser.setTitle(DIRCHOOSER_TITLE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Opens the DirectoryChooser UI to allow the user to select"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * a directory of choice."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return File Object corresponding to chosen directory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cFile\u003e selectDirectory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return Optional.ofNullable(this.directoryChooser.showDialog(new Stage()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public OpenCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new OpenCommand(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Parses a {@code String filePath} into an {@code File}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @throws ParseException if the given {@code File} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static File parseFile(String filePath) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String trimmedFilePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        File file \u003d new File(trimmedFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(MESSAGE_FILE_DOES_NOT_EXIST, new FileNotFoundException());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Parses a {@code String directory} into a {@code Directory}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws ParseException if the given {@code directory} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Directory parseDirectory(String directory) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(directory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String trimmedDirectory \u003d directory.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        File file \u003d new File(trimmedDirectory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!file.isDirectory()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(\"Directory unavailable.\", new FileNotFoundException());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new Directory(trimmedDirectory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Parses a DD-MM-YYYY string input into a Deadline Object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param deadline \u003d String in DD-MM-YYYY format."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return Constructed valid Deadline Object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws ParseException - If input does not match requirements."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final int positionDay \u003d 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final int positionMonth \u003d 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final int positionYear \u003d 2;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final String parameterSeperator \u003d \"-\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final String dateError \u003d \"Invalid Date Format/Value.\\nPlease enter valid date of the format dd-mm-yyyy.\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String[] dates \u003d deadline.split(parameterSeperator);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        for (String s : dates) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (s.length() \u003d\u003d 0 || s.length() \u003e 4) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(dateError);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (dates[positionDay].length() \u003e 2 || dates[positionMonth].length() \u003e 2"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                || dates[positionYear].length() \u003e 4) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(dateError);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return new Deadline(Integer.parseInt(dates[positionDay]), Integer.parseInt(dates[positionMonth]),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    Integer.parseInt(dates[positionYear]));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(dateError);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 51,
      "WeiTangLau": 9,
      "-": 89,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PdfBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.MoveCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfBookParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new DeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case DecryptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new DecryptCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case EncryptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new EncryptCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case MergeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new MergeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case MoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new MoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lormee94"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 48,
      "ptvrajsk": 1,
      "WeiTangLau": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.model.Model.COMPARATOR_DATE_ASCENDING_PDFS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.model.Model.COMPARATOR_DATE_DESCENDING_PDFS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.model.Model.COMPARATOR_NAME_ASCENDING_PDFS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.model.Model.COMPARATOR_NAME_DESCENDING_PDFS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String name_ascending \u003d \"name up\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String name_descending \u003d \"name down\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String date_ascending \u003d \"date up\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String date_descending \u003d \"date down\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String parseArgs \u003d args.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (parseArgs.equals(name_ascending)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                return new SortCommand(COMPARATOR_NAME_ASCENDING_PDFS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            } else if (parseArgs.equals(name_descending)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                return new SortCommand(COMPARATOR_NAME_DESCENDING_PDFS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            } else if (parseArgs.equals(date_ascending)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                return new SortCommand(COMPARATOR_DATE_ASCENDING_PDFS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            } else if (parseArgs.equals(date_descending)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                return new SortCommand(COMPARATOR_DATE_DESCENDING_PDFS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new ParseException(SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 33,
      "jetkan-yk": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_REMOVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses input arguments and creates a new TagCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME, PREFIX_TAG_ADD, PREFIX_TAG_REMOVE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG_ADD).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_TAG_REMOVE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(\"Invalid Prefix: -a -r\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG_ADD).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG_NAME));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return new TagCommand(index, tags, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG_REMOVE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG_NAME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return new TagCommand(index, tags, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(\"Missing Prefix(s)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 11,
      "jetkan-yk": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    Predicate\u003cPdf\u003e PREDICATE_SHOW_ALL_PDFS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /** {@code Comparator} that compares two PDFs alphabetically based on name */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_NAME_ASCENDING_PDFS \u003d Comparator.comparing(Pdf::getName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_NAME_DESCENDING_PDFS \u003d COMPARATOR_NAME_ASCENDING_PDFS.reversed();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /** {@code Comparator} that compares two PDFs chronologically based on deadline */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_DATE_ASCENDING_PDFS \u003d Comparator.comparing(Pdf::getDeadline);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_DATE_DESCENDING_PDFS \u003d COMPARATOR_DATE_ASCENDING_PDFS.reversed();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the user prefs\u0027 address book file value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Sets the user prefs\u0027 address book file value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setPdfBookFilePath(Path pdfBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Replaces address book data with the data in {@code pdfBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setPdfBook(ReadOnlyPdfBook pdfBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /** Returns the PdfBook */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ReadOnlyPdfBook getPdfBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a pdf with the same identity as {@code pdf} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    boolean hasPdf(Pdf pdf);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given pdf."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void deletePdf(Pdf target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given pdf."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pdf} must not already exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void addPdf(Pdf pdf);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given pdf {@code target} with {@code editedPdf}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf identity of {@code editedPdf} must not be the same as another existing pdf in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setPdf(Pdf target, Pdf editedPdf);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered pdf list */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ObservableList\u003cPdf\u003e getFilteredPdfList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered pdf list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void updateFilteredPdfList(Predicate\u003cPdf\u003e predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    boolean canUndoPdfBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    boolean canRedoPdfBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void undoPdfBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void redoPdfBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void commitPdfBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no pdf is selected."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ReadOnlyProperty\u003cPdf\u003e selectedPdfProperty();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no pdf is selected."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Pdf getSelectedPdf();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setSelectedPdf(Pdf pdf);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "WeiTangLau": 23,
      "-": 107,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final VersionedPdfBook versionedPdfBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPdf\u003e filteredPdfs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final SimpleObjectProperty\u003cPdf\u003e selectedPdf \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Initializes a ModelManager with the given pdfBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ModelManager(ReadOnlyPdfBook pdfBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireAllNonNull(pdfBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        logger.fine(\"Initializing with pdf book: \" + pdfBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook \u003d new VersionedPdfBook(pdfBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        filteredPdfs \u003d new FilteredList\u003c\u003e(versionedPdfBook.getPdfList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        filteredPdfs.addListener(this::ensureSelectedPdfIsValid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this(new PdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return userPrefs.getPdfBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfBookFilePath(Path pdfBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(pdfBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        userPrefs.setPdfBookFilePath(pdfBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PdfBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfBook(ReadOnlyPdfBook pdfBook) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.resetData(pdfBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ReadOnlyPdfBook getPdfBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(pdf);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook.hasPdf(pdf);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void deletePdf(Pdf target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.removePdf(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void addPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.addPdf(pdf);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdf(Pdf target, Pdf editedPdf) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPdf);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.setPdf(target, editedPdf);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Pdf List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Pdf} backed by the internal list of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * {@code versionedPdfBook}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ObservableList\u003cPdf\u003e getFilteredPdfList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPdfs;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void updateFilteredPdfList(Predicate\u003cPdf\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPdfs.setPredicate(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean canUndoPdfBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook.canUndo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean canRedoPdfBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook.canRedo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void undoPdfBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.undo();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void redoPdfBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.redo();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void commitPdfBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.commit();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected pdf \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ReadOnlyProperty\u003cPdf\u003e selectedPdfProperty() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return selectedPdf;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Pdf getSelectedPdf() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return selectedPdf.getValue();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setSelectedPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (pdf !\u003d null \u0026\u0026 !filteredPdfs.contains(pdf)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new PdfNotFoundException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        selectedPdf.setValue(pdf);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Ensures {@code selectedPdf} is a valid pdf in {@code filteredPdfs}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void ensureSelectedPdfIsValid(ListChangeListener.Change\u003c? extends Pdf\u003e change) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (selectedPdf.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected pdf, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            boolean wasSelectedPdfReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPdf.getValue());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (wasSelectedPdfReplaced) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                // Update selectedPdf to its new value."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPdf.getValue());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                selectedPdf.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            boolean wasSelectedPdfRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    .anyMatch(removedPerson -\u003e selectedPdf.getValue().isSamePdf(removedPerson));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (wasSelectedPdfRemoved) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the pdf that came before it in the list,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such pdf."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                selectedPdf.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook.equals(other.versionedPdfBook)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPdfs.equals(other.filteredPdfs)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPdf.get(), other.selectedPdf.get());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 66,
      "-": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PdfBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.UniquePdfList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Wraps all data at the pdf-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Duplicates are not allowed (by .isSamePdf comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class PdfBook implements ReadOnlyPdfBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final UniquePdfList pdfs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfs \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Creates an PdfBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBook(ReadOnlyPdfBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the pdf list with {@code pdfs}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pdfs} must not contain duplicate pdfs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfs(List\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.pdfs.setPdfs(pdfs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Resets the existing data of this {@code PdfBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void resetData(ReadOnlyPdfBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        setPdfs(newData.getPdfList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// pdf-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a pdf with the same identity as {@code pdf} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(pdf);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfs.contains(pdf);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a pdf to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void addPdf(Pdf p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfs.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given pdf {@code target} in the list with {@code editedPdf}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf identity of {@code editedPdf} must not be the same as another existing pdf in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdf(Pdf target, Pdf editedPdf) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPdf);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfs.setPdf(target, editedPdf);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Removes {@code key} from this {@code PdfBook}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void removePdf(Pdf key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfs.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfs.asUnmodifiableObservableList().size() + \" pdfs\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ObservableList\u003cPdf\u003e getPdfList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfs.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof PdfBook // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 pdfs.equals(((PdfBook) other).pdfs));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfs.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 30,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPdfBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public interface ReadOnlyPdfBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ObservableList\u003cPdf\u003e getPdfList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Path pdfBookFilePath \u003d Paths.get(\"data\" , \"pdfplusplus.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        setPdfBookFilePath(newUserPrefs.getPdfBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfBookFilePath(Path pdfBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(pdfBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.pdfBookFilePath \u003d pdfBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 pdfBookFilePath.equals(o.pdfBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Objects.hash(guiSettings, pdfBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + pdfBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 9,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedPdfBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * {@code PdfBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class VersionedPdfBook extends PdfBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final List\u003cReadOnlyPdfBook\u003e pdfBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public VersionedPdfBook(ReadOnlyPdfBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfBookStateList.add(new PdfBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Saves a copy of the current {@code PdfBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfBookStateList.add(new PdfBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfBookStateList.subList(currentStatePointer + 1, pdfBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        resetData(pdfBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        resetData(pdfBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return currentStatePointer \u003c pdfBookStateList.size() - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof VersionedPdfBook)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook otherVersionedPdfBook \u003d (VersionedPdfBook) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return super.equals(otherVersionedPdfBook)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 pdfBookStateList.equals(otherVersionedPdfBook.pdfBookStateList)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedPdfBook.currentStatePointer;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "WeiTangLau": 17,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Pdf\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.MissingFormatArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents a Pdf\u0027s deadline in the pdf book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class Deadline implements Comparable\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deadline can take any valid date, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String PROPERTY_SEPARATOR_PREFIX \u003d \"/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final int PROPERTY_DATE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final int PROPERTY_IS_DONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a valid {@code Deadline}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.date \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a valid {@code Deadline}. Specifically used for Json reading."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Interprets a deadline from its #toString() method."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Deadline(String jsonFormat) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (jsonFormat.equals(\"\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            this.date \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                this.date \u003d LocalDate.parse(jsonFormat.split(PROPERTY_SEPARATOR_PREFIX)[PROPERTY_DATE_INDEX]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                this.isDone \u003d Boolean.parseBoolean(jsonFormat.split(PROPERTY_SEPARATOR_PREFIX)[PROPERTY_IS_DONE_INDEX]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new MissingFormatArgumentException(\"Missing Parameters.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a valid {@code Deadline}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @param date - LocalDate of deadline"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws DateTimeException - If Invalid input is detected (Invalid Date)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public Deadline(LocalDate date) throws DateTimeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a valid {@code Deadline}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param date - Date of deadline"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param month - Month of Deadline"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param year - Year of Deadline"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws DateTimeException - If invalid input is detected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public Deadline(int date, int month, int year) throws DateTimeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.date \u003d LocalDate.of(year, month, date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Takes an existing deadline and parses its values while replacing its status with"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * user input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param existingDeadline - Existing Deadline whose status you want to change."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @param isDone - Specifying if Deadline has been met."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public Deadline(Deadline existingDeadline, boolean isDone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.date \u003d existingDeadline.getValue();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns the LocalDate object that represents"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * a pdf\u0027s deadline."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Calculates the number of days to a particular deadline."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return - Number of Days to Deadline as long."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public long getDaysToDeadline() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return DAYS.between(LocalDate.now(), this.date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns the state of the Deadline."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @return true or false depending on this.isDone"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns true or false based on the existence of a deadline."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return - existence of localdate."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public boolean exists() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this.date !\u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(\"Deadline: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (this.exists()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            builder.append(this.date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (this.isDone()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                builder.append(\" (Done)\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                builder.append(\" (Ongoing)\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            builder.append(\"None\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Json adapted toString() method"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @return - Json adapted Deadline.toString()."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public String toJsonString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this.exists()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                ? this.date + Deadline.PROPERTY_SEPARATOR_PREFIX + this.isDone"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                : \"\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Deadline setDone(Deadline completedDeadline) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Deadline(completedDeadline, true);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Deadline setRemove(Deadline deadlineToRemove) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Deadline();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                || other instanceof Deadline // instanceof handles nulls;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 date.equals(((Deadline) other).date)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 isDone \u003d\u003d ((Deadline) other).isDone;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public int compareTo(Deadline other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this.date.compareTo(other.date);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "ptvrajsk": 115,
      "jetkan-yk": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/Directory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Represents a Pdf\u0027s directory in the computer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDirectory(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class Directory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Directories of file can take any values, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * The first character of the directory must not be a whitespace ,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Path value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Constructs an {@code Directory}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param directory A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Directory(String directory) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(directory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        checkArgument(isValidDirectory(directory), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        value \u003d Paths.get(directory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static boolean isValidDirectory(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 Paths.get(test).toFile().exists()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 Paths.get(test).toFile().isDirectory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public String getDirectory() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this.value.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Directory: \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(value.toString())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof Directory // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 value.equals(((Directory) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 15,
      "WeiTangLau": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Pdf\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents a Pdf\u0027s name in the pdf book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            \"Names should only contain alphanumeric characters, it should ends with .pdf\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * File Name Restrictions (Currently Following Windows OS Restrictions)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String TO_MATCH_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \"^(?!^(PRN|AUX|CLOCK\\\\$|NUL|CON|COM\\\\d|LPT\\\\d|\\\\..*)(\\\\..+)?$)[^\\\\x00-\\\\x1f\\\\\\\\?*:\\\\\\\";|/]+pdf+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return test.matches(TO_MATCH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this.fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Name: \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(fullName)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return this.fullName.compareTo(other.fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 5,
      "ptvrajsk": 9,
      "WeiTangLau": 6,
      "-": 49,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Pdf}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPdf\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Pdf pdf) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsPartialWordIgnoreCase(pdf.getName().getFullName(), keyword)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                                || StringUtil.containsWordInContent(pdf, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "WeiTangLau": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/Pdf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Pdf in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Pdf {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Directory directory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Size size;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final boolean isEncrypted;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Pdf(Name name, Directory directory, Size size, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireAllNonNull(name, directory, size, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.deadline \u003d new Deadline();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.isEncrypted \u003d isFileEncrypted(name, directory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Pdf(Name name, Directory directory, Size size, Set\u003cTag\u003e tags, Deadline deadline) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireAllNonNull(name, directory, size, tags, deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.isEncrypted \u003d isFileEncrypted(name, directory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Pdf(Pdf oldPdf, boolean isEncrypted) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireAllNonNull(oldPdf, isEncrypted);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.name \u003d oldPdf.name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.directory \u003d oldPdf.directory;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.size \u003d new Size(Long.toString(Paths.get(oldPdf.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                oldPdf.getName().getFullName()).toFile().length()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.deadline \u003d oldPdf.deadline;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.tags.addAll(oldPdf.tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.isEncrypted \u003d isEncrypted;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Directory getDirectory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Size getSize() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public boolean getIsEncrypted() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return isEncrypted;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean isSamePdf(Pdf otherPdf) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPdf \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPdf !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 otherPdf.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 otherPdf.getDirectory().equals(getDirectory());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public boolean isValidPdf() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return Paths.get(this.directory.getDirectory(), this.name.getFullName()).toAbsolutePath().toFile().exists();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true if the file at the given {code name} and {code directory} is encrypted. If the file can\u0027t be loaded"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * means that the file is already encrypted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private boolean isFileEncrypted(Name name, Directory directory) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try (PDDocument pd \u003d PDDocument.load(Paths.get(directory.getDirectory(), name.getFullName()).toFile())) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            boolean isEncrypted \u003d pd.isEncrypted();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            pd.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return isEncrypted;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Pdf)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Pdf otherPdf \u003d (Pdf) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPdf.getName().equals(getName())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 otherPdf.getDirectory().equals(getDirectory())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 otherPdf.getSize().equals(getSize())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 otherPdf.getTags().equals(getTags())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 otherPdf.getDeadline().equals(getDeadline());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Objects.hash(name, directory, size, tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .append(getDirectory())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .append(getSize())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(getDeadline());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (getTags().size() \u003e 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            builder.append(\"Tags: \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 31,
      "WeiTangLau": 54,
      "-": 77,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Pdf\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/Size.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Represents a Pdf\u0027s file size in the pdf book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSize(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class Size {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File size should be a non-negative number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Size(String size) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(size);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        checkArgument(isValidSize(size), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        value \u003d size;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true if a given string is a non-negative number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static boolean isValidSize(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new StringBuilder().append(\"Size: \").append(value).append(\"\\n\").toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof Size // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 value.equals(((Size) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/TagContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Tests that a {@code Pdf}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cPdf\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean test(Pdf pdf) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    Iterator\u003cTag\u003e itr \u003d pdf.getTags().iterator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    while (itr.hasNext()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                        if (StringUtil.containsFullWordSameCase(itr.next().tagName, keyword)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/UniquePdfList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A list of pdfs that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A pdf is considered unique by comparing using {@code Pdf#isSamePdf(Pdf)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * pdfs uses Pdf#isSamePdf(Pdf) for equality so as to ensure that the pdf being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * unique in terms of identity in the UniquePdfList. However, the removal of a pdf uses Pdf#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the pdf with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * @see Pdf#isSamePdf(Pdf)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class UniquePdfList implements Iterable\u003cPdf\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPdf\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPdf\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent pdf as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Pdf toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePdf);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a pdf to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Pdf toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new DuplicatePdfException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the pdf {@code target} in the list with {@code editedPdf}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf identity of {@code editedPdf} must not be the same as another existing pdf in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdf(Pdf target, Pdf editedPdf) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPdf);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new PdfNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!target.isSamePdf(editedPdf) \u0026\u0026 contains(editedPdf)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new DuplicatePdfException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPdf);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent pdf from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Pdf toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new PdfNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfs(UniquePdfList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code pdfs}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pdfs} must not contain duplicate pdfs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfs(List\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(pdfs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!pdfsAreUnique(pdfs)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new DuplicatePdfException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(pdfs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPdf\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPdf\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof UniquePdfList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePdfList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code pdfs} contains only unique pdfs."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private boolean pdfsAreUnique(List\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c pdfs.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c pdfs.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                if (pdfs.get(i).isSamePdf(pdfs.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 24,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/exceptions/DuplicatePdfException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DuplicatePdfException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public DuplicatePdfException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        super(\"Operation would result in duplicate pdf\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 4,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/pdf/exceptions/PdfNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified pdf."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class PdfNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents a Tag in the pdf book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Size;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Contains utility methods for populating {@code PdfBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SAMPLE_DEADLINE_1 \u003d \"2019-04-10/READY\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SAMPLE_DEADLINE_2 \u003d \"2019-04-09/COMPLETE\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static Pdf[] getSamplePdfs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Path sampleA \u003d Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \"CS2103T_PDF++_UG_Intro.pdf\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Path sampleB \u003d Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \"CS2103T_Week9_Integration Approaches.pdf\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Pdf[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Pdf(new Name(sampleA.getFileName().toString()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Directory(sampleA.getParent().toAbsolutePath().toString()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Size(Long.toString(sampleA.toFile().length())), getTagSet(\"Lecture\", \"Week1\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Deadline(SAMPLE_DEADLINE_1)),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Pdf(new Name(sampleB.getFileName().toString()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Directory(sampleB.getParent().toAbsolutePath().toString()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Size(Long.toString(sampleB.toFile().length())), getTagSet(\"Lecture\", \"Week9\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Deadline(SAMPLE_DEADLINE_2))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static ReadOnlyPdfBook getSamplePdfBook() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook sampleAb \u003d new PdfBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /*for (Pdf samplePdf : getSamplePdfs()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            sampleAb.addPdf(samplePdf);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 24,
      "WeiTangLau": 6,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPdf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Size;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Pdf}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "class JsonAdaptedPdf {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pdf\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final String size;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final String directory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a {@code JsonAdaptedPdf} with the given pdf details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public JsonAdaptedPdf(@JsonProperty(\"name\") String name, @JsonProperty(\"directory\") String directory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                          @JsonProperty(\"size\") String size, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                          @JsonProperty(\"deadline\") String deadline) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Pdf} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public JsonAdaptedPdf(Pdf source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        name \u003d source.getName().getFullName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        size \u003d source.getSize().getValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        directory \u003d source.getDirectory().getDirectory();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deadline \u003d source.getDeadline().toJsonString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted pdf object into the model\u0027s {@code Pdf} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted pdf."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Pdf toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (size \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Size.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!Size.isValidSize(size)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Size modelSize \u003d new Size(size);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (directory \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Directory.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!Directory.isValidDirectory(directory)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new IllegalValueException(Directory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final Directory modelDirectory \u003d new Directory(directory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return new Pdf(modelName, modelDirectory, modelSize, modelTags, modelDeadline);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 48,
      "WeiTangLau": 1,
      "-": 62,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPdfBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A class to access PdfBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class JsonPdfBookStorage implements PdfBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPdfBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public JsonPdfBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Optional\u003cReadOnlyPdfBook\u003e readPdfBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return readPdfBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Similar to {@link #readPdfBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Optional\u003cReadOnlyPdfBook\u003e readPdfBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Optional\u003cJsonSerializablePdfBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                filePath, JsonSerializablePdfBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void savePdfBook(ReadOnlyPdfBook pdfBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        savePdfBook(pdfBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Similar to {@link #savePdfBook(ReadOnlyPdfBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void savePdfBook(ReadOnlyPdfBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePdfBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 15,
      "WeiTangLau": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePdfBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * An Immutable PdfBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "class JsonSerializablePdfBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PDF \u003d \"Pdf list contains duplicate pdf(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final List\u003cJsonAdaptedPdf\u003e pdfs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a {@code JsonSerializablePdfBook} with the given pdfs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public JsonSerializablePdfBook(@JsonProperty(\"pdfs\") List\u003cJsonAdaptedPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.pdfs.addAll(pdfs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Converts a given {@code ReadOnlyPdfBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePdfBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public JsonSerializablePdfBook(ReadOnlyPdfBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfs.addAll(source.getPdfList().stream().map(JsonAdaptedPdf::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Converts this address book into the model\u0027s {@code PdfBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook addressBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        for (JsonAdaptedPdf jsonAdaptedPdf : pdfs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Pdf pdf \u003d jsonAdaptedPdf.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (addressBook.hasPdf(pdf)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            addressBook.addPdf(pdf);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 12,
      "WeiTangLau": 10,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PdfBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Represents a storage for {@link PdfBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public interface PdfBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the file value of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns PdfBook data as a {@link ReadOnlyPdfBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cReadOnlyPdfBook\u003e readPdfBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @see #getPdfBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cReadOnlyPdfBook\u003e readPdfBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Saves the given {@link ReadOnlyPdfBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param pdfBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    void savePdfBook(ReadOnlyPdfBook pdfBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @see #savePdfBook(ReadOnlyPdfBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    void savePdfBook(ReadOnlyPdfBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 9,
      "WeiTangLau": 6,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public interface Storage extends PdfBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cReadOnlyPdfBook\u003e readPdfBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    void savePdfBook(ReadOnlyPdfBook pdfBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 4,
      "WeiTangLau": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Manages storage of PdfBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private PdfBookStorage pdfBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public StorageManager(PdfBookStorage pdfBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.pdfBookStorage \u003d pdfBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PdfBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return pdfBookStorage.getPdfBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Optional\u003cReadOnlyPdfBook\u003e readPdfBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return readPdfBook(pdfBookStorage.getPdfBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Optional\u003cReadOnlyPdfBook\u003e readPdfBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return pdfBookStorage.readPdfBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void savePdfBook(ReadOnlyPdfBook pdfBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        savePdfBook(pdfBook, pdfBookStorage.getPdfBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void savePdfBook(ReadOnlyPdfBook pdfBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBookStorage.savePdfBook(pdfBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 13,
      "WeiTangLau": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the file value of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private VBox initial;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label deadlines;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private VBox selected;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label selectedName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label selectedDirectory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label selectedSize;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label selectedDeadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //private WebView browser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cPdf\u003e selectedPerson, List\u003cPdf\u003e duePdfs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /*getRoot().setOnKeyPressed(Event::consume);*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load pdf page when selected pdf changes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.updateDefaultPage(duePdfs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.selected.setVisible(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                this.updateDefaultPage(duePdfs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                initial.setVisible(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                selected.setVisible(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                //loadDefaultPage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                this.updateSelectedPage(newValue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                initial.setVisible(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                selected.setVisible(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            //loadPersonPage(newValue);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        //loadDefaultPage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Updates the default page with relevant information of due documents."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param duePdfs - List of Pdfs that are due soon. (To a maximum of 4)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void updateDefaultPage(List\u003cPdf\u003e duePdfs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        for (Pdf pdf : duePdfs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            sb.append(\"\\u2022 \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            sb.append(pdf.getName().getFullName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            sb.append(\"\\r\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        deadlines.setText(sb.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Updates the individual Java Page on select."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param pdf - selected pdf"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void updateSelectedPage(Pdf pdf) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.selectedName.setText(\"Name: \" + pdf.getName().getFullName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.selectedDirectory.setText(\"Directory: \" + pdf.getDirectory().getDirectory());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.selectedSize.setText(\"Size: \" + pdf.getSize().getValue());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (pdf.getDeadline().exists()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            this.selectedDeadline.setText(\"Deadline: \" + pdf.getDeadline().getValue().toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            this.selectedDeadline.setText(\"Deadline: NONE\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*private void loadPersonPage(Pdf pdf) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + pdf.getName().getFullName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 85,
      "WeiTangLau": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Desktop.getDesktop().browse(Paths.get(\"build\", \"docs\", \"html5\", \"HelpWindow.html\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .toAbsolutePath().toFile().toURI());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 6,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private PdfListPanel pdfListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedPersonProperty(), logic.getDuePdfs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfListPanel \u003d new PdfListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(pdfListPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPdfBookFilePath(), logic.getPdfBook());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfListPanel getPdfListPanel() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return pdfListPanel;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            browserPanel.updateDefaultPage(logic.getDuePdfs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 8,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PdfCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Pdf}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FXML \u003d \"PdfListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on PdfBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Pdf pdf;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private ImageView lock;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfCard(Pdf pdf, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pdf \u003d pdf;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        name.setText(pdf.getName().getFullName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!pdf.getIsEncrypted()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            lock.setVisible(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (pdf.getDeadline().exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            deadline.setPadding(new Insets(4, 0, 0, 0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            deadline.setText(pdf.getDeadline().getValue().format(DateTimeFormatter.ofPattern(\"dd MMM uuuu\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            //Green \u003d #008060"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            //Orange \u003d #b36b00"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            //Red \u003d #b30000"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (pdf.getDeadline().isDone()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                deadline.setStyle(\"-fx-text-fill: white;\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-background-color: #2952a3;\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-padding: 1;\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-border-radius: 3;\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-background-radius: 3;\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-label-padding: 0;\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                if (pdf.getDeadline().getDaysToDeadline() \u003e 7) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    deadline.setStyle(\"-fx-text-fill: white;\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-color: #008060;\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-padding: 1;\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-border-radius: 3;\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-radius: 3;\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-label-padding: 0;\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                } else if (pdf.getDeadline().getDaysToDeadline() \u003e 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    deadline.setStyle(\"-fx-text-fill: white;\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-color: #b36b00;\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-padding: 1;\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-border-radius: 3;\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-radius: 3;\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-label-padding: 0;\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                } else if (pdf.getDeadline().getDaysToDeadline() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    deadline.setStyle(\"-fx-text-fill: white;\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-color: #cc0052;\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-padding: 1;\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-border-radius: 3;\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-radius: 3;\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-label-padding: 0;\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        pdf.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!(other instanceof PdfCard)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfCard card \u003d (PdfCard) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 pdf.equals(card.pdf);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 59,
      "WeiTangLau": 3,
      "-": 53,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PdfListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FXML \u003d \"PdfListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PdfListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPdf\u003e personListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfListPanel(ObservableList\u003cPdf\u003e pdfList, ObservableValue\u003cPdf\u003e selectedPerson,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        Consumer\u003cPdf\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(pdfList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selection in pdf list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selected pdf changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected pdf,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Pdf} using a {@code PdfCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPdf\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Pdf pdf, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(pdf, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || pdf \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                setGraphic(new PdfCard(pdf, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 6,
      "WeiTangLau": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyPdfBook pdfBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "WeiTangLau": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param location Directory of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003c!--\u003cWebView fx:id\u003d\"browser\"/\u003e--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003cVBox fx:id\u003d\"initial\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"welcome\" alignment\u003d\"CENTER\" textFill\u003d\"white\" text\u003d\"Hello,\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cLabel styleClass\u003d\"defaultpage\" wrapText\u003d\"true\" text\u003d\"The following documents are nearing their deadline today:\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"deadlines\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003cVBox fx:id\u003d\"selected\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cVBox fx:id\u003d\"image\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cVBox fx:id\u003d\"parameters\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"selectedName\" text\u003d\"Name: \"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"selectedDirectory\" text\u003d\"Directory: \"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"selectedSize\" text\u003d\"Size: \"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"selectedDeadline\" text\u003d\"Deadline: \"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 24,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "#welcome {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-font-size: 25;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-padding: 15, 0 ,0 ,0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".defaultpage {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-padding: 7, 0 ,0 ,0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "#image {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-padding: 40, 0 ,0 ,0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "#parameters {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-padding: 40, 0 ,0 ,0;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 20,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "         title\u003d\"PDF++\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    \u003cImage url\u003d\"@/images/logo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"pdfList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                   minHeight\u003d\"150\" prefHeight\u003d\"150\" maxHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 14,
      "-": 52,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/resources/view/PdfListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cGridPane alignment\u003d\"BOTTOM_RIGHT\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003cImageView fx:id\u003d\"lock\" fitHeight\u003d\"40\" fitWidth\u003d\"40\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \u003cImage url\u003d\"@../images/lock.png\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003c!--\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e--\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 12,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    h2 {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      color:whitesmoke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      font-family: \"Avenir Next Condensed\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    h3 {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        color:whitesmoke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        font-family: \"Avenir Next Condensed\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003ch2 align\u003d\"left\" id\u003d\"welcomeHeader\"\u003eHello,\u003c/h2\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003ch3\u003eWelcome to (Insert Program Name Here),\u003c/h3\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003ch3\u003eIf you need assistance, please type \"help\" in the command bar.\u003c/h3\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 14,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonPdfBookStorageTest/invalidAndValidPdfPdfBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\" : \"c.pdf\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main/src/test/data/JsonAdaptedPdfTest\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\": \"Pdf with invalid location\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main/src/test/data/JsonAdaptedPdfTester\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 13
    }
  },
  {
    "path": "src/test/data/JsonPdfBookStorageTest/invalidPdfPdfBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\": \"Pdf with invalid location\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main/src/test/data/JsonAdaptedPdfTester\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializablePdfBookTest/duplicatePdfPdfBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\" : \"b.pdf\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ \"colleagues\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\" : \"b.pdf\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ \"colleagues\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 13
    }
  },
  {
    "path": "src/test/data/JsonSerializablePdfBookTest/invalidPdfPdfBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\": \"Pdf with invalid location\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main/src/test/data/JsonAdaptedPdfTester\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializablePdfBookTest/typicalPdfPdfBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"_comment\": \"PdfBook save file which contains the same Pdf values as in TypicalPdfss#getTypicalPdfBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfs\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\" : \"a.pdf\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ \"RandomTag1\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\" : \"b.pdf\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ \"colleagues\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\" : \"c.pdf\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main/src/test/data/JsonAdaptedPdfTest\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 19
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfBookFilePath\": \"pdfplusplus.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfBookFilePath\": \"pdfplusplus.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a pdf card in the pdf list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code pdf}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Pdf pdf) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return getName().equals(pdf.getName().getFullName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(pdf.getTags().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 1,
      "-": 82
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Provides a handle for {@code PdfListPanel} containing the list of {@code PdfCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPdf\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cPdf\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cPdf\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e selectedPdfList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedPdfList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Pdf list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPdfList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code pdf}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(Pdf pdf) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(pdf)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Pdf does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(pdf);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Selects the {@code PdfCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the pdf card handle of a pdf associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private Pdf getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Remembers the selected {@code PdfCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns true if the selected {@code PdfCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 4,
      "WeiTangLau": 1,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.storage.JsonPdfBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    protected Supplier\u003cReadOnlyPdfBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyPdfBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            JsonPdfBookStorage jsonPdfBookStorage \u003d new JsonPdfBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                jsonPdfBookStorage.savePdfBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        userPrefs.setPdfBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfBook readStoragePdfBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return new PdfBook(storage.readPdfBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new AssertionError(\"Data is not in the PdfBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the file value of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return storage.getPdfBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model copy \u003d new ModelManager((model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPdfList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 6,
      "WeiTangLau": 9,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                + \"Preference file Directory : preferences.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // valid value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/value\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // null value -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 4,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    //---------------- Tests for containsPartialWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        StringUtil.containsPartialWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertFalse(StringUtil.containsPartialWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertFalse(StringUtil.containsPartialWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // Matches a partial word"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // Does not match partial word"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 18,
      "ptvrajsk": 4,
      "-": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.storage.JsonPdfBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonPdfBookStorage pdfBookStorage \u003d new JsonPdfBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(pdfBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // Setup LogicManager with JsonPdfBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonPdfBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new JsonPdfBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_A + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf expectedPdf \u003d new PdfBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.addPdf(expectedPdf);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static class JsonPdfBookIoExceptionThrowingStub extends JsonPdfBookStorage {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        private JsonPdfBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        public void savePdfBook(ReadOnlyPdfBook pdfBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "ptvrajsk": 20,
      "WeiTangLau": 6,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf validPdf \u003d SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.addPdf(validPdf);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPdf), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPdf), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfInList \u003d model.getPdfBook().getPdfList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(pdfInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 10,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_6;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_8;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void execute_pdfAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ModelStubAcceptingPdfAdded modelStub \u003d new ModelStubAcceptingPdfAdded();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf validPdf \u003d SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPdf).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPdf), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPdf), modelStub.personsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void execute_duplicatePdf_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf validPdf \u003d SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPdf);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPdf(validPdf);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf samplePdf6 \u003d SAMPLE_PDF_6;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf samplePdf7 \u003d SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand addCommandSamplePdf6 \u003d new AddCommand(samplePdf6);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand addCommandSamplePdf7 \u003d new AddCommand(samplePdf7);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(addCommandSamplePdf6.equals(addCommandSamplePdf6));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand addDCommandCopy \u003d new AddCommand(samplePdf6);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(addCommandSamplePdf6.equals(addDCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(addCommandSamplePdf6.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(addCommandSamplePdf6.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(addCommandSamplePdf6.equals(addCommandSamplePdf7));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void executeUndoRedo_validFile_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToAdd \u003d SAMPLE_PDF_8;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(pdfToAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.addPdf(pdfToAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // add -\u003e first pdf deleted"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        addCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // undo -\u003e reverts pdfbook back to previous state and filtered pdf list to show all persons"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redo -\u003e same first pdf deleted again"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setPdfBookFilePath(Path pdfBookFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void addPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setPdfBook(ReadOnlyPdfBook pdfBook) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ReadOnlyPdfBook getPdfBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void deletePdf(Pdf target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setPdf(Pdf target, Pdf editedPdf) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ObservableList\u003cPdf\u003e getFilteredPdfList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void updateFilteredPdfList(Predicate\u003cPdf\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean canUndoPdfBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean canRedoPdfBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void undoPdfBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void redoPdfBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void commitPdfBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ReadOnlyProperty\u003cPdf\u003e selectedPdfProperty() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public Pdf getSelectedPdf() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setSelectedPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single pdf."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private class ModelStubWithPdf extends ModelStub {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Pdf pdf;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ModelStubWithPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(pdf);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            this.pdf \u003d pdf;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(pdf);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return this.pdf.isSamePdf(pdf);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the pdf being added."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private class ModelStubAcceptingPdfAdded extends ModelStub {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPdf\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(pdf);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return personsAdded.stream().anyMatch(pdf::isSamePdf);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void addPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(pdf);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(pdf);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void commitPdfBook() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ReadOnlyPdfBook getPdfBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new PdfBook();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 8,
      "WeiTangLau": 69,
      "-": 203
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void execute_emptyPdfBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                EMPTY_COMMAND_HISTORY, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void execute_nonEmptyPdfBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdfBook(new PdfBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                EMPTY_COMMAND_HISTORY, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "WeiTangLau": 12,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_nullFieldProvided_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new CommandResult(null, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_allFieldsProvided_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", false, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(commandResult.getFeedbackToUser(), \"feedback\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 17,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIRECTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Error Handling Constants"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT \u003d \"Unexpected Exception thrown for valid input.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Name Constants"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String NAME_1_VALID \u003d \"CS2103T_PDF++_UG_Intro.pdf\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String NAME_2_VALID \u003d \"CS2103T_Week9_Integration Approaches.pdf\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String NAME_3_VALID \u003d \"CS2103T_Schedule_AY1819S2.pdf\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String NAME_INVALID_EXTENSION \u003d \"InvalidName.invalid\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String NAME_INVALID_CHARACTERS \u003d \"abcd*.pdf\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String NAME_DESC_1_VALID \u003d \" \" + PREFIX_NAME + NAME_1_VALID;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String NAME_DESC_2_VALID \u003d \" \" + PREFIX_NAME + NAME_2_VALID;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String NAME_DESC_1_INVALID \u003d \" \" + PREFIX_NAME + NAME_INVALID_EXTENSION;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Directory Constants"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DIR_1_VALID \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .toAbsolutePath().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DIR_2_VALID \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .toAbsolutePath().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DIR_3_VALID \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .toAbsolutePath().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String DIR_INVALID_NONEXISTENT \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"definitelyNotARealDirectory\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String DIRECTORY_DESC_1 \u003d \" \" + PREFIX_DIRECTORY + DIR_3_VALID;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //FilePath Constants"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String FILEPATH_1_VALID \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(DIR_1_VALID, NAME_1_VALID).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String FILEPATH_2_VALID \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(DIR_2_VALID, NAME_2_VALID).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String FILEPATH_3_VALID \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(DIR_3_VALID, NAME_3_VALID).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String FILE_DESC_1_PDF \u003d \" \" + PREFIX_FILE + FILEPATH_1_VALID;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String FILE_DESC_2_PDF \u003d \" \" + PREFIX_FILE + FILEPATH_2_VALID;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String FILE_DESC_PATH_INVALID \u003d \" \" + PREFIX_FILE + \"DefinitelyNotAFilePath\"; // not valid path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Size Constants"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SIZE_1_VALID \u003d Long.toString(Paths.get(FILEPATH_1_VALID)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .toAbsolutePath().toFile().length());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SIZE_2_VALID \u003d Long.toString(Paths.get(FILEPATH_2_VALID)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .toAbsolutePath().toFile().length());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SIZE_3_VALID \u003d Long.toString(Paths.get(FILEPATH_3_VALID)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .toAbsolutePath().toFile().length());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SIZE_INVALID_ALPHABET \u003d \"abcdef\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SIZE_INVALID_NEGATIVE \u003d \"-20\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Deadline Constants"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DATE_1_VALID \u003d \"2019-10-03\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DATE_2_VALID \u003d \"2019-05-03\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DATE_INVALID_DATE \u003d \"2019-10-32\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DATE_INVALID_FORMAT \u003d \"2019/10-03\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    //Password Constant"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String PASSWORD_1_VALID \u003d \"validPassword1\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String PROPERTY_SEPARATOR_PREFIX \u003d \"/\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_STATUS_READY \u003d \"READY\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_STATUS_REMOVE \u003d \"REMOVE\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_STATUS_COMPLETE \u003d \"COMPLETE\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_STATUS_INVALID \u003d \"INVALID\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String DEADLINE_JSON_READY \u003d DATE_1_VALID + PROPERTY_SEPARATOR_PREFIX"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + DEADLINE_STATUS_READY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String DEADLINE_JSON_COMPLETE \u003d DATE_2_VALID + PROPERTY_SEPARATOR_PREFIX"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + DEADLINE_STATUS_COMPLETE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String DEADLINE_JSON_INVALID_MISSINGSEPERATORPREFIX \u003d DATE_1_VALID + DEADLINE_STATUS_READY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String DEADLINE_JSON_INVALID_MISSINGSTATUS \u003d DATE_2_VALID;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String DEADLINE_JSON_INVALID_INVALIDSTATUS \u003d DATE_2_VALID + PROPERTY_SEPARATOR_PREFIX"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + DEADLINE_STATUS_INVALID;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String DEADLINE_JSON_INVALID_INVALIDDATE \u003d DATE_INVALID_DATE + PROPERTY_SEPARATOR_PREFIX"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + DEADLINE_STATUS_COMPLETE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_DESC_VALID \u003d \" \" + PREFIX_DEADLINE_NEW + DATE_1_VALID;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_DESC_INVALID_MISSING_STATUS \u003d \" \" + PREFIX_DEADLINE_NEW + DATE_1_VALID;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_DESC_INVALID_WRONG_STATUS \u003d \" \" + PREFIX_DEADLINE_NEW + DATE_2_VALID"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_INVALID;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_DESC_INVALID_DATE \u003d \" \" + PREFIX_DEADLINE_NEW + DATE_INVALID_DATE"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_READY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DEADLINE_DESC_INVALID_FORMAT \u003d \" \" + PREFIX_DEADLINE_NEW + DATE_INVALID_FORMAT"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_READY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    //Delete Constants"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DELETE_TYPE_SOFT \u003d \"soft\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DELETE_TYPE_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String DELETE_TYPE_INVALID \u003d \"invalidType\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Tag Constants"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String TAG_VALID_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String TAG_VALID_LECTURE \u003d \"lecture\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String TAG_DESC_LECTURE \u003d \" \" + PREFIX_TAG_ADD + TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String TAG_DESC_CS2103T \u003d \" \" + PREFIX_TAG_ADD + TAG_VALID_CS2103T;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String TAG_DESC_INVALID \u003d \" \" + PREFIX_TAG_ADD + \"moduleA*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String PASSWORD_DESC_VALID \u003d \" \" + PREFIX_PASSWORD + PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Preamble Constants"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Edit Command Descriptors"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final EditCommand.EditPdfDescriptor DESC_1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final EditCommand.EditPdfDescriptor DESC_2;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DESC_1 \u003d new EditPdfDescriptorBuilder().withName(NAME_1_VALID).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DESC_2 \u003d new EditPdfDescriptorBuilder().withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered pdf list and selected pdf in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfBook expectedPdfBook \u003d new PdfBook(actualModel.getPdfBook());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPdfList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf expectedSelectedPdf \u003d actualModel.getSelectedPdf();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            assertEquals(expectedPdfBook, actualModel.getPdfBook());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPdfList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            assertEquals(expectedSelectedPdf, actualModel.getSelectedPdf());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the pdf at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static void showPdfAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdf \u003d model.getFilteredPdfList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final String[] splitName \u003d pdf.getName().getFullName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(1, model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first pdf in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static void deleteFirstPdf(Model model) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf firstPdf \u003d model.getFilteredPdfList().get(0);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.deletePdf(firstPdf);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "ptvrajsk": 60,
      "WeiTangLau": 72,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeadlineCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_INVALID_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_INVALID_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_INVALID_MISSING_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_INVALID_WRONG_STATUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_COMPLETE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.pdf.Deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DeadlineCommand(Index.fromZeroBased(model.getFilteredPdfList().size() + 1),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new Deadline(DEADLINE_JSON_COMPLETE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        new DeadlineCommand(Index.fromZeroBased(-1), new Deadline(DEADLINE_JSON_COMPLETE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_missingStatus_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(DateTimeParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DeadlineCommand(Index.fromOneBased(1), new Deadline(DEADLINE_DESC_INVALID_MISSING_STATUS));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_wrongStatus_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(DateTimeParseException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DeadlineCommand(Index.fromOneBased(1), new Deadline(DEADLINE_DESC_INVALID_WRONG_STATUS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_invalidDateDeadline_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(DateTimeParseException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DeadlineCommand(Index.fromOneBased(1), new Deadline(DEADLINE_DESC_INVALID_DATE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_invalidFormatDeadline_throwsDateTimeParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(DateTimeParseException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DeadlineCommand(Index.fromOneBased(1), new Deadline(DEADLINE_DESC_INVALID_FORMAT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_nullPdfDescriptorBuilder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DeadlineCommand(Index.fromZeroBased(1), null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_onlyCompulsoryFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(DEADLINE_JSON_COMPLETE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToEdit \u003d SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(pdfToEdit).withDeadline(DEADLINE_JSON_COMPLETE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(INDEX_FIRST_PDF, newDeadline);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(model.getFilteredPdfList().get(0), editedPdf);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(deadlineCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf lastPdf \u003d model.getFilteredPdfList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBuilder personInList \u003d new PdfBuilder(lastPdf);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d personInList.withName(SAMPLE_EDITEDPDF.getName().getFullName()).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(SAMPLE_EDITEDPDF.getName().getFullName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(lastPdf, editedPdf);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        revertBackup(lastPdf, editedPdf);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 5,
      "WeiTangLau": 97,
      "jetkan-yk": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DecryptCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.DecryptCommand.MESSAGE_DECRYPT_PDF_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.EncryptCommand.ENCRYPTION_KEY_LENGTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DecryptCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void before() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        initialiseTest(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void after() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        resetTestFile(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DecryptCommand((Index.fromZeroBased(-1)), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DecryptCommand((Index.fromZeroBased(model.getFilteredPdfList().size() + 1)), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_nullPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new EncryptCommand((Index.fromZeroBased(2)), null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_onlyCompulsoryFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToDecrypt \u003d SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_SECOND_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DECRYPT_PDF_SUCCESS, pdfToDecrypt);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(decryptCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_fileAlreadyEncrypted_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_SECOND_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        decryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        decryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        showPdfAtIndex(model, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf decryptedPdf \u003d SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DECRYPT_PDF_SUCCESS, decryptedPdf);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(decryptCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_invalidIndexIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(decryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_invalidPdfIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        showPdfAtIndex(model, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pdf book list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(decryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // execution failed -\u003e pdf book state not added into model"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(decryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // single pdf book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void executeUndoRedo_encryptionDoesNotAllowUndoAndRedo_failure() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        initialiseTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        decryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Encrypts {@code pdfToInitialise} if it is not encrypted."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void initialiseTest(Pdf pdfToInitialise) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(Paths.get(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToInitialise.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            AccessPermission ap \u003d new AccessPermission();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            StandardProtectionPolicy spp \u003d new StandardProtectionPolicy(PASSWORD_1_VALID, PASSWORD_1_VALID, ap);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            spp.setEncryptionKeyLength(ENCRYPTION_KEY_LENGTH);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            spp.setPermissions(ap);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.protect(spp);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.save(Paths.get(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToInitialise.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Decrypts {@code pdfToReset} if it is encrypted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void resetTestFile(Pdf pdfToReset) throws CommandException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (pdfToReset.getIsEncrypted()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Model initialisationModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            CommandHistory initialisationCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_SECOND_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            decryptCommand.execute(initialisationModel, initialisationCommandHistory);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 181,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DeleteCommand(Index.fromZeroBased(model.getFilteredPdfList().size() + 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new DeleteCommand(Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_validIndexUnfilteredListHard_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        saveBackup(pdfToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        revertBackup(pdfToDelete);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(Paths.get(pdfToDelete.getDirectory().getDirectory(), pdfToDelete.getName().getFullName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .toFile().exists());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeleteCommand deleteHardCommand \u003d new DeleteCommand(outOfBoundIndex, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(deleteHardCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_validIndexFilteredListHard_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        saveBackup(pdfToDelete);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        revertBackup(pdfToDelete);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(Paths.get(pdfToDelete.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                pdfToDelete.getName().getFullName()).toFile().exists());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeleteCommand deleteHardCommand \u003d new DeleteCommand(outOfBoundIndex, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(deleteHardCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first pdf deleted"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered pdf list to show all persons"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first pdf deleted again"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Pdf} from a filtered list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted pdf in the"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the pdf object regardless of indexing."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second pdf in unfiltered pdf list / first pdf in filtered pdf list"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // undo -\u003e reverts pdfbook back to previous state and filtered pdf list to show all persons"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertNotEquals(pdfToDelete, model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second pdf in unfiltered pdf list"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeleteCommand deleteHardFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PDF, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeleteCommand deleteHardSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PDF, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteHardFirstCommand));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(deleteHardSecondCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Saves {@code pdfToDelete} as a backup"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void saveBackup(Pdf pdfToDelete) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            File testdir \u003d Paths.get(pdfToDelete.getDirectory().getDirectory(), \"Backup\").toFile();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (!testdir.exists()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                if (testdir.mkdir()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    throw new IOException();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Files.copy(Paths.get(pdfToDelete.getDirectory().getDirectory(), pdfToDelete.getName().getFullName()),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    Paths.get(pdfToDelete.getDirectory().getDirectory(), \"Backup\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            pdfToDelete.getName().getFullName()), StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new PdfNotFoundException();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Moves {@code pdfToRevert} back to its original location"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void revertBackup(Pdf pdfToRevert) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        File fileToRevert \u003d Paths.get(pdfToRevert.getDirectory().getDirectory(), \"Backup\","
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                pdfToRevert.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        File revertedFile \u003d Paths.get(pdfToRevert.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                pdfToRevert.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        fileToRevert.renameTo(revertedFile);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(p -\u003e false);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(model.getFilteredPdfList().isEmpty());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 21,
      "ptvrajsk": 22,
      "WeiTangLau": 109,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_DUPLICATE_PDF_DIRECTORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_EDITEDPDF;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPdfDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void before() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        initialiseTest(SAMPLE_EDITEDPDF);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new EditCommand(Index.fromZeroBased(-1), new EditPdfDescriptorBuilder(SAMPLE_PDF_1).build());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_nullPdfDescriptorBuilder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new EditCommand(Index.fromZeroBased(1), null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_onlyCompulsoryFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder(editedPdf).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PDF, descriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(model.getFilteredPdfList().get(0), editedPdf);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf lastPdf \u003d model.getFilteredPdfList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfBuilder personInList \u003d new PdfBuilder(lastPdf);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d personInList.withName(SAMPLE_EDITEDPDF.getName().getFullName()).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(SAMPLE_EDITEDPDF.getName().getFullName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(lastPdf, editedPdf);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        revertBackup(lastPdf, editedPdf);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_fileWithSameName_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf firstPdf \u003d model.getFilteredPdfList().get(Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf secondPdf \u003d model.getFilteredPdfList().get(Index.fromOneBased(2).getOneBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(secondPdf.getName().getFullName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Index.fromZeroBased(1), descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(String.format(MESSAGE_DUPLICATE_PDF_DIRECTORY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                secondPdf.getName().getFullName(), firstPdf.getDirectory().getDirectory()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PDF, new EditPdfDescriptor());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf editedPdf \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfInFilteredList \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(pdfInFilteredList).withName(SAMPLE_EDITEDPDF.getName().getFullName()).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PDF, new EditPdfDescriptorBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .withName(SAMPLE_EDITEDPDF.getName().getFullName()).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(model.getFilteredPdfList().get(0), editedPdf);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        revertBackup(pdfInFilteredList, editedPdf);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_duplicatePdfUnfilteredList_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf firstPdf \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder(firstPdf).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PDF, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, String.format(MESSAGE_DUPLICATE_PDF_DIRECTORY,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                firstPdf.getName().getFullName(), SAMPLE_PDF_2.getDirectory().getDirectory()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_duplicatePdfFilteredList_failure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit pdf in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfInList \u003d model.getPdfBook().getPdfList().get(INDEX_SECOND_PDF.getZeroBased());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PDF,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                new EditPdfDescriptorBuilder(pdfInList).build());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, String.format(MESSAGE_DUPLICATE_PDF_DIRECTORY,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                pdfInList.getName().getFullName(), SAMPLE_PDF_2.getDirectory().getDirectory()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_invalidPdfIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(NAME_1_VALID).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * but smaller than size of pdf book"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_invalidPdfIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pdf book list"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                new EditPdfDescriptorBuilder().withName(NAME_1_VALID).build());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withName(SAMPLE_EDITEDPDF.getName().getFullName()).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfToEdit \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor editPdfDescriptor \u003d new EditPdfDescriptorBuilder()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .withName(editedPdf.getName().getFullName()).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PDF, editPdfDescriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // edit -\u003e first pdf deleted"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // undo -\u003e reverts pdfbook back to previous state and filtered pdf list to show all persons"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redo -\u003e same first pdf deleted again"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        revertBackup(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(NAME_1_VALID).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // execution failed -\u003e pdf book state not added into model"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // single pdf book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Pdf} from a filtered list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited pdf in the"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the pdf object regardless of indexing."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePdfEdited() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_2).build();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder(editedPdf).build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PDF, descriptor);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfToEdit \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second pdf in unfiltered pdf list / first pdf in filtered pdf list"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // undo -\u003e reverts pdf book back to previous state and filtered pdf list to show all persons"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertNotEquals(model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased()), pdfToEdit);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second pdf in unfiltered pdf list"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PDF, DESC_2);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor copyDescriptor \u003d new EditPdfDescriptor(DESC_2);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PDF, copyDescriptor);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PDF, DESC_2)));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PDF, DESC_1)));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Initialises the files for th test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void initialiseTest(Pdf target) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (Paths.get(target.getDirectory().getDirectory() , target.getName().getFullName()).toFile().exists()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                Files.delete(Paths.get(target.getDirectory().getDirectory() + \"\\\\\" + target.getName()));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                System.out.println(\"The test is already at initialised state\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Moves {@code fileToRevert} back to its original location"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void revertBackup(Pdf target, Pdf editedFile) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        File fileToRevert \u003d Paths.get(editedFile.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                editedFile.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        File revertedFile \u003d Paths.get(target.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                target.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        fileToRevert.renameTo(revertedFile);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 18,
      "ptvrajsk": 5,
      "WeiTangLau": 160,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPdfDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPdfDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPdfDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor descriptorWithSameValues \u003d new EditPdfDescriptor(DESC_1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(DESC_1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(DESC_1.equals(DESC_1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(DESC_1.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(DESC_1.equals(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(DESC_1.equals(DESC_2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand.EditPdfDescriptor editedA \u003d new EditPdfDescriptorBuilder(DESC_1).withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(DESC_1.equals(editedA));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        editedA \u003d new EditPdfDescriptorBuilder(DESC_1).withTags(TAG_VALID_LECTURE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(DESC_1.equals(editedA));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 6,
      "WeiTangLau": 16,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EncryptCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.DecryptCommand.MESSAGE_DECRYPT_PDF_FAILURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.EncryptCommand.MESSAGE_ENCRYPT_PDF_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1_ENCRYPTED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class EncryptCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static void beforeClass() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        preAndPostProcessingTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static void afterClass() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        preAndPostProcessingTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void before() throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        initialiseTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void after() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        initialiseTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new EncryptCommand((Index.fromZeroBased(-1)), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new EncryptCommand((Index.fromZeroBased(model.getFilteredPdfList().size() + 1)), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void constructor_nullPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        new EncryptCommand((Index.fromZeroBased(1)), null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_onlyCompulsoryFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToEncrypt \u003d SAMPLE_PDF_1_ENCRYPTED;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ENCRYPT_PDF_SUCCESS, pdfToEncrypt);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        //expectedModel.setPdf(model.getFilteredPdfList().get(0), pdfToEncrypt);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(encryptCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_fileAlreadyEncrypted_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        encryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        encryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf encryptedPdf \u003d SAMPLE_PDF_1_ENCRYPTED;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ENCRYPT_PDF_SUCCESS, encryptedPdf);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(model.getFilteredPdfList().get(0), encryptedPdf);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(encryptCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_invalidIndexIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(encryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void execute_invalidPdfIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pdf book list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(encryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // execution failed -\u003e pdf book state not added into model"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(encryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // single pdf book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void executeUndoRedo_encryptionDoesNotAllowUndoAndRedo_failure() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        encryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Decrypts {@code pdfToInitialise} if it is encrypted."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void initialiseTest(Pdf pdfToInitialise) throws CommandException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(new File(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToInitialise.getName().getFullName()), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.setAllSecurityToBeRemoved(true);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.save(Paths.get(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToInitialise.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DECRYPT_PDF_FAILURE, pdfToInitialise.getName()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Set {code pdfToInitialise} to be decrypted"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static void preAndPostProcessingTest(Pdf pdfToInitialise) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(new File(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToInitialise.getName().getFullName()), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.setAllSecurityToBeRemoved(true);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.save(Paths.get(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToInitialise.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DECRYPT_PDF_FAILURE, pdfToInitialise.getName()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PDFS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PDFS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.updateFilteredPdfList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPdfList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PDFS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"a.pdf b.pdf c.pdf\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.updateFilteredPdfList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(Arrays.asList(SAMPLE_PDF_1, SAMPLE_PDF_2, SAMPLE_PDF_3), model.getFilteredPdfList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 4,
      "WeiTangLau": 11,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "WeiTangLau": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MergeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class MergeCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPdf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        deleteFirstPdf(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        deleteFirstPdf(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.undoPdfBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.undoPdfBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        deleteFirstPdf(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        deleteFirstPdf(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 5,
      "WeiTangLau": 9,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PDF);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(expectedModel, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        showPdfAtIndex(expectedModel, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * and checks that the model\u0027s selected pdf is set to the pdf at {@code index} in the filtered pdf list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setSelectedPdf(model.getFilteredPdfList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 15,
      "WeiTangLau": 9,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPdf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        deleteFirstPdf(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        deleteFirstPdf(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        deleteFirstPdf(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        deleteFirstPdf(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 5,
      "WeiTangLau": 5,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_READY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIRECTORY_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_DESC_2_PDF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_DESC_PATH_INVALID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_1_VALID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1_TOADD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_onlyFileFieldPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf expectedPdf \u003d SAMPLE_PDF_1_TOADD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FILE_DESC_1_PDF, new AddCommand(expectedPdf));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FILE_DESC_2_PDF + FILE_DESC_1_PDF,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new AddCommand(expectedPdf));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_additionalFieldsPresent_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_1_PDF + TAG_DESC_CS2103T, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_2_PDF + DEADLINE_DESC_VALID, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_1_PDF + NAME_DESC_1_VALID, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_2_PDF + DIRECTORY_DESC_1, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_2_PDF + TAG_DESC_CS2103T + DEADLINE_JSON_READY + NAME_DESC_1_VALID"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                + DIRECTORY_DESC_1, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_compulsoryFileFieldMissing_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // missing file prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, NAME_1_VALID, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DIR_1_VALID,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // invalid file path"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_PATH_INVALID, ParserUtil.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 5,
      "WeiTangLau": 29,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeadlineCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DeadlineCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DecryptCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DecryptCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            DecryptCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private DecryptCommandParser parser \u003d new DecryptCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no prefix and password"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no password"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + PASSWORD_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no password"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + PREFIX_PASSWORD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_containsIrrelevantParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + DEADLINE_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + TAG_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + FILE_DESC_1_PDF, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"0\" + PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 se/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d \"\" + targetIndex.getOneBased() + PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand expectedCommand \u003d new DecryptCommand(targetIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PASSWORD_DESC_VALID + PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand expectedCommand \u003d new DecryptCommand(targetIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PDF));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 SEROCKS\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 hard redundantTest\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "WeiTangLau": 6,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_READY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_1_INVALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_1_VALID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_2_VALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, NAME_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + DEADLINE_JSON_READY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_containsIrrelevantParts_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + DEADLINE_JSON_READY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + TAG_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + TAG_EMPTY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + FILE_DESC_1_PDF, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_2_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_2_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 se/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_1_INVALID, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + NAME_1_VALID;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .withName(NAME_1_VALID).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_1_VALID + NAME_DESC_2_VALID;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_1_INVALID + NAME_DESC_2_VALID;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 3,
      "WeiTangLau": 37,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EncryptCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class EncryptCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            EncryptCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private EncryptCommandParser parser \u003d new EncryptCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no prefix and password"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no password"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + PASSWORD_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no password"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + PREFIX_PASSWORD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_containsIrrelevantParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + DEADLINE_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + TAG_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + FILE_DESC_1_PDF, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"0\" + PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 se/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d \"\" + targetIndex.getOneBased() + PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand expectedCommand \u003d new EncryptCommand(targetIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PASSWORD_DESC_VALID + PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand expectedCommand \u003d new EncryptCommand(targetIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MergeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class MergeCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            MergeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private MergeCommandParser parser \u003d new MergeCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_containsIrrelevantPrefixes_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redundant file prefix"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_1_PDF, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redundant name prefix"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redundant password prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redundant date prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, DEADLINE_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 se/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_fieldCorrectlySpecified_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index firstIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d \"\" + firstIndex.getOneBased();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        MergeCommand expectedCommand \u003d new MergeCommand(firstIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_moreThanOneIndexSpecified_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index firstIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index secondIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d firstIndex.getOneBased() + \" \" + secondIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        MergeCommand expectedCommand \u003d new MergeCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_repeatedIndexSpecified_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index firstIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index secondIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d firstIndex.getOneBased() + \" \" + secondIndex.getOneBased();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        MergeCommand expectedCommand \u003d new MergeCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(INDEX_FIRST_PDF, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(INDEX_FIRST_PDF, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "ptvrajsk": 5,
      "WeiTangLau": 1,
      "-": 199
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PdfBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfBookParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final PdfBookParser parser \u003d new PdfBookParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdf \u003d new PdfBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(pdf));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(pdf), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PDF), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdf \u003d new PdfBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder(pdf).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                + INDEX_FIRST_PDF.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PDF, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PDF), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 7,
      "ptvrajsk": 5,
      "WeiTangLau": 4,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PDF));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class TagCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        /*Pdf expectedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withTags(TAG_VALID_LECTURE).build();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf expectedPdfMultipleTags \u003d new PdfBuilder(SAMPLE_PDF_1).withTags(TAG_VALID_CS2103T, TAG_VALID_LECTURE)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, FILE_DESC_1_PDF + TAG_DESC_LECTURE + TAG_DESC_CS2103T,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                new TagCommand(expectedPdfMultipleTags));*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new PdfBook(), new PdfBook(modelManager.getPdfBook()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPdf());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        userPrefs.setPdfBookFilePath(Paths.get(\"address/book/file/value\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        userPrefs.setPdfBookFilePath(Paths.get(\"new/address/book/file/value\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void setPdfBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.setPdfBookFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void setPdfBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/value\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.setPdfBookFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(path, modelManager.getPdfBookFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void hasPdf_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.hasPdf(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(modelManager.hasPdf(ALICE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.addPdf(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(modelManager.hasPdf(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.addPdf(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.setSelectedPdf(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.deletePdf(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPdf());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.addPdf(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.addPdf(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BOB), modelManager.getFilteredPdfList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.setSelectedPdf(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.deletePdf(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPdf());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.addPdf(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.setSelectedPdf(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf updatedAlice \u003d new PdfBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.setPdf(ALICE, updatedAlice);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedPdf());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.getFilteredPdfList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(PdfNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.setSelectedPdf(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.addPdf(ALICE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(Collections.singletonList(ALICE), modelManager.getFilteredPdfList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.setSelectedPdf(ALICE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(ALICE, modelManager.getSelectedPdf());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook differentAddressBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.updateFilteredPdfList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        modelManager.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        differentUserPrefs.setPdfBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 20,
      "WeiTangLau": 38,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PdfBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final PdfBook pdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(Collections.emptyList(), pdfBook.getPdfList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void resetData_withValidReadOnlyPdfBook_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook newData \u003d getTypicalPdfBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(newData, pdfBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two pdfs with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedAlice \u003d new PdfBuilder(ALICE).withDirectory(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e newPdfs \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBookStub newData \u003d new PdfBookStub(newPdfs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(DuplicatePdfException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.hasPdf(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfBook.hasPdf(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.addPdf(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(pdfBook.hasPdf(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.addPdf(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedAlice \u003d new PdfBuilder(ALICE).withDirectory(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(pdfBook.hasPdf(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.getPdfList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.addListener(listener);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.addPdf(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.addListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.addPdf(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * A stub ReadOnlyPdfBook whose pdfs list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static class PdfBookStub implements ReadOnlyPdfBook {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPdf\u003e pdfs \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBookStub(Collection\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            this.pdfs.setAll(pdfs);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ObservableList\u003cPdf\u003e getPdfList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return pdfs;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 33,
      "WeiTangLau": 11,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setPdfBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedPdfBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class VersionedPdfBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final ReadOnlyPdfBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final ReadOnlyPdfBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final ReadOnlyPdfBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final ReadOnlyPdfBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertThrows(VersionedPdfBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertThrows(VersionedPdfBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertThrows(VersionedPdfBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertThrows(VersionedPdfBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void assertAddressBookListStatus(VersionedPdfBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                                             List\u003cReadOnlyPdfBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                                             ReadOnlyPdfBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                                             List\u003cReadOnlyPdfBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new PdfBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        for (ReadOnlyPdfBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            assertEquals(expectedAddressBook, new PdfBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        for (ReadOnlyPdfBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            assertEquals(expectedAddressBook, new PdfBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Creates and returns a {@code VersionedPdfBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * {@code VersionedPdfBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private VersionedPdfBook prepareAddressBookList(ReadOnlyPdfBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook versionedAddressBook \u003d new VersionedPdfBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedPdfBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 24,
      "WeiTangLau": 45,
      "-": 229
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pdf/DeadlineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_1_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_2_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_COMPLETE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_INVALIDDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_INVALIDSTATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_MISSINGSEPERATORPREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_MISSINGSTATUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_READY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_STATUS_COMPLETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_STATUS_READY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PROPERTY_SEPARATOR_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.MissingFormatArgumentException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void jsonConstructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // null value -\u003e expected to throw NullPointerException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Deadline());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // missing status -\u003e expected to throw MissingFormatArgumentException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                MissingFormatArgumentException.class, () -\u003e new Deadline(DEADLINE_JSON_INVALID_MISSINGSTATUS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // invalid status -\u003e expected to throw AssertionError"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                AssertionError.class, () -\u003e new Deadline(DEADLINE_JSON_INVALID_INVALIDSTATUS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // missing property seperator -\u003e expected to throw DateTimeParseException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                DateTimeParseException.class, () -\u003e new Deadline(DEADLINE_JSON_INVALID_MISSINGSEPERATORPREFIX));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // invalid date -\u003e expected to throw dateTimeParseException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                DateTimeParseException.class, () -\u003e new Deadline(DEADLINE_JSON_INVALID_INVALIDDATE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // valid date -\u003e expected to Not throw any Exceptions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Deadline(DEADLINE_JSON_COMPLETE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void normalConstructor() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // invalid date -\u003e expected to throw DateTimeParseException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(DateTimeParseException.class, () -\u003e new Deadline(31, 2, 2012));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // valid date -\u003e expected to Not throw any Exceptions"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Deadline(Integer.parseInt(DATE_1_VALID.split(\"-\")[2]),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    Integer.parseInt(DATE_1_VALID.split(\"-\")[1]),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    Integer.parseInt(DATE_1_VALID.split(\"-\")[0]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // valid deadline with no parameters -\u003e expected to Not throw any Exceptions"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Deadline();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same deadline value, different objects -\u003e expect true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(new Deadline(DEADLINE_JSON_COMPLETE).equals(new Deadline(DEADLINE_JSON_COMPLETE)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different values -\u003e expected false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(new Deadline(DEADLINE_JSON_COMPLETE).equals(new Deadline(DEADLINE_JSON_READY)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same dates different status -\u003e expected false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(new Deadline(DATE_1_VALID + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_COMPLETE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .equals(new Deadline(DATE_1_VALID + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_READY)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different date same status -\u003e expected false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(new Deadline(DATE_2_VALID + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_READY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .equals(new Deadline(DATE_1_VALID + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_READY)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // no deadline -\u003e expected blank"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(\"\", new Deadline().toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 101,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pdf/DirectoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIR_2_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIR_INVALID_NONEXISTENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class DirectoryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // null value -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Directory(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // blank value -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String invalidDirectory \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Directory(invalidDirectory));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // blank space value -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String invalidDirectory1 \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Directory(invalidDirectory1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // Non existent directory -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String invalidDirectory2 \u003d DIR_INVALID_NONEXISTENT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Directory(invalidDirectory2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // Correct Directory -\u003e should not throw Exceptions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Directory(DIR_1_VALID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // null value -\u003e expected false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(new Directory(DIR_1_VALID).equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different directories -\u003e expected true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(new Directory(DIR_1_VALID).equals(new Directory(DIR_2_VALID)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same objects -\u003e expected true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Directory d \u003d new Directory(DIR_1_VALID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(d.equals(d));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same values, different object -\u003e expected true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(new Directory(DIR_1_VALID).equals(new Directory(DIR_1_VALID)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different values -\u003e expected false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String notExpected \u003d new StringBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Directory: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(DIR_2_VALID)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertNotEquals(new Directory(DIR_1_VALID).toString(), notExpected);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same values -\u003e expected true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String expected \u003d new StringBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Directory: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(DIR_2_VALID)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(new Directory(DIR_2_VALID).toString(), expected);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pdf/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_COMPLETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                Collections.singletonList(\"CS2103T\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withName(\"CS2103T Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2103T\", \"Lecture\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withName(\"CS2103T Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Your\", \"Lecture\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withName(\"My Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cS2103t\", \"lEctUre\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withName(\"CS2103T Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withName(\"Resume.pdf\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2107\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withName(\"CS2103T Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", DIR_1_VALID,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \"Transcript.pdf\", DEADLINE_JSON_COMPLETE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withName(\"Resume.pdf\").withSize(\"12345\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .withDirectory(DIR_1_VALID).withDeadline(DEADLINE_JSON_COMPLETE).build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 19,
      "WeiTangLau": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pdf/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_INVALID_CHARACTERS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_INVALID_EXTENSION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // null value -\u003e expect NullPointerException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // blank Name -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // blank Space Name -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // wrong Extension -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(NAME_INVALID_EXTENSION));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // invalid character -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(NAME_INVALID_CHARACTERS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // normal name -\u003e No Exceptions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Name(NAME_1_VALID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // name with space -\u003e No Exception"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Name(NAME_2_VALID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same value -\u003e expect True"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(new StringBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Name: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(NAME_1_VALID)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .toString(), new Name(NAME_1_VALID).toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different value -\u003e expect false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertNotEquals(new StringBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Name: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(NAME_1_VALID)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .toString(), new Name(NAME_2_VALID).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different values -\u003e expected false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(new Name(NAME_1_VALID).equals(new Name(NAME_2_VALID)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same object -\u003e expected true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(new Name(NAME_1_VALID).equals(new Name(NAME_1_VALID)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same values, different objects -\u003e expected true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(new Name(NAME_1_VALID).equals(new Name(NAME_1_VALID)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 62,
      "WeiTangLau": 1,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pdf/PdfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_COMPLETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIR_3_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SIZE_3_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_VALID_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1_DUPLICATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_3_ENCRYPTED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PdfTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdf \u003d new PdfBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        pdf.getTags().remove(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void isSamePdf() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(SAMPLE_PDF_1.isSamePdf(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.isSamePdf(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different directory -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf comparisonPdf \u003d new PdfBuilder(SAMPLE_PDF_1_DUPLICATE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.isSamePdf(comparisonPdf));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        comparisonPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.isSamePdf(comparisonPdf));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        comparisonPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withTags(TAG_VALID_CS2103T).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(SAMPLE_PDF_1.isSamePdf(comparisonPdf));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        comparisonPdf \u003d new PdfBuilder(SAMPLE_PDF_2).withDeadline(DEADLINE_JSON_COMPLETE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(SAMPLE_PDF_2.isSamePdf(comparisonPdf));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf acopy \u003d new PdfBuilder(SAMPLE_PDF_1).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(SAMPLE_PDF_1.equals(acopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(SAMPLE_PDF_1.equals(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(5));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(SAMPLE_PDF_2));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different directory -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withDirectory(DIR_3_VALID).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different size -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withSize(SIZE_3_VALID).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different deaedline -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withDeadline(DEADLINE_JSON_COMPLETE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withTags(TAG_VALID_LECTURE).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void isEncrypted() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // not encrypted pdf -\u003e expected false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.getIsEncrypted());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        //encrypted pdf -\u003e expected true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(SAMPLE_PDF_3_ENCRYPTED.getIsEncrypted());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 48,
      "WeiTangLau": 11,
      "-": 45,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pdf/SizeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class SizeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_nullValue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Size(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_emptyValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String invalidSize \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Size(invalidSize));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_emptySpaceValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String invalidSize \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Size(invalidSize));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_negativeValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String invalidSize \u003d CommandTestUtil.SIZE_INVALID_NEGATIVE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Size(invalidSize));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_alphabetValue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String invalidSize \u003d CommandTestUtil.SIZE_INVALID_ALPHABET;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Size(invalidSize));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_normalValue_expectNoException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Size s \u003d new Size(CommandTestUtil.SIZE_1_VALID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(\"Should not fail valid inputs.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_singleValue_expectNoException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Size s \u003d new Size(\"1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(\"Should not fail valid inputs.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_longValue_expectNoException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Size s \u003d new Size(\"12345678910111213141516171819202122232425\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail(\"Should not fail valid inputs.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void toString_matchInput_expectedTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String expected \u003d new StringBuilder()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Size: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(CommandTestUtil.SIZE_1_VALID)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(expected, new Size(CommandTestUtil.SIZE_1_VALID).toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void toString_doesNotMatchDifferentValue_expectedFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String notExpected \u003d new StringBuilder()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Size: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(CommandTestUtil.SIZE_1_VALID)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertNotEquals(notExpected, new Size(CommandTestUtil.SIZE_2_VALID).toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void equals_matchInput_expectedTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Size expected \u003d new Size(CommandTestUtil.SIZE_3_VALID);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(new Size(CommandTestUtil.SIZE_3_VALID).equals("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new Size(Long.toString(Paths.get(CommandTestUtil.FILEPATH_3_VALID).toFile().length()))));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void equals_nullInput_expectedFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(new Size(CommandTestUtil.SIZE_3_VALID).equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/model/pdf/UniquePdfListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "package seedu.address.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePdfListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final UniquePdfList uniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(uniquePdfList.contains(SAMPLE_PDF_7));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(uniquePdfList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedAlice \u003d new PdfBuilder(ALICE).withDirectory(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(uniquePdfList.contains(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(DuplicatePdfException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdf(null, ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdf(ALICE, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(PdfNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdf(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdf(ALICE, ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedUniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedAlice \u003d new PdfBuilder(ALICE).withDirectory(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdf(ALICE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedUniquePdfList.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdf(ALICE, BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedUniquePdfList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(DuplicatePdfException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdf(ALICE, BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(PdfNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.remove(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.remove(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdfs((UniquePdfList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedUniquePdfList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdfs(expectedUniquePdfList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdfs((List\u003cPdf\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.add(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e pdfList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdfs(pdfList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedUniquePdfList.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e listWithDuplicatePdfs \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expect(DuplicatePdfException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.setPdfs(listWithDuplicatePdfs);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        uniquePdfList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 15,
      "WeiTangLau": 60,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPdfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPdfTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \"DefinitelyWrongLocation\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String VALID_NAME \u003d SAMPLE_PDF_1.getName().getFullName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String VALID_LOCATION \u003d SAMPLE_PDF_1.getName().getFullName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String VALID_SIZE \u003d SAMPLE_PDF_1.getSize().getValue();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d SAMPLE_PDF_1.getTags().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void toModelType_validPdfDetails_returnsPdf() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        JsonAdaptedPdf pdf \u003d new JsonAdaptedPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(SAMPLE_PDF_1, pdf.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                new JsonAdaptedPdf(SAMPLE_PDF_1.getName().getFullName(), INVALID_LOCATION,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                SAMPLE_PDF_1.getSize().getValue(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d Directory.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new JsonAdaptedPdf(VALID_NAME, VALID_LOCATION, VALID_SIZE, invalidTags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new JsonAdaptedPdf(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d new JsonAdaptedPdf(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new JsonAdaptedPdf(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d new JsonAdaptedPdf(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new JsonAdaptedPdf(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d new JsonAdaptedPdf(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new JsonAdaptedPdf(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonAdaptedPdf person \u003d new JsonAdaptedPdf(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 33,
      "WeiTangLau": 10,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPdfBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class JsonPdfBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPdfBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPdfBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new JsonPdfBookStorage(Paths.get(filePath)).readPdfBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        readAddressBook(\"notJsonFormatPdfBook.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        readAddressBook(\"invalidPdfPdfBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        readAddressBook(\"invalidAndValidPdfPdfBook.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempPdfPlusPlus.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook original \u003d getTypicalPdfBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonPdfBookStorage jsonPdfBookStorage \u003d new JsonPdfBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        jsonPdfBookStorage.savePdfBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ReadOnlyPdfBook readBack \u003d jsonPdfBookStorage.readPdfBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(original, new PdfBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        original.addPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        original.removePdf(SAMPLE_PDF_3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        jsonPdfBookStorage.savePdfBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        readBack \u003d jsonPdfBookStorage.readPdfBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(original, new PdfBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // Save and read without specifying file value"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        original.addPdf(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        jsonPdfBookStorage.savePdfBook(original); // file value not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        readBack \u003d jsonPdfBookStorage.readPdfBook().get(); // file value not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(original, new PdfBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void saveAddressBook(ReadOnlyPdfBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new JsonPdfBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .savePdfBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        saveAddressBook(new PdfBook(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 15,
      "WeiTangLau": 18,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializablePdfBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.TypicalPdfs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class JsonSerializablePdfBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePdfBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPdfPdfBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPdfPdfBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePdfPdfBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonSerializablePdfBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                JsonSerializablePdfBook.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook typicalPersonsAddressBook \u003d TypicalPdfs.getTypicalPdfBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonSerializablePdfBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                JsonSerializablePdfBook.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonSerializablePdfBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                JsonSerializablePdfBook.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        thrown.expectMessage(JsonSerializablePdfBook.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 13,
      "WeiTangLau": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        userPrefs.setPdfBookFilePath(Paths.get(\"pdfplusplus.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonPdfBookStorage addressBookStorage \u003d new JsonPdfBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         * {@link JsonPdfBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPdfBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook original \u003d getTypicalPdfBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        storageManager.savePdfBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ReadOnlyPdfBook retrieved \u003d storageManager.readPdfBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(original, new PdfBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertNotNull(storageManager.getPdfBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 6,
      "WeiTangLau": 5,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " *     {@code PdfBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private PdfBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        addressBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public AddressBookBuilder(PdfBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Adds a new {@code Pdf} to the {@code PdfBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Pdf pdf) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        addressBook.addPdf(pdf);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 9,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPdfDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Size;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A utility class to help with building EditPdfDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class EditPdfDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private EditCommand.EditPdfDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EditPdfDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        descriptor \u003d new EditCommand.EditPdfDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EditPdfDescriptorBuilder(EditCommand.EditPdfDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditPdfDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns an {@code EditPdfDescriptor} with fields containing {@code pdf}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EditPdfDescriptorBuilder(Pdf pdf) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        descriptor \u003d new EditCommand.EditPdfDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(pdf.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(pdf.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPdfDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EditPdfDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPdfDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EditPdfDescriptorBuilder withSize(String size) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        descriptor.setSize(new Size(size));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPdfDescriptor}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EditPdfDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EditCommand.EditPdfDescriptor build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 26,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PdfBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Size;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * A utility class to help with building Pdf objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final File DEFAULT_FILE \u003d Paths.get("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \"src\", \"test\", \"data\", \"JsonAdaptedPdfTest\", \"CS2103T_Lecture3.pdf\").toFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String DEFAULT_NAME \u003d DEFAULT_FILE.getName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String DEFAULT_DIRECTORY \u003d DEFAULT_FILE.getParent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String DEFAULT_SIZE \u003d Long.toString(DEFAULT_FILE.length());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String DEFAULT_DEADLINE \u003d CommandTestUtil.DEADLINE_JSON_READY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Directory directory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Size size;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private boolean isEncrypted;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        directory \u003d new Directory(DEFAULT_DIRECTORY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        size \u003d new Size(DEFAULT_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        isEncrypted \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Initializes the PdfBuilder with the data of {@code pdfToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfBuilder(Pdf pdfToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        name \u003d pdfToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        directory \u003d pdfToCopy.getDirectory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        size \u003d pdfToCopy.getSize();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(pdfToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        deadline \u003d pdfToCopy.getDeadline();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        isEncrypted \u003d pdfToCopy.getIsEncrypted();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Sets the {@code Name} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfBuilder withName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     *  Sets the {@code Directory} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBuilder withDirectory(String location) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.directory \u003d new Directory(location);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Sets the {@code Size} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfBuilder withSize(String size) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.size \u003d new Size(size);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Sets the {@code Size} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBuilder withEncrypted(boolean isEncrypted) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.isEncrypted \u003d isEncrypted;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBuilder withDeadline(String date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (date.equals(\"NEWLY ADDED\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            this.deadline \u003d new Deadline();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            this.deadline \u003d new Deadline(date);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Pdf build() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new Pdf(new Pdf(name, directory, size, tags, deadline), isEncrypted);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 78,
      "WeiTangLau": 33,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIRECTORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPdfDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Pdf."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code pdf}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Pdf pdf) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPdfDetails(pdf);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code pdf}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static String getPdfDetails(Pdf pdf) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sb.append(\"\" + PREFIX_NAME + pdf.getName().getFullName())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .append(\" \" + PREFIX_DIRECTORY + pdf.getDirectory().getDirectory())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .append(\" \" + PREFIX_DEADLINE_NEW + pdf.getDeadline());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        pdf.getTags().stream().forEach("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG_ADD + s.tagName + \" \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the part of command string for the given {@code EditPdfDescriptor}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPdfDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.getFullName()).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        //descriptor.getDirectory().ifPresent(dir -\u003e sb.append(PREFIX_DIRECTORY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        // .append(dir.getDirectory()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                sb.append(PREFIX_TAG_ADD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG_ADD).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "ptvrajsk": 2,
      "WeiTangLau": 15,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder value and returns the resulting value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the pdf in the {@code model}\u0027s pdf list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPdfList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the pdf in the {@code model}\u0027s pdf list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the pdf in the {@code model}\u0027s pdf list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Pdf getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.getFilteredPdfList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final Index INDEX_FIRST_PDF \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final Index INDEX_SECOND_PDF \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final Index INDEX_THIRD_PDF \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPdfs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_COMPLETE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_JSON_READY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Pdf} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class TypicalPdfs {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    // Original Pdfs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_1_path \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2103T_PDF++_UG_Intro.pdf\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_2_path \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2103T_Week9_Integration Approaches.pdf\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_3_path \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS3230_Lecture9_GreedyAlgorithm.pdf\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_4_path \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2103T_Lecture3.pdf\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_5_path \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2103_Schedule_AY1819S2.pdf\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_6_path \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"GitCheatSheet.pdf\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_7_path \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"Markdown-Cheatsheet.pdf\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_8_path \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2101_UG and DG Peer Review.pdf\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_9_path \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2101_Product Demo strategies1.pdf\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_10_path \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2103T_sample PPP.pdf\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_11_path \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2101_Writing User Guides.pdf\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_invalidPdf_1_path \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"invalidPathToFile.pdf\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_EditedPdf_1_path \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"JustEdited.pdf\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_1_encrypted_path \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"EncryptedFiles\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2103T_PDF++_UG_Intro.pdf\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_2_encrypted_path \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"EncryptedFiles\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2103T_Week9_Integration Approaches.pdf\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_3_encrypted_path \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"EncryptedFiles\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \"CS2101_Product_PW_123321.pdf\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Duplicates - Pdfs that have the same name but in a different location"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_1_duplicate_path \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103T_PDF++_UG_Intro.pdf\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_2_duplicate_path \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103T_Week9_Integration Approaches.pdf\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_3_duplicate_path \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS3230_Lecture9_GreedyAlgorithm.pdf\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_4_duplicate_path \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103T_Lecture3.pdf\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_5_duplicate_path \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103_Schedule_AY1819S2.pdf\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_6_duplicate_path \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"GitCheatSheet.pdf\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_7_duplicate_path \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"Markdown-Cheatsheet.pdf\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_8_duplicate_path \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2101_UG and DG Peer Review.pdf\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_9_duplicate_path \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2101_Product Demo strategies1.pdf\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_10_duplicate_path \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103T_sample PPP.pdf\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_pdf_11_duplicate_path \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2101_Writing User Guides.pdf\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Path sample_invalidPdf_1_duplicate_path \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \"DuplicateFiles\", \"invalidPdf_1.pdf\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Originals"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_1 \u003d new PdfBuilder().withName(sample_pdf_1_path.toFile().getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_1_path.toFile().length()))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_READY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_2 \u003d new PdfBuilder().withName(sample_pdf_2_path.toFile().getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_2_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2103T\", \"lecture\", \"w9\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_2_path.toFile().length()))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_READY).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_3 \u003d new PdfBuilder().withName(sample_pdf_3_path.toFile().getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_3_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS3230\", \"lecture\", \"w9\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_3_path.toFile().length()))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_READY).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_4 \u003d new PdfBuilder().withName(sample_pdf_4_path.toFile().getName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_4_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2103T\", \"lecture\", \"w3\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_4_path.toFile().length())).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_5 \u003d new PdfBuilder().withName(sample_pdf_5_path.toFile().getName())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_5_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2103\", \"schedule\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_5_path.toFile().length())).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_6 \u003d new PdfBuilder().withName(sample_pdf_6_path.toFile().getName())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_6_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"Git\", \"cheatsheet\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_6_path.toFile().length())).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_7 \u003d new PdfBuilder().withName(sample_pdf_7_path.toFile().getName())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_7_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"markdown\", \"cheatsheet\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_7_path.toFile().length())).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_8 \u003d new PdfBuilder().withName(sample_pdf_8_path.toFile().getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_8_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2101\", \"review\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_8_path.toFile().length())).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_9 \u003d new PdfBuilder().withName(sample_pdf_9_path.toFile().getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_9_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2101\", \"demo\", \"strategies\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_9_path.toFile().length())).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_10 \u003d new PdfBuilder().withName(sample_pdf_10_path.toFile().getName())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_10_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2103T\", \"PPP\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_10_path.toFile().length())).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_11 \u003d new PdfBuilder().withName(sample_pdf_11_path.toFile().getName())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_11_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2101\", \"writing\", \"UG\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_11_path.toFile().length())).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_INVALIDPDF_1 \u003d new PdfBuilder().withName(sample_invalidPdf_1_path.toFile().getName())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_invalidPdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"invalid\", \"pdf\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_invalidPdf_1_path.toFile().length())).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_EDITEDPDF \u003d new PdfBuilder().withName(sample_EditedPdf_1_path.toFile().getName())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_invalidPdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"invalid\", \"pdf\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_COMPLETE)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_invalidPdf_1_path.toFile().length())).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_WITH_DEADLINE \u003d new PdfBuilder(SAMPLE_PDF_1)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_COMPLETE).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_1_ENCRYPTED \u003d new PdfBuilder(SAMPLE_PDF_1)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_1_encrypted_path.toFile().length()))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withEncrypted(true).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_2_ENCRYPTED \u003d new PdfBuilder(SAMPLE_PDF_2)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_2_encrypted_path.toFile().length()))"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withEncrypted(true).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_3_ENCRYPTED \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_3_encrypted_path.toFile().getName())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_3_encrypted_path.toFile().length()))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_3_encrypted_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withEncrypted(true)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_1_TOADD \u003d new PdfBuilder().withName(sample_pdf_1_path.toFile().getName())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDirectory(sample_pdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_1_path.toFile().length()))"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withDeadline(\"NEWLY ADDED\").build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //Duplicates"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_1_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_1_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_1_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_1_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_2_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_2_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_2_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2103T\", \"lecture\", \"w9\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_2_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_3_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_3_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_3_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS3230\", \"lecture\", \"w9\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_3_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_4_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_4_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_4_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2103T\", \"lecture\", \"w3\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_4_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_5_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_5_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_5_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2103\", \"schedule\")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_5_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_6_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_6_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_6_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"Git\", \"cheatsheet\")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_6_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_7_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_7_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_7_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"markdown\", \"cheatsheet\")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_7_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_8_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_8_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_8_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withTags(\"moduleH\", \"tutorial\", \"w7\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_8_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_9_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_9_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_9_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2101\", \"review\")"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_9_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_10_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_10_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_10_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2103T\", \"PPP\")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_10_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_PDF_11_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_pdf_11_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_pdf_11_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"CS2101\", \"writing\", \"UG\")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_pdf_11_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Pdf SAMPLE_INVALIDPDF_1_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withName(sample_invalidPdf_1_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            .withDirectory(sample_invalidPdf_1_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withTags(\"invalid\", \"pdf\")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            .withSize(Long.toString(sample_invalidPdf_1_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private TypicalPdfs() {} // prevents instantiation"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns an {@code PdfBook} with all the typical persons."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static PdfBook getTypicalPdfBook() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook pdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        for (Pdf pdf : getTypicalPdfs()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            pdfBook.addPdf(pdf);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfBook;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static List\u003cPdf\u003e getTypicalPdfs() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SAMPLE_PDF_1, SAMPLE_PDF_2, SAMPLE_PDF_3));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 71,
      "WeiTangLau": 172,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/*import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.model.pdf.Pdf;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*private SimpleObjectProperty\u003cPdf\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPerson));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a pdf"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + SAMPLE_PDF_1.getName().getFullName()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 5,
      "WeiTangLau": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A GUI unit test class for PdfBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.storage.JsonPdfBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonPdfBookStorage jsonPdfBookStorage \u003d new JsonPdfBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonPdfBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 3,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PdfCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PdfCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdfWithNoTags \u003d new PdfBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfCard pdfCard \u003d new PdfCard(pdfWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        uiPartRule.setUiPart(pdfCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCardDisplay(pdfCard, pdfWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdfWithTags \u003d new PdfBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfCard \u003d new PdfCard(pdfWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        uiPartRule.setUiPart(pdfCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCardDisplay(pdfCard, pdfWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdf \u003d new PdfBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfCard pdfCard \u003d new PdfCard(pdf, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same pdf, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfCard copy \u003d new PdfCard(pdf, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(pdfCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(pdfCard.equals(pdfCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf differentPdf \u003d new PdfBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfCard.equals(new PdfCard(differentPdf, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same pdf, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfCard.equals(new PdfCard(pdf, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Asserts that {@code pdfCard} displays the details of {@code expectedPdf} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private void assertCardDisplay(PdfCard pdfCard, Pdf expectedPdf, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(pdfCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify pdf details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPdf, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 22,
      "WeiTangLau": 1,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PdfListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.getTypicalPdfs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.pdf.Directory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.address.model.pdf.Size;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class PdfListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPdf\u003e TYPICAL_PDFS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            FXCollections.observableList(getTypicalPdfs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cPdf\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PDFS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PDFS.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PDFS.get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Pdf expectedPdf \u003d TYPICAL_PDFS.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPdf, actualCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void selection_modelSelectedPersonChanged_selectionChanges() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PDFS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf secondPdf \u003d TYPICAL_PDFS.get(INDEX_SECOND_PDF.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPerson.set(secondPdf));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PDF.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PdfListPanel} requires lesser than"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPdf\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of pdf cards exceeded time limit\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * {@code PdfListPanel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPdf\u003e createBackingList(int personCount) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPdf\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Name name \u003d new Name(i + \"a.pdf\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Directory directory \u003d new Directory(\"C:\\\\Users\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Size size \u003d new Size(\"1024\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Pdf pdf \u003d new Pdf(name, directory, size, Collections.emptySet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(pdf);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PdfListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PdfListPanel}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPdf\u003e backingList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfListPanel pdfListPanel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new PdfListPanel(backingList, selectedPerson, selectedPerson::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        uiPartRule.setUiPart(pdfListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(pdfListPanel.getRoot(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "ptvrajsk": 8,
      "WeiTangLau": 4,
      "-": 81,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final PdfBook pdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, pdfBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        guiRobot.interact(() -\u003e pdfBook.addPdf(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 3,
      "WeiTangLau": 2,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPdf}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Pdf expectedPdf, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(expectedPdf.getName().getFullName(), actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPdf.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code pdfs} correctly and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Pdf... pdfs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c pdfs.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(pdfs[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code pdfs} correctly and"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, pdfs.toArray(new Pdf[0]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 1,
      "-": 69
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIR_2_VALID;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.ALICE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.CARL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.HOON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.IDA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_2_DUPLICATE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.SAMPLE_PDF_3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a pdf without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf toAdd \u003d SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + DIR_1_VALID + \" \" + TAG_DESC_LECTURE + \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        /* Case: undo adding SAMPLE_PDF_1 to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        /* Case: redo adding SAMPLE_PDF_1 to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.addPdf(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: add another pdf with different properties */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        toAdd \u003d new PdfBuilder(SAMPLE_PDF_2).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + DIR_2_VALID;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: add a pdf with the same name but different directory -\u003e added*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        toAdd \u003d SAMPLE_PDF_2_DUPLICATE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: add a pdf with tags, command with parameters in random order -\u003e added *//*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        toAdd \u003d SAMPLE_PDF_3;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_CS2103T + DIR_3_VALID;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: add a pdf, missing tags -\u003e added *//*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* -------------------------- Perform add operation on the shown filtered list ------------------------"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ------ *//*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: filters the pdf list before adding -\u003e added *//*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* ------------------------ Perform add operation while a pdf card is selected ------------------------"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        --- *//*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: selects first card in the pdf list, add a pdf -\u003e added, card selection remains unchanged *//*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* ----------------------------------- Perform invalid add operations ---------------------------------"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ------ *//*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: add a duplicate pdf -\u003e rejected *//*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: add a duplicate pdf except with different phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        toAdd \u003d new PdfBuilder(HOON).withSize(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: add a duplicate pdf except with different email -\u003e rejected *//*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        toAdd \u003d new PdfBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: add a duplicate pdf except with different address -\u003e rejected *//*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        toAdd \u003d new PdfBuilder(HOON).withDirectory(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: add a duplicate pdf except with different tags -\u003e rejected *//*"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG_ADD.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: missing name -\u003e rejected *//*"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: missing phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: missing email -\u003e rejected *//*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: missing address -\u003e rejected *//*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid keyword -\u003e rejected *//*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPdfDetails(toAdd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid name -\u003e rejected *//*"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid email -\u003e rejected *//*"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid address -\u003e rejected *//*"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid tag -\u003e rejected *//*"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);*/"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 4. {@code Storage} and {@code PdfListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Pdf toAdd) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Pdf)}. Executes {@code command}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Pdf)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Pdf toAdd) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.addPdf(toAdd);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Pdf)} except asserts that"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 2. {@code Storage} and {@code PdfListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Pdf)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 4. {@code Storage} and {@code PdfListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 70,
      "WeiTangLau": 29,
      "-": 156
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import seedu.address.testutil.TypicalPdfs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A system test class for PdfBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    protected PdfBook getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return TypicalPdfs.getTypicalPdfBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(getModel().getPdfBook().getPdfList().size(), getModel().getFilteredPdfList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(getModel().getFilteredPdfList().size() \u003c getModel().getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the pdf at {@code index} of the displayed list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(0, getModel().getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same pdf objects as {@code expectedModel}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the pdf list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(new PdfBook(expectedModel.getPdfBook()), testApp.readStoragePdfBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPdfList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the pdf in the pdf list panel at"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the pdf list panel remain unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPdfList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "WeiTangLau": 9,
      "-": 276
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: undo clearing pdf book -\u003e original pdf book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: redo clearing pdf book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: selects first card in pdf list and clears pdf book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original pdf book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the pdf list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original pdf book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 6,
      "-": 95
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first pdf in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PDF.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf deletedPdf \u003d removePerson(expectedModel, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PDF_SUCCESS, deletedPdf);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last pdf in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last pdf in the list -\u003e last pdf restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last pdf in the list -\u003e last pdf deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle pdf in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered pdf list, delete index within bounds of address book and pdf list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Index index \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPdfList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered pdf list, delete index within bounds of address book but out of bounds of pdf list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        int invalidIndex \u003d getModel().getPdfBook().getPdfList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a pdf card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected pdf -\u003e pdf list panel selects the pdf before the deleted pdf */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPdf \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PDF_SUCCESS, deletedPdf);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                getModel().getPdfBook().getPdfList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Pdf} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed pdf"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Pdf removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Pdf targetPdf \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.deletePdf(targetPdf);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPdf;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the pdf at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Pdf deletedPdf \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PDF_SUCCESS, deletedPdf);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 8,
      "ptvrajsk": 1,
      "WeiTangLau": 8,
      "-": 176
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.pdf.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* ----------------- Performing edit operation while an unfiltered list is being shown -------"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        --------------- *//*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPdf);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: undo editing the last pdf in the list -\u003e last pdf restored *//*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: redo editing the last pdf in the list -\u003e last pdf edited again *//*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdf(getModel().getFilteredPdfList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPdf);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit a pdf with new values same as existing values -\u003e edited *//*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit a pdf with new values same as another pdf\u0027s values but with different name -\u003e edited *//*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(getModel().getPdfBook().getPdfList().contains(BOB));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertNotEquals(getModel().getFilteredPdfList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_A + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPdf);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit a pdf with new values same as another pdf\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(BOB).withSize(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPdf);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: clear tags -\u003e cleared *//*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG_ADD.getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToEdit \u003d getModel().getFilteredPdfList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(pdfToEdit).withTags().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPdf);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* ------------------ Performing edit operation while a filtered list is being shown -----------------"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ------- *//*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: filtered pdf list, edit index within bounds of address book and pdf list -\u003e edited *//*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPdfList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfToEdit \u003d getModel().getFilteredPdfList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(pdfToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPdf);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: filtered pdf list, edit index within bounds of address book but out of bounds of pdf list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        int invalidIndex \u003d getModel().getPdfBook().getPdfList().size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* --------------------- Performing edit operation while a pdf card is selected ----------------------"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ---- *//*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: selects first card in the pdf list, edit a pdf -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_A + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new pdf\u0027s name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* --------------------------------- Performing invalid edit operation --------------------------------"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ------ *//*"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid index (0) -\u003e rejected *//*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid index (-1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid index (size + 1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPdfList().size() + 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: missing index -\u003e rejected *//*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: missing all fields -\u003e rejected *//*"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid name -\u003e rejected *//*"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid email -\u003e rejected *//*"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid address -\u003e rejected *//*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: invalid tag -\u003e rejected *//*"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit a pdf with new values same as another pdf\u0027s values -\u003e rejected *//*"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(getModel().getPdfBook().getPdfList().contains(BOB));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(getModel().getFilteredPdfList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit a pdf with new values same as another pdf\u0027s values but with different tags -\u003e rejected *//*"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit a pdf with new values same as another pdf\u0027s values but with different address -\u003e rejected *//*"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit a pdf with new values same as another pdf\u0027s values but with different phone -\u003e rejected *//*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: edit a pdf with new values same as another pdf\u0027s values but with different email -\u003e rejected *//*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Pdf, Index)} except that"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Pdf, Index)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Pdf editedPdf) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPdf, null);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the pdf at index {@code toEdit} being"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPdf}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Pdf editedPdf,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.setPdf(expectedModel.getFilteredPdfList().get(toEdit.getZeroBased()), editedPdf);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "ptvrajsk": 90,
      "WeiTangLau": 18,
      "-": 192
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PDFS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.DANIEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import static seedu.address.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: repeat previous find command where pdf list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find pdf where pdf list is not displaying the pdf we are finding -\u003e 1 pdf found *//*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found *//*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found *//*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found *//*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: undo previous find command -\u003e rejected *//*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: redo previous find command -\u003e rejected *//*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find same persons in address book after deleting 1 of them -\u003e 1 pdf found *//*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(getModel().getPdfBook().getPdfList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find pdf in address book, keyword is same as name but of different case -\u003e 1 pdf found *//*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find pdf in address book, keyword is substring of name -\u003e 0 persons found *//*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find pdf in address book, name is substring of keyword -\u003e 0 persons found *//*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find pdf not in address book -\u003e 0 persons found *//*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find phone number of pdf in address book -\u003e 0 persons found *//*"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find address of pdf in address book -\u003e 0 persons found *//*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find email of pdf in address book -\u003e 0 persons found *//*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find tags of pdf in address book -\u003e 0 persons found *//*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find while a pdf is selected -\u003e selected card deselected *//*"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(getPdfListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: find pdf in empty address book -\u003e 0 persons found *//*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        *//* Case: mixed case command word -\u003e rejected *//*"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PDFS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                MESSAGE_PDFS_LISTED_OVERVIEW, expectedModel.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 48,
      "WeiTangLau": 1,
      "-": 146
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPdfList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "WeiTangLau": 1,
      "-": 103
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Predicate\u003cPdf\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPdf\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPdf\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Pdf... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Pdf} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPdf\u003e getPredicateMatching(Pdf other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 2,
      "-": 37
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.PdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    protected PdfBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf[] expectedList \u003d SampleDataUtil.getSamplePdfs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static seedu.address.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the pdf list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the pdf list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the pdf list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered pdf list, select index within bounds of address book but out of bounds of pdf list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        int invalidIndex \u003d getModel().getPdfBook().getPdfList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered pdf list, select index within bounds of address book and pdf list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPdfList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPdfList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected pdf.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 4. {@code Storage} and {@code PdfListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 4. {@code Storage} and {@code PdfListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 4,
      "ptvrajsk": 3,
      "WeiTangLau": 7,
      "-": 140
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import seedu.address.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyPdfBook\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 2,
      "-": 72
    }
  }
]
